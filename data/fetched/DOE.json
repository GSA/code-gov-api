{
  "agency": "UNKNOWN",
  "measurementType": {
    "ifOther": "",
    "method": "other"
  },
  "releases": [
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Teuchos is designed to provide portable, object-oriented tools for Trillnos developers and users. This includes templated wrappers to BLAS/LAPACK, a serial dense matrix class, a parameter list, XML parsing utilities, reference counted pointer (smart pointer) utilities, and more. These tools are designed to run on both serial and parallel computers.",
      "laborHours": 0,
      "languages": [],
      "name": "Teuchos Utility Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Amesos is the Direct Sparse Solver Package in Trilinos. The goal of Amesos is to make AX=S as easy as it sounds, at least for direct methods. Amesos provides interfaces to a number of third party sparse direct solvers, including SuperLU, SuperLU MPI, DSCPACK, UMFPACK and KLU. Amesos provides a common object oriented interface to the best sparse direct solvers in the world. A sparse direct solver solves for x in Ax = b. where A is a matrix and x and b are vectors (or multi-vectors). A sparse direct solver flrst factors A into trinagular matrices L and U such that A = LU via gaussian elimination and then solves LU x = b. Switching amongst solvers in Amesos roquires a change to a single parameter. Yet, no solver needs to be linked it, unless it is used. All conversions between the matrices provided by the user and the format required by the underlying solver is performed by Amesos. As new sparse direct solvers are created, they will be incorporated into Amesos, allowing the user to simpty link with the new solver, change a single parameter in the calling sequence, and use the new solver. Amesos allows users to specify whether the matrix has changed. Amesos can be used anywhere that any sparse direct solver is needed.",
      "laborHours": 0,
      "languages": [],
      "name": "Amesos Solver Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The MRSH project is a collection of the following programs: MRSH, MRCP, MRLOGIN, MRSHD, MRLOGIND. These programs are modifications of the programs RSH, RCP, RLOGIN, RSHD, and RLOGIND. They have been modified to provide authentication via munge, an intra-cluster authentication service. Henceforth, \"MRSH\" implies the collective set of programs MRSH, MRCP, MRLOGIN, MRSHD, and MRLOGIND. Similarly RSH will refer to its collective set of programs.",
      "laborHours": 0,
      "languages": [],
      "name": "MRSH Version V2.0",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chaos/mrsh",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Lustre Administrative Tools (LAT) is a set of programs and utilities designed to facilitate management of the Lustre File System by System Administrators.",
      "laborHours": 0,
      "languages": [],
      "name": "Lustre Administrative Tool",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/cea-hpc/shine",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "WHATSUP determines which nodes in a cluster are up and which nodes are down.",
      "laborHours": 0,
      "languages": [],
      "name": "WHATSUP Version1.3",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chaos/whatsup",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Nux is an open-source Java XML toolset geared towards embed:,ed use in high-throughput XML messaging middleware such as large- scale Peer-to-Peer infrastructures, message queues, publish- subscribe and matchmaking systems for Blogs/newsfeeds, text chat, data acquisition and distribution systems, application level routers firewalls, classifiers, etc. It is not an XML database, and does not attempt to be one. Features include: archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Seamless W3C XQuery and XPath support for XOM. archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Full-text search (fuzzy similarity queries) for on-the-fly matchmaking in realtime streaming applications combining structured and unstructured queries. archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Efficient and flexible pools and factories for documents, XQueries, XSL Transforms, as well as document Builders that validate against various schema languages, including W3C XML Schemas, DTDs, RELAX NG, Schematron, etc. archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Optional serialization and deserialization of XOM XML documents to and from an efficient and compact custom binary XML data format (bnux format), without loss or change of any information.",
      "laborHours": 0,
      "languages": [],
      "name": "Nux, V.1.0",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/er1c/nux/blob/master/doc/license.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/er1c/nux/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "An MPI-based test for benchmarking parallel I/O beowulf-style clusters.",
      "laborHours": 0,
      "languages": [],
      "name": "MIB, the MPI I/O Benchmark",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/mib",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Galeri package defines a collection of serial and distributed linear algebra objects to be used for software verification and validation. Galeri is used in several of the examples of the Amesos, IFPACK and ML packages, and in the Trilinos tutorial, Didasko. Galeri can be used for the generation of linear system with known propeties and data distribution for convergence analysis of interative solvers of Krylov type and domain decomposition and multigrid preconditioners.",
      "laborHours": 0,
      "languages": [],
      "name": "Galeri Matrix Generation Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Moertel supplies capabilities for nonconforming mesh tying and contact formulations in 2 and 3 dimensions using Mortar methods. Motar methods are a type of Lagrange Multiplier constraints that can be used in contact formulations and in non-conforming or conforming mesh typing as well as in domain decomposition techniques. Suitable conditions at interfaces are formulated as weak continuity conditions in dual variables introducing Lagrange multiplers on the interface. By an appropriate choice of the function space of the Lagrange multipliers on an interface it is possible to locally condense Lagrange multipliers such that a sparse and definite system of equations can be formed which is equalivalent to the saddle point system resulting from the Lagrange multiplier formulation.",
      "laborHours": 0,
      "languages": [],
      "name": "Moertel Fe Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "WebTrilinos is a scientific portal, a web-based environment to use several Trilinos packages through the web. If you are a teaching sparse linear algebra, you can use WebTrilinos to present code snippets and simple scripts, and let the students execute them from their browsers. If you want to test linear algebra solvers, you can use the MatrixPortal module, and you just have to select problems and options, then plot the results in nice graphs.",
      "laborHours": 0,
      "languages": [],
      "name": "Trilinos Web Interface Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/WebTrilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Stratimikos is a small package of C++ wrappers for linear solver and preconditioning functionality exposed through Thyra interfaces. This package makes is possible to aggregate all of the general linear solver capability from the packages Amesos, AztecOO, Belos, lfpack, ML and others into a simple to use, parameter-list driven, interface to linear solvers. This initial version of Stratimikos contains just one utility class for building linear solvrs and preconditioners out of Epetra-based linear operators.",
      "laborHours": 0,
      "languages": [],
      "name": "Stratimikos Wrapper Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Aprepro is an algebraic preprocessor that reads a file containing both general text and algebraic, string, or conditional expressions. It interprets the expressions and outputs them to the output file along witht the general text. Aprepro contains several mathematical functions, string functions, and flow control constructs. In addition, functions are included that, with some additional files, implement a units conversion system and a material database lookup system.",
      "laborHours": 0,
      "languages": [],
      "name": "Aprepro - Algebraic Preprocessor",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MRNet is a software tree-based overlay network developed at the University of Wisconsin, Madison that provides a scalable communication mechanism for parallel tools. MRNet, uses a tree topology of networked processes between a user tool and distributed tool daemons. This tree topology allows scalable multicast communication from the tool to the daemons. The internal nodes of the tree can be used to distribute computation and alalysis on data sent from the tool daemons to the tool. This release covers minor implementation to port this software to the BlueGene/L architecuture and for use with a new implementation of the Dynamic Probe Class Library.",
      "laborHours": 0,
      "languages": [],
      "name": "Multicast Reduction Network Source Code",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dyninst/mrnet",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Tramonto is a code for performing molecular theory calculations using a matrix-based Newton's method approach for 1D, 2D, and 3D geometries. More specifically the code solves the integral equations of a particular class of liquid state theory namely density functional theories (DFT) of inhomogeneous fluids in order to predict the structure and thermodynamic properties of fluids near surfaces, in porous media, or near macromolecules. It can also be used to study self-assembling systems such as lamellae forming diblock copolymers or lipid bilayers. The types of fluids currently treated by the code include atomistic fluids (hard spheres, Lennard-Jones, ions, etc), freely-jointed polymers, and small molecules with bond constraints. The system of equations solved by this code are integral equations of finite range. They lead to sparse matrices for large physical systems, but rather dense matrices when the physical systems are small. The systems of equations are solved using a real space matrix based Newton's method. Standard freely available parallel iterative solvers many be used to solve the problem (see Aztecoo from Sandia's Trilinos project). Alternatively, specialized Schur complement based solvers developed for more efficient solution of these semi-dense matrices may be used.",
      "laborHours": 0,
      "languages": [],
      "name": "Tramonto",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/symashayak/tramonto",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Aristos is a Trilinos package for nonlinear continuous optimization, based on full-space sequential quadratic programming (SQP) methods. Aristos is specifically designed for the solution of large-scale constrained optimization problems in which the linearized constraint equations require iterative (i.e. inexact) linear solver techniques. Aristos' unique feature is an efficient handling of inexactness in linear system solves. Aristos currently supports the solution of equality-constrained convex and nonconvex optimization problems. It has been used successfully in the area of PDE-constrained optimization, for the solution of nonlinear optimal control, optimal design, and inverse problems.",
      "laborHours": 0,
      "languages": [],
      "name": "Aristos Optimization Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Sacado is an automatic differentiation package for C++ codes using operator overloading and C++ templating. Sacado provide forward, reverse, and Taylor polynomial automatic differentiation classes and utilities for incorporating these classes into C++ codes. Users can compute derivatives of computations arising in engineering and scientific applications, including nonlinear equation solving, time integration, sensitivity analysis, stability analysis, optimization and uncertainity quantification.",
      "laborHours": 0,
      "languages": [],
      "name": "Automatic Differentiation Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "HPCCG is a simple PDE application and preconditioned conjugate gradient solver that solves a linear system on a beam-shaped domain. Although it does not address many performance issues present in real engineering applications, such as load imbalance and preconditioner scalability, it can serve as a first \"sanity test\" of new processor design choices, inter-connect network design choices and the scalability of a new computer system. Because it is self-contained, easy to compile and easily scaled to 100s or 1000s of porcessors, it can be an attractive study code for computer system designers.",
      "laborHours": 0,
      "languages": [],
      "name": "HPCCG Solver Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Mantevo/HPCCG",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MRNet is a software tree-based overlay network developed at the University of Wisconsin, Madison that provides a scalable communication mechanism for parallel tools. MRNet uses a tree topology of networked processes between a user tool and distributed tool daemons. This tree topology allows scalable multicast communication from the tool to the daemons. The internal nodes of the tree can be used to distribute computation and analysis on data sent from the tool daemons to the tool. This release covers modifications that we have made to the Wisconsin implementation to port this software to the BlueGene/L architecture. It also covers some additional files that were created for this port.",
      "laborHours": 0,
      "languages": [],
      "name": "BlueGene/L Specific Modification to MRNet: Multicast/Reduction Network",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dyninst/mrnet",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GraphLib is a support library used by other tools to create, manipulate, store, and export graphs. It provides a simple interface to specifS' arbitrary directed and undirected graphs by adding nodes and edges. Each node and edge can be associated with a set of attributes describing size, color, and shape. Once created, graphs can be manipulated using a set of graph analysis algorithms, including merge, prune, and path coloring operations. GraphLib also has the ability to export graphs into various open formats such as DOT and GML.",
      "laborHours": 0,
      "languages": [],
      "name": "Graph Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/graphlib",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The numa-maps program displays information about how memory for processes is laid out on a NUMA (Non-Uniform Memory Architecture) system running Linux.",
      "laborHours": 0,
      "languages": [],
      "name": "numa-maps",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/grondo/numa-maps",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The package provides additional IB programs and scripts which are usefull in some way or another to the management of IB clusters.",
      "laborHours": 0,
      "languages": [],
      "name": "Pragmatic-infiniband-utilities",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/weiny2/pragmatic-infiniband-utilities",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Mapvar is designed to transfer solution results from one finite element mesh to another. Mapvar draws heavily from the structure and coding of MERLIN II, but it employs a new finite element data base. Exodus II, and offers enhanced speed and new capabilities not aavailable in MERLIN II.",
      "laborHours": 0,
      "languages": [],
      "name": "MAPVAR V1.9",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Parallel Heterogeneous Dynamic unstructured Mesh (phdMesh) data structure library and integration testing code that performs dynamic load balancing of the data structure and parallel geometric proximity search on a contrived test problem. The phdMesh library is intended to be module within a finite element or finite volume library or code. The integration testing code is intended to provide a compact and highly portable performance evaluation code for parallel computing systems.",
      "laborHours": 0,
      "languages": [],
      "name": "phdMesh",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Txtexo will convert a file in the structured text output format created by exotxt back to an exodusII database file. The text file must conform to the format written by the exotxt program but it can be modified as long as the data are consistent. Txtexo is used to convert the structured text file created by the exotxt code to a binary exodusII database.",
      "laborHours": 0,
      "languages": [],
      "name": "Txtexov.1.9",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Exotxt is an analysis code that reads finite element results data stored in an exodusII file and generates a file in a structured text format. The text file can be edited or modified via a number of text formatting tools. Exotxt is used by analysis to translate data from the binary exodusII format into a structured text format which can then be edited or modified and then either translated back to exodusII format or to another format.",
      "laborHours": 0,
      "languages": [],
      "name": "Finite Element Analysis Code",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The ALGEBRA program allows the user to manipulate data from a finite element analysis before it is plotted. The finite element output data is in the form of variable values (e.g., stress, strain, and velocity components) in an EXODUS II database. The ALGEBRA program evaluates user-supplied functions of the data and writes the results to an output EXODUS II database that can be read by plot programs.",
      "laborHours": 0,
      "languages": [],
      "name": "ALGEBRA v.1.27",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Exodiff compares the results data from two Exodus II files. By defult, a relative difference is used with a tolerance of 1.-6 (about 6 significant digits). The nodal locations are also compared using an absolute difference with a tolerance of 1.e-6. Time step values are compared using a relative difference with a tolerance of 1.e-6 and a floor of 1.e-15. If a third file [diffile.exo] is given, then it is overwritten with the difference of the two files.",
      "laborHours": 0,
      "languages": [],
      "name": "Exodiff v. 2.09",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "EPU recombines multiple results exodus II database files into a single exodus II database. The multiple databases are the results of parallel finite element analysis runs where each processor writes its own portion of the soluton to a single file. EPU will then put the pieces back together in the correct order. It allows subsetting of the data to reduce the size of the final database.",
      "laborHours": 0,
      "languages": [],
      "name": "EPU v.3.0.08",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PDLAMMPS is an add-on module to Sandia's LAMMPS molecular dynamics package that implements a simplified peridynamic model.",
      "laborHours": 0,
      "languages": [],
      "name": "PDLAMMPS 0.1",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lammps/lammps",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Kitten Lightweight Kernel is a simplified OS (operating system) kernel that is intended to manage a compute node's hardware resources. It provides a set of mechanisms to user-level applications for utilizing hardware resources (e.g., allocating memory, creating processes, accessing the network). Kitten is much simpler than general-purpose OS kernels, such as Linux or Windows, but includes all of the esssential functionality needed to support HPC (high-performance computing) MPI, PGAS and OpenMP applications. Kitten provides unique capabilities such as physically contiguous application memory, transparent large page support, and noise-free tick-less operation, which enable HPC applications to obtain greater efficiency and scalability than with general purpose OS kernels.",
      "laborHours": 0,
      "languages": [],
      "name": "KITTEN Lightweight Kernel 0.1 Beta",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/HobbesOSR/kitten",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "BOUT is a parallelized 3D nonlocal electromagnetic turbulence code. The principal calculations are the boundary plasma turbulence in a realistic magnetic geometry. BOUT uses fluid Braginskii equations for plasma vorticity, density, electron and ion temperature and Parallel mementum. With sources added in the core-edge region and sinks in the scrape-off-layer (SOL), BOUT follows the self-consistent profile evolution together with turbulence. BOUT also includes coupling to a magnetohyfrodynamic equlibrium (EFIT package) and a two-dimensional hydrodynamic edge transport model (UEDGE package).",
      "laborHours": 0,
      "languages": [],
      "name": "BOUndary Plasma Turbulence",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/boutproject/hermes",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2018-06-04"
      },
      "description": "ZFS is a file system written for the Solaris operating system and released under the open source CDDL license. ZFS on Linux is ZFS modified to run on Linux, utilizing the Solaris Porting Layer (SPL).",
      "laborHours": 0,
      "languages": [],
      "name": "ZFS on Linux",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/zfsonlinux/zfs/blob/master/COPYRIGHT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/zfsonlinux/zfs",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PnMPI is a tool infrastructure for parallel programs implemented using the message passing interface (MPI). It enables users to dynamically assemble multiple tools, both existing and newly developed ones, into a single tool chain and to execute them concurrently. This provides new options for scalable tools designs including (but not concurrently. This provides new options for scalable tool designs including (but not limited to) the transparent virtualization of MPI environments of an application. In addition, PnMPI allows tools to export support routines to other tools. This promotes a separation of tasks between tools which leads to enhanced tool modularity. PnMPI has been implemented for a variety of platforms including Linux and AIX clusters, and a static version of PnMPI is available on Blue Gene/L.",
      "laborHours": 0,
      "languages": [],
      "name": "PnMPI",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/pnmpi",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SLURM is an open source, fault-tolerant, and highly scalable cluster management and job scheduling system for large and small computer clusters. As a cluster resource manager, SLURM has three key functions. First, it allocates exclusive and/or non-exclusive access to resources (compute nodes) to users for some duration of time so they can perform work. Second, it provides a framework for starting, executing, and monitoring work 9normally a parallel job) on the set of allocated nodes. Finally, it arbitrates conflicting requests for resources by managing a queue of pending work.",
      "laborHours": 0,
      "languages": [],
      "name": "Simple Linux Utility for Resource Management",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/schedmd/slurm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "IDAS is a general purpose (serial and parallel) solver for differential equation (ODE) systems with senstivity analysis capabilities. It provides both forward and adjoint sensitivity analysis options.",
      "laborHours": 0,
      "languages": [],
      "name": "Stiff DAE integrator with sensitivity analysis capabilities",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/sundials/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/sundials",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "dkrakowski@anl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "EPICS is a set of software tools and applications developed initially by the Los Alamos National Laboratories for the control of large accelerators, enhanced by contributions from users worldwide and continuing development for application to other large scientific experimental equipment, such as telescopes and detectors. EPICS consists of EPICS BASE, Extensions, and other unbundled modules. EPICS BASE marks a change in the handling of the distribution of the software starting with the EPICS BASE 3.13.7 AND 3.140beta2 software.",
      "laborHours": 0,
      "languages": [],
      "name": "Experimental Physics and Industrial Control System BASE",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/epics-base/epics-base/blob/3.16/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/epics-base/epics-base",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The TOX (Tomcat Oracle & XML) web archive is a foundation for development of HTTP-based applications using Tomcat (or some other servlet container) and an Oracle RDBMS. Use of TOX requires coding primarily in PL/SQL, JavaScript, and XSLT, but also in HTML, CSS and potentially Java. Coded in Java and PL/SQL itself, TOX provides the foundation for more complex applications to be built.",
      "laborHours": 0,
      "languages": [],
      "name": "Tomcat, Oracle & XML Web Archive",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/tox",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software comprises two algorithms designed to perform a 2D layout of a graph structure in time linear with respect to the vertices and edges in the graph, whereas most other layout algorithms have a running time that is quadratic with respect to the number of vertices or greater. Although these layout algorithms run in a fraction of the time as their competitors, they provide competitive results when applied to most real-world graphs. These algorithms also have a low constant running time and small memory footprint, making them useful for small to large graphs.",
      "laborHours": 0,
      "languages": [],
      "name": "Two linear time, low overhead algorithms for graph layout",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.kitware.com/vtk/vtk",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Thread Pool Interface (TpI) provides a simple interface for running functions written in C or C++ in a thread-parallel mode. Application or library codes may need to perform operations thread-parallel on machines with multicore processors. the TPI library provides a simple mechanism for managing thread activation, deactivation, and thread-parallel execution of application-provided subprograms.",
      "laborHours": 0,
      "languages": [],
      "name": "Thread Pool Interface (TPI)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "RECONCILE is a noun phrase conference resolution system: it identifies noun phrases in a text document and determines which subsets refer to each real world entity referenced in the text. The heart of the system is a combination of supervised and unsupervised machine learning systems. It uses a machine learning algorithm (chosen from an extensive suite, including Weka) for training noun phrase coreference classifier models and implements a variety of clustering algorithms to coordinate the pairwise classifications. A number of features have been implemented, including all of the features employed in Ng & Cardie [2002].",
      "laborHours": 0,
      "languages": [],
      "name": "RECONCILE: a machine-learning coreference resolution system",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/davidbuttler/reconcile",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A power system simulation that runs on all major platforms, provides open access to all functionality, and supports extended modeling of non-traditional components of the electric power system, such as buildings, distributed resources, and markets.",
      "laborHours": 0,
      "languages": [],
      "name": "GridLab-D",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/gridlab-d/gridlab-d/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gridlab-d/gridlab-d",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The open-source PBCdlComm software is designed for data acquisition from PakBus-protocol based Campbell Data loggers by the Scientific Data Management team at Pacific Northwest National Laboratory (www.pnl.gov). This effort was funded by US Department of Energy's Atmospheric Radiation Measurement program (www.arm.gov). As an alternative for Campbell Scientific's Loggernet software, this is ideal for deploying with rugged field PCs that have limited processing resources and do not require a full-blown GUI module. The software is designed so that it can be extended to implement a new data storage mechanism, a customized post-processing module and/or integrated with web-services for sophisticated monitoring or reporting.",
      "laborHours": 0,
      "languages": [],
      "name": "PbCdlComm",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/sutanay/PbCdlComm/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sutanay/PbCdlComm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "LaunchMON is a tool infrastructure that allows a HPC tool to deploy tool daemons into the right remote nodes. It makes use of a target resource manager (RM)'s Automatic Process Acquisition Interface (APAI) to identify the remote nodes and processes of a parallel program, and also exploits the same RM's efficient MPI job launching capability on co-locating daemons with the job. To support a wide range of HPC tools that are inherently distributed software, LaunchMON provides the tool with distributed application programming interface sets: the front end (FE) API, the back end (BE) API and the middleware (MW) API. They each support a tool's front end, back end daemons and middleware communication daemons, respectively. Using those API sets, the tool can launch and initialize their remote daemons scalably.",
      "laborHours": 0,
      "languages": [],
      "name": "LaunchMON: An Infrastructue for Large Scale Tool Daemon Launching",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/launchmon",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SUPES is a collection of subprograms that perform frequently used non-numerical services for the engineering applications programmer. The three functional categories of SUPES are: (1) input command parsing, (2) dynamic memory management, and (3) system dependent utilities. The subprograms in categories one and two are written in standard FORTRAN-77, while the subprograms in category three are written provide a standarized FORTRAN interface to several system dependent features.",
      "laborHours": 0,
      "languages": [],
      "name": "SUPESv.4.1.2",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The qthread library provides a software mechanism for programs to execute a large number of run-to-completion threads at low cost. It provides the ability to perform lightweight synchronization on memory locations. Finally, modules within the library (\"futurelib\", \"qloop\", and \"qutil\") provide the optional ability to manage the number of threads created in C and C++ by providing parallel loop constructs.",
      "laborHours": 0,
      "languages": [],
      "name": "Qthreads",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/Qthreads/qthreads/blob/master/COPYING",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Qthreads/qthreads",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MAPVAR-KD is designed to transfer solution results from one finite element mesh to another. MAPVAR-KD draws heavily from the structure and coding of MERLIN II, but it employs a new finite element data base, EXODUS II, and offers enhanced speed and new capabilities not available in MERLIN II. In keeping with the MERLIN II documentation, the computational algorithms used in MAPVAR-KD are described. User instructions are presented. Example problems are included to demonstrate the operation of the code and the effects of various input options. MAPVAR-KD is a modification of MAPVAR in which the search algorithm was replaced by a kd-tree-based search for better performance on large problems.",
      "laborHours": 0,
      "languages": [],
      "name": "Finite Element Analysis Code",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "CONEX is a code for joining sequentially in time multiple exodusll database files which all represent the same base mesh topology and geometry. It is used to create a single results or restart file from multiple results or restart files which typically arise as the result of multiple restarted analyses. CONEX is used to postprocess the results from a series of finite element analyses. It can join sequentially the data from multiple results databases into a single database which makes it easier to postprocess the results data.",
      "laborHours": 0,
      "languages": [],
      "name": "Finite Element Analysis Code",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GJOIN is a two- or three-dimensional mesh combination program. GJOIN combines two or more meshes written in the GENESIS mesh database format into a single GENESIS mesh. Selected nodes in the two meshes that are closer than a specified distance can be combined. The geometry of the mesh databases can be modified by scaling, offsetting, revolving, nd mirroring. The combined meshes can be further modified by deleting, renaming, or combining material blocks, sideset identifications, or nodeset identifications.",
      "laborHours": 0,
      "languages": [],
      "name": "GJOIN",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Phalanx is a software library to provide flexible dependency management for complex nonlinear partial differential equation operators. It breaks a complex set of equations into a manageable set of fields and evaluation routines. Users can flexibly swap evaluators to change the underlying dependency graph of the fields automatically. By constructing the dependency list, sensitivities can be calculated either analytically or by using embedded automatic differentiation software.",
      "laborHours": 0,
      "languages": [],
      "name": "Phalanx V1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/phalanx/copyright.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "BECCA is a learning and control method based on the function of the human brain. The goal behind its creation is to learn to control robots in unfamiliar environments in a way that is very robust, similar to the way that an infant learns to interact with her environment by trial and error. As of this release, this software contains two simulations of BECCA controlling robots: one is a one degree-of-freedom spinner robot and the other is a 7 degree-of-freedom serial link arm with a terminal gripper. In addition, the software contains code that identifies synonyms in a untagged corpus of ASCII words. This last is a demonstration of BECCA's ability to generate abstract concepts from concrete experience. The BECCA simulation is coded so as to make it extensible to new applications. It is modular, object-oriented code in which the portions of the code that are specific to one simulation are easily separable from those portions that are the constant between implementations. BECCA makes very few assumptions about the robot and environment it is learning, and so is applicable to a wide range of learning and control problems.",
      "laborHours": 0,
      "languages": [],
      "name": "Brain-Emulating Cognition and Control Architecture (BECCA) V1.0 beta",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/microgold/Becca35",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ParFlow is a parallel, variabley saturated groundwater flow code that is especially suitable for large scale problem. ParFlow simulates the three-dimensional saturated and variably saturated subsurface flow in heterogeneous porous media in three spatial dimensions. ParFlow's developemt and appkication has been on-ging for more than 10 uear. ParFlow has recently been extended to coupled surface-subsurface flow to enabel the simulation of hillslope runoff and channel routing in a truly integrated fashion. ParFlow simulates the three-dimensional varably saturated subsurface flow in strongly heterogeneous porous media in three spatial dimension.",
      "laborHours": 0,
      "languages": [],
      "name": "Simulation of water flow in terrestrial systems",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/parflow/parflow",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SLURM is an open source, fault-tolerant, and highly scalable cluster management and job scheduling system for large and small computer clusters. As a cluster resource manager, SLURM has three key functions. First, it allocates exclusive and/or non exclusive access to resources (compute nodes) to users for some duration of time so they can perform work. Second, it provides a framework for starting, executing, and monitoring work (normally a parallel job) on the set of allciated nodes. Finally, it arbitrates conflicting requests for resouces by managing a queue of pending work.",
      "laborHours": 0,
      "languages": [],
      "name": "Simple Linux Utility for Resource Management",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/schedmd/slurm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Scalable Checkpoint/Restart (SCR) library provides an interface that codes may use to worite our and read in application-level checkpoints in a scalable fashion. In the current implementation, checkpoint files are cached in local storage (hard disk or RAM disk) on the compute nodes. This technique provides scalable aggregate bandwidth and uses storage resources that are fully dedicated to the job. This approach addresses the two common drawbacks of checkpointing a large-scale application to a shared parallel file system, namely, limited bandwidth and file system contention. In fact, on current platforms, SCR scales linearly with the number of compute nodes. It has been benchmarked as high as 720GB/s on 1094 nodes of Atlas, which is nearly two orders of magnitude faster thanthe parallel file system.",
      "laborHours": 0,
      "languages": [],
      "name": "The Scalable Checkpoint/Restart Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/scr/blob/master/LICENSE.TXT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/scr",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The PMGR_COLLECTIVE library provides an interface that MPI implemenataions may call to initialize ranks in a scalable way. It was developed to reduce the startup time MPI appkications, however, other tools such as debugger infrastructures have also found use cases for it. When first developed, it reduced the startup time from 15 minutes to 10 seconds on as 8192-node cluster.",
      "laborHours": 0,
      "languages": [],
      "name": "The Process Manager Collective Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/pmgr_collective/blob/master/LICENSE.TXT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/pmgr_collective",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A power system simulation that runs on all major platforms, provides open access to all functionality, and supports extended modeling of non-traditional components of the electric power system, such as buildings, distributed resources, and markets. GridLAB-D solution engine can determine the simultaneous state of millions of independent devices, each of which is described by multiple differential equations solved only locally for both state and time. The advantages of this algorithm over traditional finite difference-based simulators are: (1) it is much more accurate; (2) it can handle widely disparate time scales, ranging from sub-seconds to many years; and 3) it is easy to integrate with new modules and third-party systems. The advantage over traditional differential-based solvers is that it is not necessary to integrate all the device's behaviors into a single set of equations that must be solved.",
      "laborHours": 0,
      "languages": [],
      "name": "GridLab-D version 1.0",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/gridlab-d/gridlab-d/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gridlab-d/gridlab-d",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A package of classes for constructing and using distributed sparse and dense matries, vectors and graphs. Templated o the scalar and ordinal types so that any valid floating-point type, as well as any valid integer type can be used with these classes. Other non-standard types, such as 3-by-3 matrices for the scalar type and mod-based integers for ordinal can also be used.",
      "laborHours": 0,
      "languages": [],
      "name": "Tpetra Next-Generation Templated Petra V1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/tpetra/Copyright.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ex1ex2v2 is a translator program which will convert a database in exodus1 format to exodusII format. The exodus 1 format is a defined series of Fortran unformatted writes/reads; the exodusII format is defined by the ExodusII API.",
      "laborHours": 0,
      "languages": [],
      "name": "ex1ex2v2 Version 2.10",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Nem_spread reads it's input command file (default name nem_spread.inp), takes the named ExodusII geometry definition and spreads out the geometry (and optionally results) contained in that file out to a parallel disk system. The decomposition is taken from a scalar Nemesis load balance file generated by the companion utility nem_slice.",
      "laborHours": 0,
      "languages": [],
      "name": "nem_spread Ver. 5.10",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Nem_slice reads in a finite element model description of the geometry of a problem from an ExodusII file and generates either a nodal or elemental graph of the problem. It then calls Chaco to load balance the graph and then outputs a NemesisI load-balance file.",
      "laborHours": 0,
      "languages": [],
      "name": "nem_slice ver. 3.34",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "BLOT is a graphic program for post-processing finite element analyses output in the EXODUS II database format. It is command driven with free-format input and can drive graphics devices supported by the Sandia Virtual Device Interface. BLOT produces mesh plots of the analysis output variables including deformed mesh plots, line contours, filled (painted) contours, vector plots of two/three variables (velocity vectors), and symbol plots of scalar variables (discrete cracks). Features include pathlines of analysis variables drawn on the mesh, element selection by material, element birth and death, multiple views combining several displays on each plot, symmetry mirroring, and node and element numbering. X-Y plots of the analysis variables include time vs. variable plots or variable vs. variable plots, and distance vs. variable plots at selected time steps where distance is the accumulated distance between pairs of nodes or element centers. BLOT is written in as portable a form as possible. Fortran code is written in ANSI Standard FORTRAN-77. Machine-specific routines are limited in number and are grouped together to minimize the time required to adapt them to a new system. SEACAS codes have been ported to several Unix systems",
      "laborHours": 0,
      "languages": [],
      "name": "BLOT Ver. 1.65",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SVDI is the Sandia Virtual Device Interface library which is an internal library used by SEAMS codes (blot and fastq) to provide graphics to multiple device types; primarily X11R6 clients.",
      "laborHours": 0,
      "languages": [],
      "name": "SVDI Ver. 1.1",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software is a set of technologies developed by the SciDAC Institute for Ultrascale Visualization in order to address the visualization needs for petascale computing and beyond. These technologies include improved I/O performance, simulation co-processing, advanced rendering capabilities, and specialized visualization techniques developed for SciDAC applications.",
      "laborHours": 0,
      "languages": [],
      "name": "Ultrascale visualization capabilities for the ParaView/VTK framework",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Kitware/ParaView",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Simple parallel MD code that serves as a microapplication in the Mantevo suite. Study of computer system design and implementation, benchmarking of new and existing computer systems.",
      "laborHours": 0,
      "languages": [],
      "name": "miniMD v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Mantevo/miniMD",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GROPE is a program that examines the input to a finite element analysis (which is in the GENESIS database format) or the output from an analysis (in the EXODUS database format). GROPE allows the user to examine any value in the database. The display can be directed to the user's terminal or to a print file.",
      "laborHours": 0,
      "languages": [],
      "name": "Grope Ver. 1.38",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Pamgen creates, in parallel, hexahedral or quadrilateral (in 2D) finite element meshes of cubes, cylinders, and portions of cylinders. For some analysis applications it can obviate the normally serial analysis preparation steps of mesh generation and decomposition. Bypassing these serial steps allows construction of large element count (over a billion) meshes. When linked to an application as a library, it allows each process of a parallel simulation to generate its own finite element domain representation at execution time. As a stand-alone application it can produce the representation of the mesh for processor n of k possible processors. The Pamgen library and application are serial as the mesh generation proceeds without reliance on inter-processor communication.",
      "laborHours": 0,
      "languages": [],
      "name": "Pamgen",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "dkrakowski@anl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The TAO project focuses on the development of software for large scale optimization problems. TAO uses an object-oriented design to create a flexible toolkit with strong emphasis on the reuse of external tools where appropriate. Our design enables bi-directional connection to lower level linear algebra support (for example, parallel sparse matrix data structures) as well as higher level application frameworks. The Toolkist for Advanced Optimization (TAO) is aimed at teh solution of large-scale optimization problems on high-performance architectures. Our main goals are portability, performance, scalable parallelism, and an interface independent of the architecture. TAO is suitable for both single-processor and massively-parallel architectures. The current version of TAO has algorithms for unconstrained and bound-constrained optimization.",
      "laborHours": 0,
      "languages": [],
      "name": "TOOLKIT FOR ADVANCED OPTIMIZATION",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/petsc/petsc",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Libra is a tool for scalable analysis of load balance data from all processes in a parallel application. Libra contains an instrumentation module that collects model data from parallel applications and a parallel compression mechanism that uses distributed wavelet transforms to gather load balance model data in a scalable fashion. Data is output to files, and these files can be viewed in a GUI tool by Libra users. The GUI tool associates particular load balance data with regions for code, emabling users to view the load balance properties of distributed \"slices\" of their application code.",
      "laborHours": 0,
      "languages": [],
      "name": "Libra: Scalable Load Balance Analysis",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/tgamblin/libra/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/tgamblin/libra",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The code to be released is a new addition to the LAMMPS molecular dynamics code. LAMMPS is developed and maintained by Sandia, is publicly available, and is used widely by both natioanl laboratories and academics. The new addition to be released enables LAMMPS to perform molecular dynamics simulations of shock waves using the Multi-scale Shock Simulation Technique (MSST) which we have developed and has been previously published. This technique enables molecular dynamics simulations of shock waves in materials for orders of magnitude longer timescales than the direct, commonly employed approach.",
      "laborHours": 0,
      "languages": [],
      "name": "Multi-scale Shock Technique",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lammps/lammps",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A Trilinos package for applying stochastic Galerkin uncertainty quantification methods to large-scale C++ application codes, primarily stochastic partial differential equations. Stokhos is intended for use in estimating uncertainties for general scientific computations and is based on published algorithms. It provides no capability for implementing those computations itself. Estimating uncertainties and errors from solution algorithms or simulations, primarily simulations of partial differential equations, arising from uncertainties or errors in solution algorithm or simulation input data, including statistical moments, probabilities, and coefficients of variation.",
      "laborHours": 0,
      "languages": [],
      "name": "Stokhos v 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The SST provides a parallel framework to perform system simulation of computer architectures to determine their performance and power consumption. Additionally, the SST contains basic models of a computer processor, and interconnect and can connect to an external memory simulator (DRAMSim II). The SST framework provides a simple interface by which other computer simulation models can be combined under a common parallel discrete event-based simulation environment. This allows design exploration of future architectures, analysis of how current computer programs will function on future architectures. The SST provides a parallel discrete event simulation framework, including partitioning and object distribution over MPI. It also provides a mechanism by which components can report their power consumption for analysis.",
      "laborHours": 0,
      "languages": [],
      "name": "Structural Simluation Toolkit (SST) V 2.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sstsimulator/sst-core",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Poblano is a Matlab toolbox of large-scale algorithms for nonlinear optimization. The algorithms in Poblano require only first-order derivative information (e.g., gradients for scalar-valued objective functions), and therefore can scale to very large problems [6].Poblano is a set of general purpose methods for solving unconstrained nonlinear optimization methods. It has been applied to standard test problems covering a range of application areas. The driving application for Poblano development has been tensor decompositions in data analysis applications (bibliometric analysis, social network analysis, chemometrics, etc.) [1].",
      "laborHours": 0,
      "languages": [],
      "name": "Poblano v 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/andrewssobral/poblano_toolbox/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/andrewssobral/poblano_toolbox",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A package for computing and applying algebraic preconditioners in the context of preconditioned iterative methods. It is related to the existing Ifpack package in Trilinos but provides support for template scalar and ordinal types and explicitly relies on Tpetra and Kokkos instead of Epetra. Algebraic preconditioners are used by iterative solvers as solution method in engineering and scientific applications, including nonlinear equation solving, time integration, sensitivity analysis, stability analysis, optimization, and uncertainty quantification.",
      "laborHours": 0,
      "languages": [],
      "name": "Tifpack v 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Climate Data Analysis Tools (CDAT) is a software infrastructure that uses an object-oriented scripting language to link together separate software subsystems and packages thus forming an integrated environment for solving model diagnosis problems, The power of the system comes from Python and its ability to seamlissly interconnect software. Python provides a general purpose and full-featured scripting language with a variety of user interfaces including command-line interaction, stand-alone scripts (applications) and fraphical user interfaces (GUI). The CDAT subsystems, implemented as modules, provide access to and management of gridded data (Climate Data Management Systems or CDMS); large-array numerical operations (Numerical Python); and visualization (Visualization and Control System or VCS).",
      "laborHours": 0,
      "languages": [],
      "name": "Climate Data Analysis Tools",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/UV-CDAT/uvcdat/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/UV-CDAT/uvcdat",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PyUtilib is a collection of Python utilities that are used by Python packages developed at Sandia National Laboratories, including the Coopr and FAST Python packages. PyUtilib includes facilities for managing factories, subprocess management, interfacing with Excel, and applying numerical techniques.",
      "laborHours": 0,
      "languages": [],
      "name": "PyUtilib: A Pythos Utility Library v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PyUtilib/pyutilib/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SNL Coopr Forum is a set of Python routines that provide extensions to the Coopr optimization software. This software augments the open-source Coopr project to provide a more comprehensive capability for formulating and solving optimization applications.Optimization is a common analysis tool used in engineering design and scientific discovery. The SNL Coopr Forum software augments the Coopr Forum open source project to provide extensions of the Coopr optimization framework. Specifically, Coopr Forum provides plugin tools that allow Coopr to apply different optimization solvers, manage optimization solvers in a distributed manner, and to process input and output files. Thus, Coopr Forum is comprised of a variety of distinct software components, each of which provides a different capability that can be used within Coopr.",
      "laborHours": 0,
      "languages": [],
      "name": "Coopr Forum v 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Pyomo/pyomo",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Implements previously developed methodology to calculate total disutility to an organization caused by impacts imposed upon the physical system in question (electric power transmission system, water system, etc).Critical infrastructure utility personnel will use this as a planning tool to determine where system weaknesses are and where improvements should be made such that the consequence of some impact is no longer higher than acceptable.",
      "laborHours": 0,
      "languages": [],
      "name": "Critical Infrastructure Consequence Modeler v 0.5.0 Beta",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ccss-sandia/cicm",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ccss-sandia/cicm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "diod is an I/O forwarding daemon used to improve scalability of file systems on large Linux clusters.",
      "laborHours": 0,
      "languages": [],
      "name": "diod - distributed I/O daemon",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chaos/diod",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The SIERRA Toolkit is a collection of libraries to facilitate the development of parallel engineering analysis applications. These libraries supply basic core services that an engineering analysis application may need such as a parallel distributed and dynamic mesh database (for unstructured meshes), mechanics algorithm support (parallel infrastructure only), interfaces to parallel solvers, parallel mesh and data I/O, and various utilities (timers, diagnostic tools, etc.).The toolkit is intended to reduce the effort required to develop an engineering analysis application by removing the need to develop core capabilities that most every application would require.",
      "laborHours": 0,
      "languages": [],
      "name": "SIERRA Toolkit v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/stk/COPYRIGHT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The DAKOTA (Design Analysis Kit for Optimization and Terascale Applications) toolkit provides a flexible and extensible interface between simulation codes (computational models) and iterative analysis methods. By employing object-oriented design to implement abstractions of the key components required for iterative systems analyses, the DAKOTA toolkit provides a flexible and extensible problem-solving environment for design and analysis of computational models on high performance computers.A user provides a set of DAKOTA commands in an input file and launches DAKOTA. DAKOTA invokes instances of the computational models, collects their results, and performs systems analyses. DAKOTA contains algorithms for optimization with gradient and nongradient-based methods; uncertainty quantification with sampling, reliability, polynomial chaos, stochastic collocation, and epistemic methods; parameter estimation with nonlinear least squares methods; and sensitivity/variance analysis with design of experiments and parameter study methods. These capabilities may be used on their own or as components within advanced strategies such as hybrid optimization, surrogate-based optimization, mixed integer nonlinear programming, or optimization under uncertainty. Services for parallel computing, simulation interfacing, approximation modeling, fault tolerance, restart, and graphics are also included.",
      "laborHours": 0,
      "languages": [],
      "name": "DAKOTA Design Analysis Kit for Optimization and Terascale",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pemryan/DAKOTA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ForTrilinos stands for interfaces to Trilinos. It effectively replaces common practices for interfacing Fortran codes with Trilinos C++ packages. Common practices include writing user-specific drivers and exploiting the name-mangling schemes of specific compilers. ForTrilinos improves portability and robustness by exploiting the C interoperability constructs of Fortran 2003. These constructs facilitate binding Fortran interface bodies to their equivalent C function prototypes, providing for name resolution independent of the compiler™s underlying mangling scheme and guaranteeing compatible type bit representations. Furthermore, ForTrilinos maintains the overall design philosophy and architecture of Trilinos by creating a derived type structure in Fortran similar to the class hierarchy in the underlying C++.ForTrilinos can be applied wherever the underlying Trilinos packages can be applied.",
      "laborHours": 0,
      "languages": [],
      "name": "ForTrilinos v 10.1",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The BOUT++ is a C++ framework for developing plasma fluid simulation codes, and has been developed by the University of York/UK and the LLNL Fusion Energy Program from the original 3D boundary turbulence 2-fluid edge simulation code BOUT. The aim of BOUT++ is to automate the common tasks needed for simulation codes, and to separate the complicated details such as differential geometry, parallel communication, and file input/output from the user-specified equations to be solved. The BOUT++ consists of BOUT++ library and physics modules. BOUT++ modules contains the coding for the specific set of physics equations and boundary conditions for particular physics problems using defined functions in BOUT++ library to perform standard differential operators.",
      "laborHours": 0,
      "languages": [],
      "name": "BOUT++",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/boutproject/BOUT-2.0",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GlobiPack contains a small collection of optimization globalization algorithms. These algorithms are used by optimization and various nonlinear equation solver algorithms.Used as the line-search procedure with Newton and Quasi-Newton optimization and nonlinear equation solver methods. These are standard published 1-D line search algorithms such as are described in the book Nocedal and Wright Numerical Optimization: 2nd edition, 2006. One set of algorithms were copied and refactored from the existing open-source Trilinos package MOOCHO where the linear search code is used to globalize SQP methods. This software is generic to any mathematical optimization problem where smooth derivatives exist. There is no specific connection or mention whatsoever to any specific application, period. You cannot find more general mathematical software.",
      "laborHours": 0,
      "languages": [],
      "name": "GlobiPack v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/globipack/copyright_header.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Used to solve basic unconstrained optimization problems that can produce smooth accurate gradients. These are standard published unconstrained optimization such as are described in the book Nocedal and Wright Numerical Optimization: 2nd edition, 2006. This software is generic to any mathematical optimization problem where smooth derivatives exist. There is no specific connection or mention whatsoever to any specific application, period. You cannot find more general mathematical software.OptiPack contains some simple optimization algorithms built on Thyra. Currently, only a few different nonlinear conjugate gradient methods are implemented.",
      "laborHours": 0,
      "languages": [],
      "name": "Optipack",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/optipack/copyright_header.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "CTrilinos provides a C language interface to a subset of Trilinos. The interface hides the object-oriented nature of Trilinos by allowing these objects to be acted upon using a set of three integers that uniquely identify the object. No pointers to the underlying objects are made available for direct manipulation, protecting against segmentation faults. CTrilinos serves as a base layer over which the ForTrilinos linking layer operates, facilitating the use Trilinos from object-oriented Fortran.CTrilinos can be applied wherever the supported underlying Trilinos packages can be applied.",
      "laborHours": 0,
      "languages": [],
      "name": "CTrilinos v 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/CTrilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Geryon is intended to be a simple library for managing the CUDA Runtime, CUDA Driver, and OpenCL APIs with a consistent interface archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Change from one API to another by simply changing the namespace archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Use multiple APIs in the same code archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Lightweight (only include files no build required) archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Manage device query and selection archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Simple vector and matrix containers archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Simple routines for data copy and type casting archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Simple routines for data I/O archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Simple classes for managing device timing archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Simple classes for managing kernel compilation and execution The primary application is to facilitate writing a single code that can be compiled using the CUDA Runtime API, the CUDA Driver API, or OpenCL.",
      "laborHours": 0,
      "languages": [],
      "name": "geryon v. 0.1",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/scicomp/geryon/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/scicomp/geryon",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SNL cxxtest is a set of Python routines that support software testing for C++ codes. This software augments the open-source cxxtest project to provide a more comprehensive capability for software testing.",
      "laborHours": 0,
      "languages": [],
      "name": "SNL cxxtest v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/CxxTest/cxxtest",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Memory size has long limited large-scale applications on high-performance computing (HPC) systems. Increasing core counts per chip and power density constraints, which limit the number of DIMMs per node, have exacerbated this problem. Mechanisms to manage memory usage - preferably transparently - more efficiently could increase effective DRAM capacity and, thus, the benefit of multicore similarity. These data regions occupy multiple physical locations within a multicore node and thus offer a potential savings in memory capacity. These data, primarily residing in heap, are quite dynamic, which makes them difficult to manage statically. SBLLmalloc is a memory allocation library that automatically identifies the replicated memory blocks and merges them into a single copy. SBLLmalloc does not require application or OS changes since we implement it as a user-level library that can be linked at runtime. SBLLmalloc provides the capability to run larger problems using the same hardware configuration in multicore nodes. SBLLmalloc has been implemented for Linux clusters.",
      "laborHours": 0,
      "languages": [],
      "name": "SBLLmalloc V1.0",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/SBLLmalloc",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Muster is a framework for scalable cluster analysis. It includes implementations of classic K-Medoids partitioning algorithms, as well as infrastructure for making these algorithms run scalably on very large systems. In particular, Muster contains algorithms such as CAPEK (described in reference 1) that are capable of clustering highly distributed data sets in-place on a hundred thousand or more processes.",
      "laborHours": 0,
      "languages": [],
      "name": "Muster: Massively Scalable Clustering",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/muster/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/muster",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SAMRAI is an object-oriented support library for structured adaptice mesh refinement (SAMR) simulation of computational science problems, modeled by systems of partial differential equations (PDEs). SAMRAI is developed and maintained in the Center for Applied Scientific Computing (CASC) under ASCI ITS and PSE support. SAMRAI is used in a variety of application research efforts at LLNL and in academia. These applications are developed in collaboration with SAMRAI development team members.",
      "laborHours": 0,
      "languages": [],
      "name": "Structured Adaptive Mesh Refinement Application Infrastructure",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/SAMRAI",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2018-02-22"
      },
      "description": "MFEM is a general, modular library for finite element methods. It provides a variety of finite element spaces and bilinear/linear forms in 2D and 3D. MFEM also includes classes for dealing with various types of meshes and their refinement.  For more information, see the project website: http://mfem.org/.",
      "laborHours": 0,
      "languages": [],
      "name": "MFEM: Modular Finite Element Methods Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/mfem/mfem",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2018-02-22"
      },
      "description": "GLVis is an OpenGL tool for visualization of finite element meshes and functions. When started without any options, GLVis starts a server, which waits for a socket connections and visualizes any recieved data. This way the results of simulations on a remote (parallel) machine can be visualized on the lical user desktop. GLVis can also be used to visualize a mesh with or without a finite element function (solution). It can run a batch sequence of commands (GLVis scripts), or display previously saved socket streams.  For more information, see the project website: http://glvis.org/.",
      "laborHours": 0,
      "languages": [],
      "name": "GLVis: OpenGL Finite Element Visualization Tool",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/glvis/glvis",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Teko is a C++ library for implementation of blocked and segregated preconditioners in the context of iterative solvers for linear systems. Capabilities for decomposing larger matrices into user defined sub blocks are also provided. Additional functionality for creating approximate inverse operators utilizing solver and preconditioning packages in the Trilinos framework has also been implemented. Teko's primary application is in multiphysics simulation environment where a decomposition of the linear system in to physically meaningful blocks can be utilized to enhance performance of an iterative solver. However, applicability may extend to other problem domains where matrices can be decomposed into meaningful blocks.",
      "laborHours": 0,
      "languages": [],
      "name": "Teko v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Conjoin is a code for joining sequentially in time multiple exodusII database files. It is used to create a single results or restart file from multiple results or restart files which typically arise as the result of multiple restarted analyses. The resulting output file will be the union of the input files with a status variable indicating the status of each element at the various time planes.Combining multiple exodusII files arising from a restarted analysis or combining multiple exodusII files arising from a finite element analysis with dynamic topology changes.",
      "laborHours": 0,
      "languages": [],
      "name": "Conjoin",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ejoin is a three-dimensional mesh combination program. ejoin combines two or more meshes written in the exodusII mesh database format into a single exodusII mesh. Selected nodes in the wo meshes that are closer than a specified distance can be combined The geometry of the mesh databases an be modified by offsetting. Any results data on one or more of the input mesh files will be copied to the appropriate nodes/elements/nodesets/sidesets on the output file.Preparation of input mesh files for finite element analysis programs using the exodusII format.",
      "laborHours": 0,
      "languages": [],
      "name": "Ejoin",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This application can determine the performance and chemical behavior of batteries in 1D when they are cycled. With CanTrilBat, we are developing predictive phenomenological models for battery systems to predict operating performance and rate limiting steps in the performance of battery models. Particular attention is paid to primary and secondary chemistry mechanisms, such as the thermal runaway mechanisms experienced in secondary lithium ion batteries or self-discharge reaction mechanism that all batteries experience to one extent or another. The first application of this model has been for modeling the performance of thermal batteries. However, an implementation for secondary ion batteries is next. CanTrilBat applications solves transient problems involving batteries. It is a 1-D application that represents 3-D physical systems that can be reduced using the porous flow approximation for the anode, cathode, and separator. A control volume formulation is used to track conserved quantities. An operator-split approach is used to calculate the chemistry, diffusion and electronic transport that occurs within cathode and anode particles, allowing for the reduction in code complexity.",
      "laborHours": 0,
      "languages": [],
      "name": "CanTrilBat",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Cantera/cantera",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This program can be used to read a LC-MS/MS data file from either a Finnigan ion trap mass spectrometer (.Raw file) or an Agilent Ion Trap mass spectrometer (.MGF and .CDF files) and create a selected ion chromatogram (SIC) for each of the parent ion masses chosen for fragmentation. The largest peak in each SIC is also identified, with reported statistics including peak elution time, height, area, and signal to noise ratio. It creates several output files, including a base peak intensity (BPI) chromatogram for the survey scan, a BPI for the fragmentation scans, an XML file containing the SIC data for each parent ion, and a \"flat file\" (ready for import into a database) containing summaries of the SIC data statistics.",
      "laborHours": 0,
      "languages": [],
      "name": "MS/MS Automated Selected Ion Chromatograms",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/MASIC",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Pagoda is a set of parallel tools as well as an application programmer interface for parallel data analysis of high-resolution climate data. Pagoda implements data parallel versions of some of the commonly used tools from the NetCDF Operators. These tools support data processing operations including subsetting, record and ensemble averages, binary operations, and interpolation. Pagoda also provides an application programmer interface for developing custom data analysis programs.",
      "laborHours": 0,
      "languages": [],
      "name": "Pagoda",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/jeffdaily/pagoda/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jeffdaily/pagoda",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "nodediag is an extensible framework for packaging system diagnostics for Linux clusters.",
      "laborHours": 0,
      "languages": [],
      "name": "nodediag",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chaos/nodediag",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MixDown is a meta-build tool that orchestrates and manages the building of multiple 3rd party libraries. It can manage the downloading, uncompressing, unpacking, patching, configuration, build, and installation of 3rd party libraries using a variety of configuration and build tools. As a meta-build tool, it relies on 3rd party tools such as GNU Autotools, make, Cmake, scons, etc. to actually confugure and build libraries. MixDown includes an extensive database of settings to be used for general machines and specific leadership class computing resources.",
      "laborHours": 0,
      "languages": [],
      "name": "MixDown",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/tepperly/MixDown",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "lustre-tools-llnl is a small set of commands that are helpful for using and administering a lustre file system.",
      "laborHours": 0,
      "languages": [],
      "name": "lustre-tools-llnl",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chaos/lustre-tools-llnl",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This program is used to compute the predicted normalized elution time (NET) for a list of peptide sequences. It includes the Kangas/Petritis neural network trained model, the Krokhin hydrophobicity model, and the Mant hydrophobicity model. In addition, it can compute the predicted strong cation exchange (SCX) fraction (on a 0 to 1 scale) in which a given peptide will appear.",
      "laborHours": 0,
      "languages": [],
      "name": "Normalized Elution Time Prediction Utility",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Protein-Digestion-Simulator/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "OVIS is a tool for intelligent, real-time monitoring of computational clusters. While current monitoring tools treat the cluster as singleton nodes, OVIS considers the cluster as comprised of comparative ensembles. OVIS provides a visual display of deterministic information about state variables and their aggregate statistics. Comparison to statistical quantities can be used for the automatic identification of abnormalities. OVIS collects and processes active data. OVIS can also process historical data files or database files.",
      "laborHours": 0,
      "languages": [],
      "name": "OVIS",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ovis-hpc/ovis",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Albany code is a general purpose finite element code for solving partial differential equations (PDEs). Albany is a research code that demonstrates how a PDE code can be built by interfacing many of the open-source software libraries that are released under Sandia's Trilinos project. Part of the mission of Albany is to be a testbed for new Trilinos libraries, to refine their methods, usability, and interfaces. Albany also serves as a demonstration code on how to build an application code against an installed Trilinos project. Because of this, Albany is a desirable starting point for new code development efforts that wish to make heavy use of Trilinos. The physics solved in Albany are currently only very academic problems, such as heat transfer, linear elasticity, and nonlinear elasticity. Albany includes hooks to optimization and uncertainty quantification algorithms, including those in the Dakota toolkit.",
      "laborHours": 0,
      "languages": [],
      "name": "Albany v 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gahansen/Albany",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PECOS is a computational library for creating and manipulating realizations of stochastic quantities, including scalar uncertain variables, random fields, and stochastic processes. It offers a unified interface to univariate and multivariate polynomial approximations using either orthogonal or interpolation polynomials; numerical integration drivers for Latin hypercube sampling, quadrature, cubature, and sparse grids; and fast Fourier transforms using third party libraries. The PECOS core also offers statistical utilities and transformations between various representations of stochastic uncertainty. PECOS provides a C++ API through which users can generate and transform realizations of stochastic quantities. It is currently used by Sandia's DAKOTA, Stokhos, and Encore software packages for uncertainty quantification and verification. PECOS generates random sample sets and multi-dimensional integration grids, typically used in forward propagation of scalar uncertainty in computational models (uncertainty quantification (UQ)). PECOS also generates samples of random fields (RFs) and stochastic processes (SPs) from a set of user-defined power spectral densities (PSDs). The RF/SP may be either Gaussian or non-Gaussian and either stationary or nonstationary, and the resulting sample is intended for run-time query by parallel finite element simulation codes. Finally, PECOS supports nonlinear transformations of random variables via the Nataf transformation and extensions.",
      "laborHours": 0,
      "languages": [],
      "name": "Parallel Environment for the Creation of Stochastics 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pemryan/DAKOTA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "HiPerSBTK consists of software which integrates equation solving, optimization and graphical interface functions to perform large-scale systems biology modeling.",
      "laborHours": 0,
      "languages": [],
      "name": "HiPerSBTK",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.vtk.org/licensing/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.kitware.com/vtk/vtk/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Amesos2 is a templated direct sparse solver package. Amesos2 provides interfaces to direct sparse solvers, rather than providing native solver capabilities. Amesos2 is a derivative work of the Trilinos package Amesos.",
      "laborHours": 0,
      "languages": [],
      "name": "Amesos2 Templated Direct Sparse Solver Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Image Composition Engine for Tiles (lceT) is a high-performance sort-last parallel rendering library. It is designed to be used in parallel applications requiring rendering. The primary purpose of IceT is to be integrated into parallel visualization applications such as ParaView to provide parallel rendering capabilities. The Image Composition Engine for Tiles (lceT) is a high-performance sort-last parallel rendering library. IceT uses a \"sort-Iasf' approach to rendering. Each process in a parallel application independently renders a local piece of geometry. The resulting images are given to IceT, and IceT combines the images together to form a single cohesive image. Ice T is also capable of driving tiled displays, largeformat displays comprising an array of smaller displays. To this end IceT can collect the smaller tile images and organize them such that the entire tiled display can be driven. Ice T takes advantage of spatial coherence in geometry by identifying empty regions of the display and reducing the overall required work.",
      "laborHours": 0,
      "languages": [],
      "name": "Image Composition Engine for Tiles",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/kmorel/IceT",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "LibVMI is an introspection library focused on reading and writing memory from virtual machines (VMs). For convenience, LibVMI also provides functions for accessing CPU registers, pausing and unpausing a VM, printing binary data, and more. LibVMI is designed to work across multiple virtualization platforms. LibVMI currently supports VMs running in either Xen or KVM. LibVMI also supports reading physical memory snapshots when saved as a file.",
      "laborHours": 0,
      "languages": [],
      "name": "LibVMI",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/libvmi/libvmi",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "miniXyce uses a modified nodal analysis to approximate the governing differential algebraic equations (DAEs) for electronic devices and their coupling via a network and Kirchoff's conservation laws. The resulting nonlinear problem is solved iteratively using a fully coupled Newton method,which in turn results in a linear system that is solved using an iterative method.",
      "laborHours": 0,
      "languages": [],
      "name": "miniXyce",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Mantevo/miniXyce",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Peridigm is a multiphysics simulation code for peridynamic models. It provides the capability to simulate nonlocal models of solids undergoing large deformations and failure. It provides basic linear elastic and perfectly plastic peridynamic material models, and well as the capability to apply simply initial, boundary and loading conditions.",
      "laborHours": 0,
      "languages": [],
      "name": "Peridigm",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/peridigm/peridigm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "TriUtils is a package of utilities for other Trilinos packages. TriUtils contains utilities to perform common operations such as command line parsing, and input file reading.",
      "laborHours": 0,
      "languages": [],
      "name": "TriUtils Trilinos Utilities Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Trilinos I/O support (Trios) software provides general I/O support for applications using Trilinos libraries. In particular, this software will include parallel I/O support to read and write selected Trilinos data structures to commonly-used file formats such as netCDF, hdf5, and Exodus.",
      "laborHours": 0,
      "languages": [],
      "name": "Trios",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Epetra provides the fundamental construction routines and service functions that are required for serial and paraliellinear algebra libraries using double precision scalar values and int ordinal values.",
      "laborHours": 0,
      "languages": [],
      "name": "Epetra Linear Algebra Services Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "EpetraExt is a set of extensions to Epetra. To allow Epetra to remain focused on its primary functionality as a Linear Algebra object support, EpetraExt was created to maintain additional support for such capabilities as transformations (permutations, subblock views, etc.), coloring support, partitioning (Zoltan), and I/O.",
      "laborHours": 0,
      "languages": [],
      "name": "EpetraExt (Epetra Extended) - Linear Algebra Services",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Panzer is a finite element assembly engine used for research on solving partial differential equations (PDEs). Panzer takes a physics model implemented by a user and creates and populates the linear algrbra objects, such as residuals and Jacobians, for use in implicit finite element methods. Panzer can be considered \"glue code\" that pulls together the capabilities of a number of open-source Trilinos packages (Epetra, Intrepid, Sacado, FEI, and Phalanx). This code provides a generic framework for describing a set of partial differential equations. Panzer provides a simple example driver that solves the undergraduate textbook partial differential equation of heat transfer in a solid (see for example, \"Transport Phenomena\" by Bird Stewart, and Lightfoot 1960). Panzer is intended as a tool to simplify the use of the discretization tools in Trilinos (Intrepid and Phalanx) and is meant to aid in fundamental research on discretizations. Panzer will be released open-source as a package in Trilinos under a BSD license.",
      "laborHours": 0,
      "languages": [],
      "name": "Panzer",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/panzer/Copyright.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SEACAS Trilinos is the packaging of the SEACAS applications inside the Trilinos software package in a manner such that the Trilinos build and configurationprocess can be used to build and configure the SEACAS applications.",
      "laborHours": 0,
      "languages": [],
      "name": "SEACAS Trilinos",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/seacas/Jamfile",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "IRIS is a search tool plug-in that is used to implement latent topic feedback for enhancing text navigation. It accepts a list of returned documents from an information retrieval wywtem that is generated from keyword search queries. Data is pulled directly from a topic information database and processed by IRIS to determine the most prominent and relevant topics, along with topic-ngrams, associated with the list of returned documents. User selected topics are then used to expand the query and presumabley refine the search results.",
      "laborHours": 0,
      "languages": [],
      "name": "Search tool plug-in: imploements latent topic feedback",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/iris",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "SmartImport.py is a Python source-code file that implements a replacement for the standard Python module importer. The code is derived from knee.py, a file in the standard Python diestribution , and adds functionality to improve the performance of Python module imports in massively parallel contexts.",
      "laborHours": 0,
      "languages": [],
      "name": "Python import replacement",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/langton/MPI_Import",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/langton/mpi_import",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "dkrakowski@anl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MeshKit is an open-source library of mesh generation functionality. MeshKit has general mesh manipulation and generation functions such as Copoy, Move, Rotate and Extrude mesh. In addition, new quad mesh and embedded boundary Cartesian mesh algorithm (EB Mesh) are included. Interfaces to several public domain meshing algorithms (TetGen, netgen, triangle, Gmsh, camal) are also offered. This library interacts with mesh data mostly through iMesh including accessing the mesh in parallel. It also can interact with iGeom interface to provide geometry functionality such as importing solid model based geometries. iGeom and IMesh are implemented in the CGM and MOAB packages, respectively. For some non-existing function in iMesh such as tree-construction and ray-tracing, MeshKit also interacts with MOAB functions directly.",
      "laborHours": 0,
      "languages": [],
      "name": "MeshKit",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/fathomteam/meshkit",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ]
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Service-Poke is a system which manages running services ensuring only one copy is running and potentially up to one more copy is marked for future execution.",
      "laborHours": 0,
      "languages": [],
      "name": "Service-Poke",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/EMSL-MSC/service-poke",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Co-PylotDB, written completely in Python, provides a user interface (UI) with which to select user and data file(s), directories, and file content, and provide or capture various other information for sending data collected from running any computer program to a pre-formatted database table for persistent storage. The interface allows the user to select input, output, make, source, executable, and qsub files. It also provides fields for specifying the machine name on which the software was run, capturing compile and execution lines, and listing relevant user comments. Data automatically captured by Co-PylotDB and sent to the database are user, current directory, local hostname, current date, and time of send. The UI provides fields for logging into a local or remote database server, specifying a database and a table, and sending the information to the selected database table. If a server is not available, the UI provides for saving the command that would have saved the information to a database table for either later submission or for sending via email to a collaborator who has access to the desired database.",
      "laborHours": 0,
      "languages": [],
      "name": "Co-PylotDB - A Python-Based Single-Window User Interface for Transmitting Information to a Database",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dwbarne/PYLOTDB",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "EXOMATLAB extracts the global transient variable data from an exodus file and writes it to a text-based file readable by the Matlab program.",
      "laborHours": 0,
      "languages": [],
      "name": "exomatlab",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Domain Name System Security Extensions (DNSSEC) add authentication to the DNS. However, analyzing and troubleshooting a DNSSEC deployment is difficult in part because of the protocol complexity and in part because authentication involves retrieving dependent components from a number of different Internet locations. DNSViz was written to bring all these DNSSEC components together into a single graph, so they can be represented visually, and nuances can be highlighted for easy identification. DNSViz includes functionality for both analyzing a domain name using active probing and visual representation of the domain name, available currently through a Web interface.",
      "laborHours": 0,
      "languages": [],
      "name": "DNSViz",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dnsviz/dnsviz",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "eCo-PylotDB, written completely in Python, provides a script that parses incoming emails and prepares extracted data for submission to a database table. The script extracts the database server, the database table, the server password, and the server username all from the email address to which the email is sent. The database table is specified on the Subject line. Any text in the body of the email is extracted as user comments for the database table. Attached files are extracted as data files with each file submitted to a specified table field but in separate rows of the targeted database table. Other information such as sender, date, time, and machine from which the email was sent is extracted and submitted to the database table as well. An email is sent back to the user specifying whether the data from the initial email was accepted or rejected by the database server. If rejected, the return email includes details as to why.",
      "laborHours": 0,
      "languages": [],
      "name": "eCo-Pylot - A Python-Based Script for Sending Parsed Email Data to a Database",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dwbarne/PYLOTDB.git",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GEN3D is a three-dimensional mesh generation program. The three-dimensional mesh is generated by mapping a two-dimensional mesh into threedimensions according to one of four types of transformations: translating, rotating, mapping onto a spherical surface, and mapping onto a cylindrical surface. The generated three-dimensional mesh can then be reoriented by offsetting, reflecting about an axis, and revolving about an axis. GEN3D can be used to mesh geometries that are axisymmetric or planar, but, due to three-dimensional loading or boundary conditions, require a three-dimensional finite element mesh and analysis. More importantly, it can be used to mesh complex three-dimensional geometries composed of several sections when the sections can be defined in terms of transformations of two dimensional geometries. The code GJOIN is then used to join the separate sections into a single body. GEN3D reads and writes twodimensional and threedimensional mesh databases in the GENESIS database format; therefore, it is compatible with the preprocessing, postprocessing, and analysis codes used by the Engineering Analysis Department at Sandia National Laboratories, Albuquerque, NM.",
      "laborHours": 0,
      "languages": [],
      "name": "GEN3D Ver. 1.37",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GENSHELL is a three-dimensional shell mesh generation program. The threedimensional shell mesh is generated by mapping a two-dimensional quadrilateral mesh into three dimensions according to one of several types of transformations: translation, mapping onto a spherical, ellipsoidal, or cylindrical surface, and mapping onto a user-defined spline surface. The generated three-dimensional mesh can then be reoriented by offsetting, reflecting about an axis, revolving about an axis, and scaling the coordinates. GENSHELL can be used to mesh complex three-dimensional geometries composed of several sections when the sections can be defined in terms of transformations of two-dimensional geometries. The code GJOIN is then used to join the separate sections into a single body. GENSHELL updates the EXODUS quality assurance and information records to help track the codes and files used to generate the mesh. GENSHELL reads and writes two-dimensional and three-dimensional mesh databases in the GENESIS database format; there, it is compatible with the preprocessing, postprocessing,and analysis codes in the Sandia National Laboratories EngineeEngineering Analysis Code Access System (SEACAS).",
      "laborHours": 0,
      "languages": [],
      "name": "genshell",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GREPOS is a mesh utility program that repositions or modifies the configuration of a two- dimensional or three-dimensional mesh. GREPOS can be used to change the orientation and size of a two- dimensional or three-dimensional mesh; change the material block, nodeset, and sideset IDs; or \"explode\" the mesh to facilitate viewing of the various parts of the model, and several other mesh modification utilities.",
      "laborHours": 0,
      "languages": [],
      "name": "GREPOS",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "KLU2 is a direct sparse solver for solving unsymmetric linear systems. It is related to the existing KLU solver, (in Amesos package and also as a stand-alone package from University of Florida) but provides template support for scalar and ordinal types. It uses a left looking LU factorization method.",
      "laborHours": 0,
      "languages": [],
      "name": "KLU2 Direct Linear Solver Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://trilinos.org/download/license/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PylotDB, written completely in Python, provides a user interface (UI) with which to interact with, analyze, graph data from, and manage open source databases such as MySQL. The UI mitigates the user having to know in-depth knowledge of the database application programming interface (API). PylotDB allows the user to generate various kinds of plots from user-selected data; generate statistical information on text as well as numerical fields; backup and restore databases; compare database tables across different databases as well as across different servers; extract information from any field to create new fields; generate, edit, and delete databases, tables, and fields; generate or read into a table CSV data; and similar operations. Since much of the database information is brought under control of the Python computer language, PylotDB is not intended for huge databases for which MySQL and Oracle, for example, are better suited. PylotDB is better suited for smaller databases that might be typically needed in a small research group situation. PylotDB can also be used as a learning tool for database applications in general.",
      "laborHours": 0,
      "languages": [],
      "name": "PylotDB - A Database Management, Graphing, and Analysis Tool Written in Python",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/dwbarne/PYLOTDB/blob/c392983605dcc3c23ecf00cf03d69ff70d74e36f/PylotDB/pylotdb.py",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dwbarne/PYLOTDB/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software consists of code modifications to the open-source OpenSceneGraph software package to enable the creation of TlFF images containing 16 bit unsigned data. They also allow the user to disable compression and set the DPI tags in the resulting TIFF Images. Some image analysis programs require uncompressed, 16 bit unsigned input data. These code modifications allow programs based on OpenSceneGraph to write out such images, improving connectivity between applications.",
      "laborHours": 0,
      "languages": [],
      "name": "TIFF Image Writer patch for OpenSceneGraph",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/openscenegraph/OpenSceneGraph",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The functionality of heRXD includes the following: distance and angular calibration and viewing flat-panel detector images used for X-ray diffraction; image (polar) rebinning or \"caking\"; line position fitting in powder diffraction images; image segmentation or \"blob finding\"; crystal orentation indesing; and lattice vector refinement. These functionalities encompass a critical set analyzing teh data for high-energy diffraction measurements that are currently performed at synchrotron sources such as the Advanced Photon Source (APS). The software design modular and open source under LGPL. The intent is to provide a common framework and graphical user interface that has the ability to utillize internal as well as external subroutines to provide various optins for performing the fuctionalities listed above. The software will initially be deployed at several national user facilities--including APS, ALS, and CHESS--and then made available for download using a hosting service such as sourceforge.",
      "laborHours": 0,
      "languages": [],
      "name": "High-Energy X-Ray Diffraction Analysis Tool",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/praxes/hexrd",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MountPointAttributes is a software component that provides client code with a technique to raise the local namespace of a file to a global namespace. Its abstractions and mechanisms allow the client code to gather global properties of a file and to use them in devising an effective storage access strategy on this file.",
      "laborHours": 0,
      "languages": [],
      "name": "MountPointAttributes",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/mountpointattributes",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Forthon generates links between Fortran and Python. Python is a high level, object oriented, interactive and scripting language that allows a flexible and versatile interface to computational tools. The Forthon package generates the necessary wrapping code which allows access to the Fortran database and to the Fortran subroutines and functions. This provides a development package where the computationally intensive parts of a code can be written in efficient Fortran, and the high level controlling code can be written in the much more versatile Python language.",
      "laborHours": 0,
      "languages": [],
      "name": "Python interface generator for Fortran based codes (a code development aid)",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/dpgrote/Forthon/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dpgrote/Forthon",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ECCE provides a sophisticated graphical user interface, scientific visualization tools, and the underlying data management framework enabling scientists to efficiently set up calculations and store, retrieve, and analyze the rapidly growing volumes of data produced by computational chemistry studies. ECCE was conceived as part of the Environmental Molecular Sciences Laboratory construction to solve the problem of researchers being able to effectively utilize complex computational chemistry codes and massively parallel high performance compute resources. Bringing the power of these codes and resources to the desktops of researcher and thus enabling world class research without users needing a detailed understanding of the inner workings of either the theoretical codes or the supercomputers needed to run them was a grand challenge problem in the original version of the EMSL. ECCE allows collaboration among researchers using a web-based data repository where the inputs and results for all calculations done within ECCE are organized. ECCE is a first of kind end-to-end problem solving environment for all phases of computational chemistry research: setting up calculations with sophisticated GUI and direct manipulation visualization tools, submitting and monitoring calculations on remote high performance supercomputers without having to be familiar with the details of using these compute resources, and performing results visualization and analysis including creating publication quality images. ECCE is a suite of tightly integrated applications that are employed as the user moves through the modeling process.",
      "laborHours": 0,
      "languages": [],
      "name": "Extensible Computational Chemistry Environment",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/mattbernst/ECCE/blob/master/ecce-v7.0/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/mattbernst/ECCE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Amalgam is a system that allows you to generate collections of files that work with conventional tools but take up minimal extra space on storage. If you already are archiving files in a file system and don't want to make multiple copies of whole files in order to ship the data somewhere then this system is for you. Amalgam consists of tools that allow you to create and get information about '.amalgam' files which contain just the metadata associated with a set of files. It also contains a fuse file system that, using amalgam files, will dynamically create traditional tar files. With this setup, you can see multiple orders of magnitude reduction in storage requirements for temporary data collections.",
      "laborHours": 0,
      "languages": [],
      "name": "Amalgam",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/EMSL-MSC/amalgam",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software package implements the algorithm from a paper by Bayati, Kim, and Saberi (first reference below) to generate a uniformly random sample of a graph with a prescribed degree distribution.",
      "laborHours": 0,
      "languages": [],
      "name": "Bayati Kim Saberi random graph sampler",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dgleich/bisquik",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "While an organized source of reference information on PV performance modeling is certainly valuable, there is nothing to match the availability of actual examples of modeling algorithms being used in practice. To meet this need, Sandia has developed a PV performance modeling toolbox (PV_LIB) for Matlab. It contains a set of well-documented, open source functions and example scripts showing the functions being used in practical examples. This toolbox is meant to help make the multi-step process of modeling a PV system more transparent and provide the means for model users to validate and understand the models they use and or develop. It is fully integrated into Matlab's help and documentation utilities. The PV_LIB Toolbox provides more than 30 functions that are sorted into four categories",
      "laborHours": 0,
      "languages": [],
      "name": "PV_LIB Toolbox",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/cwhanse/PVLIB_Python",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Xpetra provides a single interface that allows the use of either Epetra or Tpetra linear algebra libraries from the same source code. Library developers need only learn and use the syntax of Xpetra; the resulting libraries can use either Epetra or Tpetra.",
      "laborHours": 0,
      "languages": [],
      "name": "Xpetra Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MueLu is intended for the research and development of multigrid algorithms used in the solution of sparse linear systems arising from systems of partial differential equations. The software provides multigrid source code, test programs, and short example programs to demonstrate the various interfaces for creating, accessing, and applying the solvers. MueLu currently provides an implementation of smoothed aggregation algebraic multigrid method and interfaces to many commonly used smoothers. However, the software is intended to be extensible, and new methods can be incorporated easily. MueLu also allows for advanced usage, such as combining multiple methods and segregated solves. The library supports point and block access to matrix data. All algorithms and methods in MueLu have been or will be published in the open scientific literature.",
      "laborHours": 0,
      "languages": [],
      "name": "MueLu Multigrid Preconditioning Package",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MiniGhost is a miniapp in the Mantevo project. Using a finite difference method, it mimics the inter-process communication requirements commonly found in applications of this sort. Random values are inserts into the grid, and therefore no \"real problem\" is solved.",
      "laborHours": 0,
      "languages": [],
      "name": "miniGhost Mantevo miniapp",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Mantevo/miniGhost",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ShyLU is numerical software to solve sparse linear systems of equations. ShyLU uses a hybrid direct-iterative Schur complement method, and may be used either as a preconditioner or as a solver. ShyLU is parallel and optimized for a single compute Solver node. ShyLU will be a package in the Trilinos software framework.",
      "laborHours": 0,
      "languages": [],
      "name": "jShyLU Scalable Hybrid Preconditioner and Solver",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "pair_bop is a module for performing energy calculations using the Bond Order Potential (BOP) for use in the parallel molecular dynamics code LAMMPS. The bop pair style computes BOP based upon quantum mechanical incorporating both sigma and pi bondings. By analytically deriving the BOP pair bop from quantum mechanical theory its transferability to different phases can approach that of quantum mechanical methods. This potential is extremely effective at modeling 111-V and II-VI compounds such as GaAs and CdTe. This potential is similar to the original BOP developed by Pettifor and later updated by Murdock et al. and Ward et al.",
      "laborHours": 0,
      "languages": [],
      "name": "Bond order potential module for LAMMPS",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lammps/lammps",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MAT2EXO is a program which translates mesh data from Matlab mat-file format to Exodus II format. This tool is the inverse of the commonly used tool exo2mat which translates Exodus II data to the Matlab mat-file format. These tools provide a means for preprocessing an Exodus II model file or postprocessing an Exodus II results file using Matlab",
      "laborHours": 0,
      "languages": [],
      "name": "Mat2exo",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Dax Toolkit enables the fine-grained concurrency for data analysis and visualization required to drive multi-core processors, many-core GPU accelerators, and emerging architectures for exascale computing. Dax simplifies the design of finely threaded algorithms by characterizing them in per element operations, which we call worklets. Worklets simplify design because they can behave as serial processes without the complications of memory clashes or other race conditions. Yet worklets can be scheduled on a practically unlimited number of threads, thereby making effective utilization of many processing cores. Operations coordinated across elements are encapsulated in a few versatile communicative operations that are adapted to the specifics of computing devices.",
      "laborHours": 0,
      "languages": [],
      "name": "Dax v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Kitware/DaxToolkit",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "The software is a modular framework for controlling data acquisition systems (DAQs) for radiation detectors. Its capabilities include hardware configuration and control as well as data readout and storage. In addition to a generalized extensible framework for building DAQs, the package also includes specific implementations for a number of commercially available hardware devices commonly used in nuclear instrumentation (digitizers, high voltage controllers, etc.).",
      "laborHours": 0,
      "languages": [],
      "name": "SLMod",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/mrSkortch/DCS-SLmod/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/mrSkortch/DCS-Slmod",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Kokkos Array library implements shared-memory array data structures and parallel task dispatch interfaces for data-parallel computational kernels that are performance-portable to multicore-CPU and manycore-accelerator (e.g., GPGPU) devices.",
      "laborHours": 0,
      "languages": [],
      "name": "Kokkos Array",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "nSIGHTS (n-dimensional Statistical Inverse Graphical Hydraulic Test Simulator) is a comprehensive well test analysis software package. It provides a user-interface, a well test analysis model and many tools to analyze both field and simulated data. The well test analysis model simulates a single-phase, one-dimensional, radial/non-radial flow regime, with a borehole at the center of the modeled flow system. nSIGHTS solves the radially symmetric n-dimensional forward flow problem using a solver based on a graph-theoretic approach. The results of the forward simulation are pressure, and flow rate, given all the input parameters. The parameter estimation portion of nSIGHTS uses a perturbation-based approach to interpret the best-fit well and reservoir parameters, given an observed dataset of pressure and flow rate.",
      "laborHours": 0,
      "languages": [],
      "name": "n-dimensional Statistical Inverse Graphical Hydraulic Test Simulator",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/nsights/nSIGHTS/blob/master/genLib/GenLibAfx.h",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/nsights/nSIGHTS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The ap command traveres all symlinks in a given file, directory, or executable name to identify the final absolute path. It can print just the final path, each intermediate link along with the symlink chan, and the permissions and ownership of each directory component in the final path. It has functionality similar to \"which\", except that it shows the final path instead of the first path. It is also similar to \"pwd\", but it can provide the absolute path to a relative directory from the current working directory.",
      "laborHours": 0,
      "languages": [],
      "name": "The absolute path command",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/ap/blob/master/LICENSE.TXT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/ap",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Datatype Compare (DTCMP) library provides routines that sort, search, merge, partition, rank, and select items using operations that compare MPI datatypes. Such routines are needed im MPI applications dealing with large distributed latasets, where the amount of data is too large to gather to a single process.",
      "laborHours": 0,
      "languages": [],
      "name": "The Datatype Compare Library v.1.0",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/dtcmp/blob/master/LICENSE.TXT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/hpc/dtcmp",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The mpileaks tool is to be used by MPI application developers to track and report leaked MPI objects, such as requests, groups, and datatypes. This debugging tool is useful as a quality assurance check for MPI applications, or it can be used to identify leaks fatal to long-running MPI applications. It provides an efficient method to report bugs that are otherwise fifficult to identify.",
      "laborHours": 0,
      "languages": [],
      "name": "mpileaks - an MPI opject leak debugging library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/mpileaks/blob/master/LICENSE.TXT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/mpileaks",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "DI-MMAP is a simulator for modeling the performance of next generation non-volatile random access memory technologies (NVRAM) and a high-perfromance memory-map runtime for the Linux operating system. It is implemented as a device driver for the Linux operating system. It will be used by algorithm designers to unserstand the impact of future NVRAM on their algorithms and will be used by application developers for high-performance access to NVRAM storage.",
      "laborHours": 0,
      "languages": [],
      "name": "Data-Intensive Memory-Map simulator and runtime",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/vanessen/di-mmap",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "We are seeking a code review of patches against DyninstAPI 8.0. DyninstAPI is an open source binary instrumentation library from the University of Wisconsin and University of Maryland. Our patches port DyninstAPI to the BlueGene/P and BlueGene/Q systems, as well as fix DyninstAPI bugs and implement minor new features in DyninstAPI.",
      "laborHours": 0,
      "languages": [],
      "name": "DyninstAPI Patches",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dyninst/dyninst",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Script to create operating system images in a directory from RPMs using the commands rpm or YUM.",
      "laborHours": 0,
      "languages": [],
      "name": "Kona",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trentdhooge/kona.git",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Light-Weight Group (LWGRP) bibrary provides data structures and collective routines to define and operate on groups of MPI processes. Groups can be created and freed efficiently in O(log N) time space requiring less overhead that constructing full MPI communicators. This facilitates faster development of applications and libraries that need to rapidly create, use, and destroy process groups.",
      "laborHours": 0,
      "languages": [],
      "name": "The Light-Weight Group Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/lwgrp/blob/master/LICENSE.TXT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/lwgrp",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Rubik is a tool that simplifies the process of creating task mappings for structured applications. Rubik allows an application developer to specify communicating groups of processes in a virtual application topology succinctly and map them onto groups of processors in a physical network topology. Both the application topology and the network topology must be Cartesian, but the dimensionality of either is arbitrary. This allows users to easily map low-dimensional structures such as planes to higher-dimensional structures like cubes to increase the number of links used for routing.",
      "laborHours": 0,
      "languages": [],
      "name": "Rubik",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/rubik/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/rubik",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Give and Take are set of companion utilities that allow a secure transfer of files from one user to another without exposing the files to third parties. The named files are copied to a spool area. The reciever can retrieve the files by running the \"take\" program. Ownership of the files remains with the giver until they are taken. Certain users may be limited to take files only from specific givers. For these users, files may only be taken from givers who are members of the gt-uid-group where uid is the UNIX id of the limited user.",
      "laborHours": 0,
      "languages": [],
      "name": "Give/Take",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/hpc/give",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Interatomic force and energy calculation subroutine to be used with the molecular dynamics simulation code LAMMPS (Ref a.). The code evaluated the total energy and atomic forces (energy gradient) according to a cubic spline-based variant (Ref b.) of the Modified Embedded Atom Method (MEAM) with a additional Stillinger-Weber (SW) contribution.",
      "laborHours": 0,
      "languages": [],
      "name": "Modified Embedded Atom Method",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lammps/lammps",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Boxfish is a tool for visualizing performance data. It allows users to quickly project performance data gathered from parallel applications onto intuitive domains. It also includes a projection mechanism that automatically finds relations in performance data so the the data can easily be mapped onto non-obviously related domains. For this release, Boxfish allows performance data to be projected onto the nodes and links of a computer network, as well as onto grids or patch-structured applications. This allows a user of the visualization tool to quickly see correlations between performance data and network structure, application data, or communication patterns.",
      "laborHours": 0,
      "languages": [],
      "name": "Boxfish",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/boxfish/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/boxfish",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SystemBurn is a tool for creating a synthetic computational load for the purpose of measuring how much power a computer will draw under that type of load. The loads include fundamental library function calls like matrix multiply, memory copies, fourier transforms, bit manipulation, I/O, network packet transfers, and some code contrived to cause the processor to dray more or less power. The code produces some diagnostic and progress output, but the actual measurements would be recorded from the power panels within the computer room.",
      "laborHours": 0,
      "languages": [],
      "name": "SystemBurn",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jlothian/systemburn",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SystemConfidence is a benchmark developed at ORNL which can measure statistical variation in which the user can plot. The portions of the code which manage the collection of the histograms and computing statistics on the histograms were designed with the intent that we could use these functions in other codes.",
      "laborHours": 0,
      "languages": [],
      "name": "SystemConfidence",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jlothian/sysconfidence",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Log files are typically semi-or un-structured. To be useable, they need to be parsed into a standard, structured format. Regex-Stream facilitates parsing text files into structured data (JSON) in streams of data.",
      "laborHours": 0,
      "languages": [],
      "name": "Regex-Stream",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/regex-stream",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "pgarvey@bnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "\"Synchrotron Radiation Workshop\" (SRW) is a physical optics computer code for calculation of detailed characteristics of Synchrotron Radiation (SR) generated by relativistic electrons in magnetic fields of arbitrary configuration and for simulation of the radiation wavefront propagation through optical systems of beamlines. Frequency-domain near-field methods are used for the SR calculation, and the Fourier-optics based approach is generally used for the wavefront propagation simulation. The code enables both fully- and partially-coherent radiation propagation simulations in steady-state and in frequency-/time-dependent regimes. With these features, the code has already proven its utility for a large number of applications in infrared, UV, soft and hard X-ray spectral range, in such important areas as analysis of spectral performances of new synchrotron radiation sources, optimization of user beamlines, development of new optical elements, source and beamline diagnostics, and even complete simulation of SR based experiments. Besides the SR applications, the code can be efficiently used for various simulations involving conventional lasers and other sources. SRW versions interfaced to Python and to IGOR Pro (WaveMetrics), as well as cross-platform library with C API, are available.",
      "laborHours": 0,
      "languages": [],
      "name": "Synchrotron Radiation Workshop (SRW)",
      "organization": "Brookhaven National Laboratory (BNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ochubar/SRW/blob/master/COPYRIGHT.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ochubar/SRW",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Brookhaven National Laboratory (BNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "NV is a visualization tool for exploring vulnerabilities within a network. The data is created with a vulnerability assessment tool, such as Nessus (http://www.tenable.com/products/nessus).",
      "laborHours": 0,
      "languages": [],
      "name": "Nessus Visualization",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/nv",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ASPA is an implementation of an adaptive sampling algorithm [1-3], which is used to reduce the computational expense of computer simulations that couple disparate physical scales. The purpose of ASPA is to encapsulate the algorithms required for adaptive sampling independently from any specific application, so that alternative algorithms and programming models for exascale computers can be investigated more easily.",
      "laborHours": 0,
      "languages": [],
      "name": "Adaptive Sampling Proxy Application",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/exmatex/aspa",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ProxyVPFFT computes the micromechanical reaponse of polycriystalline samples directly from images of their microstructures, usually captured using SEM. [2] ProxyVPFFT is proxy application, or a somplified version of existing software by Ricardo Lebensohn (VPFFT).",
      "laborHours": 0,
      "languages": [],
      "name": "Prozy Visco-plasticity, Fast Fourier Transform",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/exmatex/VPFFT/blob/master/README-license.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/exmatex/vpfft",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "LRIOT is a test bench framework that is designed to generate sophisticated I/O rates that can stress high-performance memory and storage systems, such as non-volatile random access memories (NVRAM)and storage class memory. Furthermore, LRIOT provides the capabilities to mix multiple types of concurrency, namely threading and task parallelism, as well as distributed execution using Message Passing Interface (MPI) libraries. It will be used by algorithm designers to generate access patterns that mimic their application's behavior, and by system designers to test high-performance NVRAM storage.",
      "laborHours": 0,
      "languages": [],
      "name": "Livermore Random I/O Testbench",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://bitbucket.org/vanessen/lriot/src/594efbf7484ed377e0b9e55e6f1bf564b6556546/lriot_license_header_stub.c",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/vanessen/lriot",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Qball is a modified version of the open source Qbox first-principles molecular dynamics code which was originally developed at LLNL by Francois Gygi.",
      "laborHours": 0,
      "languages": [],
      "name": "Qbox First-principles Molecular Dynamics (Qball branch, svn release 081",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/qball",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Sponge provides a web interface to Pulp (http://pulpproject.org/) that implements a particular workflow as described in the paper \"Staging Package Deployment via Repository Management\" (http://www.usenix.org/events/lisa11/tech/full_papers/Pierre.pdf). Namely, it implements a process for intensive management of software repositories to apply more deterministic updates to clients of those repositories.",
      "laborHours": 0,
      "languages": [],
      "name": "Sponge",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/stpierre/sponge",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The MPS++ computer code simulates models of strongly correlated quantum lattice systems. The algorithm used is the density-matrix renormalization method formulated in the matrix product states language. These models and methods are used to obtain ground state, dynamic, finite temperature and time evolution properties of the underlying materials that are simulated. These materials are usually one- and quasi-one dimensional strongly correlated electronic systems, such as high temperature superconductors, manganites, and other transition metal oxides. This code is (mostly) an implementation of the paper The density-matrix renormalization group in the age of matrix product states by U. Schollwoeck, and references therein, found at http://arxiv.org/abs/1008.3477v2 , and that was also published in Annals of Physics 326,96 (2011).",
      "laborHours": 0,
      "languages": [],
      "name": "MPS++",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/g1257/mpspp",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The INDDGO software package offers a set of tools for finding exact solutions to graph optimization problems via tree decompositions and dynamic programming algorithms. Currently the framework offers serial and parallel (distributed memory) algorithms for finding tree decompositions and solving the maximum weighted independent set problem. The parallel dynamic programming algorithm is implemented on top of the MADNESS task-based runtime.",
      "laborHours": 0,
      "languages": [],
      "name": "Integrated Network Decompositions and Dynamic Programming for Graph Optimization (INDDGO)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/bdsullivan/INDDGO",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "For testing and demonstration purposes, it is often necessary to replay saved network and log data. This library facilitates replaying these saved data streams. This module will take in a stream of JSON strings, read their specified timestamp field, and output according to the given criteria. This can include restricting output to a certain time range, and/or outputting the items with some delay based on their timestamp.",
      "laborHours": 0,
      "languages": [],
      "name": "Replay-Stream",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/replay-stream",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Many new, high-performance nuclear energy modeling and simulation tools are under development in the United States and many more existing projects are moving to high-performance computing. This shift to state-of-the-art modeling and simulation will not only result in an unprecedented use of computing resources but it will generate extremely large amounts of data in extraordinary detail. Domain scientists will find themselves simultaneously in two positions: managing the complexity of their own problem domain and managing the complexity of a nightmarish scenario of high-performance computational tools. We believe that the computational science community should develop integrated tools for coupling, working with and analyzing data from simulation codes instead of leaving domains scientists and students to fend for themselves and come up with a working solution. While many projects offer some set of tools to work with their codes, to launch jobs remotely or to setup input files, most of these tools are rarely integrated in a holistic way to provide an easy, common and high-productivity environment for users. For that matter, most remote jobs are launched on the machine in the other room, but that certainly will not work for larger problems that require Leadership Class computing resources found only at U.S. National Laboratories or similar facilities. Overcoming the challenges of launching on these machines and even on public or private clouds are left as a challenge to the user.",
      "laborHours": 0,
      "languages": [],
      "name": "The NEAMS Integrated Computational Environment (NiCE)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/eclipse/ice/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/eclipse/ice",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Enables applications to emit debug log information into an output file and provides developers with a way to visually structure the output to make it easier for them to navigate it to understand the sources of application errors.",
      "laborHours": 0,
      "languages": [],
      "name": "dbglog",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/bronevet/dbglog",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "CRUISE implements a user-space file system that stores data in main memory and transparently spills over to other storage, like local flash memory or the parallel file system, as needed. CRUISE also exposes file contents fo remote direct memory access, allowing external tools to copy files to the parallel file system in the background with reduced CPU interruption.",
      "laborHours": 0,
      "languages": [],
      "name": "Checkpoint-Restart in User Space",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/cruise/blob/master/COPYRIGHT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/cruise",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This client-side web app tracks the amount of time spent on arbitrary tasks. It allosw the creation of an unlimited number of arbitrarily named tasks ans via simple interactions, tracks the amount of time spent working on the drfined tasks.",
      "laborHours": 0,
      "languages": [],
      "name": "Task Time Tracker",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/Task-Time-Tracker",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SW4 is a program for simulating seismic wave propagation on parallel computers. SW4 colves the seismic wave equations in Cartesian corrdinates. It is therefore appropriate for regional simulations, where the curvature of the earth can be neglected. SW4 implements a free surface boundary condition on a realistic topography, absorbing super-grid conditions on the far-field boundaries, and a kinematic source model consisting of point force and/or point moment tensor source terms. SW4 supports a fully 3-D heterogeneous material model that can be specified in several formats. SW4 can output synthetic seismograms in an ASCII test format, or in the SAC finary format. It can also present simulation information as GMT scripts, whixh can be used to create annotated maps. Furthermore, SW4 can output the solution as well as the material model along 2-D grid planes.",
      "laborHours": 0,
      "languages": [],
      "name": "Seismic Waves, 4th order accurate",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/geodynamics/sw4",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ngrm-proto is a package of proff-of-concept utilities intended to demonstrate concepts that will be developed full in the FLUX resource manager.",
      "laborHours": 0,
      "languages": [],
      "name": "Next Generation Resource Manager Protoryping Environment",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chaos/ngrm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Magpie is a set of scripts to allow users to run Hadoop jobs on generic clusters rather than require users to build Hadoop specific clusters.",
      "laborHours": 0,
      "languages": [],
      "name": "magpie",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chu11/magpie",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "HAVOQGT is a C++ framework that can be used to create highly parallel graph traversal algorithms. The framework stores the graph and algorithmic data structures on external memory that is typically mapped to high performance locally attached NAND FLASH arrays. The framework supports a vertex-centered visitor programming model. The frameworkd has been used to implement breadth first search, connected components, and single source shortest path.",
      "laborHours": 0,
      "languages": [],
      "name": "Highly Asynchronous VisitOr Queue Graph Toolkit",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/PerMA/havoqgt",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "An API and implementation to install debug probes into a parallel application",
      "laborHours": 0,
      "languages": [],
      "name": "Dynamic Scalable Event Chain Tracing API",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/dysectapi",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "LDMS is a framework for collecting system data from computational clusters and transporting it off the cluster. It utilizes existing data sources on the cluster (e.g., temperature sensors, network traffic counters). The collection and transport mechanisms of LDMS are lightweight and do not significantly adversely impact the performance of the applications running concurrently on the cluster.",
      "laborHours": 0,
      "languages": [],
      "name": "Lightweight Distributed Metric Service (LDMS)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ovis-hpc/ovis",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Slycat is a web-based system for analysis of large, high-dimensional data such as that produced by High Performance Computing (HPC) platforms. The Slycat server integrates data ingestion, scalable analysis, data management, and visualization with commodity web clients using a multi-tiered hierarchy of data and model storage. Analysis inputs are pushed into Slycat, where models are generated and analysis artifacts are stored in a project database. These artifacts are the basis for visualizations that are delivered to users' desktops through ordinary web browsers, eliminating the need to build and deploy platform-specific client applications. Slycat currently provides two types of analysis: canonical correlation analysis (CCA) to model relationships between inputs and output metrics, and time series analysis featuring clustering and comparative visualization of waveforms.",
      "laborHours": 0,
      "languages": [],
      "name": "Slycat v 1.0 Beta",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/slycat/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The purpose of the Project Grandmaster Application is to allow individuals to opt-in and give the application access to data sources about their activities on social media sites. The application will cross-reference these data sources to build up a picture of each individual activities they discuss, either at present or in the past, and place this picture in reference to groups of all participants. The goal is to allow an individual to place themselves in the collective and to understand how their behavior patterns fit with the group and potentially find changes to make, such as activities they weren't already aware of or different groups of interest they might want to follow.",
      "laborHours": 0,
      "languages": [],
      "name": "Project Grandmaster",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/grandmaster",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Xyce Parallel Electronic Simulator simulates electronic circuit behavior in DC, AC, HB, MPDE and transient mode using standard analog (DAE) and/or device (PDE) device models including several age and radiation aware devices. It supports a variety of computing platforms (both serial and parallel) computers. Lastly, it uses a variety of modern solution algorithms dynamic parallel load-balancing and iterative solvers.! ! Xyce is primarily used to simulate the voltage and current behavior of a circuit network (a network of electronic devices connected via a conductive network). As a tool, it is mainly used for the design and analysis of electronic circuits.! ! Kirchoff's conservation laws are enforced over a network using modified nodal analysis. This results in a set of differential algebraic equations (DAEs). The resulting nonlinear problem is solved iteratively using a fully coupled Newton method, which in turn results in a linear system that is solved by either a standard sparse-direct solver or iteratively using Trilinos linear solver packages, also developed at Sandia National Laboratories.",
      "laborHours": 0,
      "languages": [],
      "name": "Xyce(™) Parallel Electronic Simulator",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Xycedev/Xyce",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Not Specified",
      "laborHours": 0,
      "languages": [],
      "name": "GOMA Ver. 6.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/goma/goma",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Minimega is a simple emulytics platform for creating testbeds of networked devices. The platform consists of easily deployable tools to facilitate bringing up large networks of virtual machines including Windows, Linux, and Android. Minimega attempts to allow experiments to be brought up quickly with nearly no configuration. Minimega also includes tools for simple cluster management, as well as tools for creating Linux based virtual machine images.",
      "laborHours": 0,
      "languages": [],
      "name": "minimega",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandia-minimega/minimega",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "New to version 2.0 of Albany is the development of equations sets for specific application areas. These are independent research and development efforts that have chosen to use Albany as their software deployment vehicle. Because of synergies between the projects, they remain in the same code repository and are all releasing together as the Albany software.",
      "laborHours": 0,
      "languages": [],
      "name": "Albany 2.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gahansen/Albany",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "TriBITS is a configuration, build, test, and reporting system that uses the Kitware open-source CMake/CTest/CDash system. TriBITS contains a number of custom CMake/CTest scripts and python scripts that extend the functionality of the out-of-the-box CMake/CTest/CDash system.",
      "laborHours": 0,
      "languages": [],
      "name": "TriBITS (Tribal Build, Integrate, and Test System)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "exodus.py is a Python wrapper of the open source Exodusll API intended for efficient pre-and post-processing finite element model data stored in the Exodusll file format.",
      "laborHours": 0,
      "languages": [],
      "name": "exodus.py",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A framework for modeling and simulating biological neural systems",
      "laborHours": 0,
      "languages": [],
      "name": "Neurons to Algorithms",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/frothga/n2a/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "High Performance Computing (HPC) systems generate millions of inter-related event log lines per day from thousands of computers, providing feedback on both successful and unsuccessful operations within the system. Thorough analysis of these logs is often required for root cause analysis of problems and tuning for greatest performance. This \"app\" for the \"Gnawts\" log analysis software (http://www.gnawts.com) facilitates faster and deeper insights into HPC system logs.",
      "laborHours": 0,
      "languages": [],
      "name": "Gnawts",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/hpc/gnawts",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "In the drive to make exascale computing a reality, significant effort is being invested in efficiently implementing and improving current numerical algorithms on various vendors' newest testbeds acquired by DOE's Advanced Simulation and Computing program. Porting large-scale applications to these testbeds is prohibitive in labor and time. Instead, it is more advantageous to run small-scale programs that capture the essence of the large-scale application and that can be more easily modified, improved, and distributed to other collaborators focused on hardware/software co-design. These small-scale applications are called miniapps are are being developed under the aegis of the Mantevo project.",
      "laborHours": 0,
      "languages": [],
      "name": "miniSMAC2D",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Mantevo/miniSMAC",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This particular consortium implementation of the software integration infrastructure will, in large part, refactor portions of the Rocstar multiphysics infrastructure. Development of this infrastructure originated at the University of Illinois DOE ASCI Center for Simulation of Advanced Rockets (CSAR) to support the center's massively parallel multiphysics simulation application, Rocstar, and has continued at IllinoisRocstar, a small company formed near the end of the University-based program. IllinoisRocstar is now licensing these new developments as free, open source, in hopes to help improve their own and others' access to infrastructure which can be readily utilized in developing coupled or composite software systems; with particular attention to more rapid production and utilization of multiphysics applications in the HPC environment. There are two major pieces to the consortium implementation, the Application Component Toolkit (ACT), and the Multiphysics Application Coupling Toolkit (MPACT). The current development focus is the ACT, which is (will be) the substrate for MPACT. The ACT itself is built up from the components described in the technical approach. In particular, the ACT has the following major components: 1.The Component Object Manager (COM): The COM package provides encapsulation of user applications, and their data. COM also provides the inter-component function call mechanism. 2.The System Integration Manager (SIM): The SIM package provides constructs and mechanisms for orchestrating composite systems of multiply integrated pieces.",
      "laborHours": 0,
      "languages": [],
      "name": "Multiphysics Application Coupling Toolkit",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/IllinoisRocstar/IMPACT",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Framework for Network Co-Simulation (FNCS) uses a federated approach to integrate simulations which may have differing time scales. Special consideration is given to integration with a communication network simulation such that inter-simulation messages may be optionally routed through and delayed by such a simulation. In addition, FNCS uses novel time synchronization algorithms to accelerate co-simulation including the application of speculative multithreading. FNCS accomplishes all of these improvements with minimal end user intervention. Simulations can be integrated using FNCS while maintaining their original model input files simply by linking with the FNCS library and making appropriate calls into the FNCS API.",
      "laborHours": 0,
      "languages": [],
      "name": "Framework for Network Co-Simulation",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/FNCS/fncs/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/FNCS/fncs",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This library is an implementation of the Sparse Approximate Matrix Multiplication (SpAMM) algorithm introduced. It provides a matrix data type, and an approximate matrix product, which exhibits linear scaling computational complexity for matrices with decay. The product error and the performance of the multiply can be tuned by choosing an appropriate tolerance. The library can be compiled for serial execution or parallel execution on shared memory systems with an OpenMP capable compiler",
      "laborHours": 0,
      "languages": [],
      "name": "spammpack, Version 2013-06-18",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/FreeON/spammpack",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Multiphysics Object Oriented Simulation Environment (MOOSE) software library developed at Idaho National Laboratory is a tool. MOOSE, like other tools, doesn't actually complete a task. Instead, MOOSE seeks to reduce the effort required to create engineering simulation applications. MOOSE itself is a software library: a blank canvas upon which you write equations and then MOOSE can help you solve them. MOOSE is comparable to a spreadsheet application. A spreadsheet, by itself, doesn't do anything. Only once equations are entered into it will a spreadsheet application compute anything. Such is the same for MOOSE. An engineer or scientist can utilize the equation solvers within MOOSE to solve equations related to their area of study. For instance, a geomechanical scientist can input equations related to water flow in underground reservoirs and MOOSE can solve those equations to give the scientist an idea of how water could move over time. An engineer might input equations related to the forces in steel beams in order to understand the load bearing capacity of a bridge. Because MOOSE is a blank canvas it can be useful in many scientific and engineering pursuits.",
      "laborHours": 0,
      "languages": [],
      "name": "Multiphysics Object Oriented Simulation Environment",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/moose",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GridOPTICS Software System (GOSS) is a middleware that facilitates creation of new, modular and flexible operational and planning platforms that can meet the challenges of the next generation power grid. GOSS enables Department of Energy, power system utilities, and vendors to build better tools faster. GOSS makes it possible to integrate Future Power Grid Initiative software products/prototypes into existing power grid software systems, including the PNNL PowerNet and EIOC environments. GOSS is designed to allow power grid applications developed for different underlying software platforms installed in different utilities to communicate with ease. This can be done in compliance with existing security and data sharing policies between the utilities. GOSS not only supports one-to-one data transfer between applications, but also publisher/subscriber scheme. To support interoperability requirements of future EMS, GOSS is designed for CIM compliance. In addition to this, it supports authentication and authorization capabilities to protect the system from cyber threats. In summary, the contributions of the GOSS middleware are as follows: A platform to support future EMS development. A middleware that promotes interoperability between power grid applications. A distributed architecture that separates data sources from power grid applications. Support for data exchange with either one-to-one or publisher/subscriber interfaces. An authentication and authorization scheme for limiting the access to data between utilities.",
      "laborHours": 0,
      "languages": [],
      "name": "GridOPTICS Software System",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/craig8/GOSS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Support Vector Machines (SVM) is a popular machine learning technique, which has been applied to a wide range of domains such as science, finance, and social networks for supervised learning. MaTEx undertakes the challenge of designing a scalable parallel SVM training algorithm for large scale systems, which includes commodity multi-core machines, tightly connected supercomputers and cloud computing systems. Several techniques are proposed for improved speed and memory space usage including adaptive and aggressive elimination of samples for faster convergence , and sparse format representation of data samples. Several heuristics for earliest possible to lazy elimination of non-contributing samples are considered in MaTEx. In many cases, where an early sample elimination might result in a false positive, low overhead mechanisms for reconstruction of key data structures are proposed. The proposed algorithm and heuristics are implemented and evaluated on various publicly available datasets",
      "laborHours": 0,
      "languages": [],
      "name": "Machine Learning Toolkit for Extreme Scale",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/matex-org/matex/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/matex-org/matex/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Modern processors offer a wide range of control and measurement features. While those are traditionally accessed through libraries like PAPI, some newer features no longer follow the traditional model of counters that can be used to only read the state of the processor. For example, Precise Event Based Sampling (PEBS) can generate records that requires a kernel memory for storage. Additionally, new features like power capping and thermal control require similar new access methods. All of these features are ultimately controlled through Model Specific Registers (MSRs). We therefore need new mechanisms to make such features available to tools and ultimately to the user. libMSR provides a convenient interface to access MSRs and to allow tools to utilize their full functionality.",
      "laborHours": 0,
      "languages": [],
      "name": "libMSR library and msr-safe kernel module",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/libmsr",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This package inplements a Lua interface to linux containers system calls, such as unshare(2) and chroot(2)",
      "laborHours": 0,
      "languages": [],
      "name": "Lua modules for linux containers",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/grondo/lua-containers",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This package implements a Lua interface to the LLNL hostlist routines, and includes a hostlist command oine utility based on the lua hostlist library.",
      "laborHours": 0,
      "languages": [],
      "name": "Luna Hostlist Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/grondo/lua-hostlist",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "AutomaDeD is a tool that automatically diagnoses performance and correctness faults in MPI applications. It creates time and control-flow models of processes in an MPI program, and when a failure occus, these models are analyzed probabilistically to find the origin of the failure. The output of the tool is MPI processes ranked by the abnormality degree and regions of code where faults are first manifested. The granularity of code region is an MPI call or a computation region between two MPI calls.",
      "laborHours": 0,
      "languages": [],
      "name": "Automata-based Debugging for Dissimilar Parallel Tasks",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/automaDeD",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The \"Callpath Library\" is a software abstraction layer over a number of stack tracing utilities. It allows tool develoopers to conveniently represent and mNipulate call paths gathered fro U. Wisconsin's Stackwalker API and GNU Backtrace.",
      "laborHours": 0,
      "languages": [],
      "name": "Callpath Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.1",
            "name": "GPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/callpath",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "perf-dump is a library for dumping performance data in much the same way physics simulations dump checkpoints. It records per-process, per-timestep, per-phase, and per-thread performance counter data and dumps this large data periodically into an HDF5 data file.",
      "laborHours": 0,
      "languages": [],
      "name": "perf-dump",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.1",
            "name": "GPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/perf-dump",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "The HPC software ecosystem is growing larger and more complex, but software distribution mechanisms have not kept up with this trend. Tools, Libraries, and applications need to run on multiple platforms and build with multiple compliers. Increasingly, packages leverage common software components, and building any one component requires building all of its dependencies. In HPC environments, ABI-incompatible interfaces (likeMPI), binary-incompatible compilers, and cross-compiled environments converge to make the build process a combinatoric nightmare. This obstacle deters many users from adopting useful tools, and others waste countless hours building and rebuilding tools. Many package managers exist to solve these problems for typical desktop environments, but none suits the unique needs of supercomputing facilities or users. To address these problems, we have Spack, a package manager that eases the task of managing software for end-users, across multiple platforms, package versions, compilers, and ABI incompatibilities.",
      "laborHours": 0,
      "languages": [],
      "name": "Spack: the Supercomputing Package Manager",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/spack/spack",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Fast Global File Status (FGFS) is a system software package that implimints a scalable mechanism to retrieve file information, such as its degree of distribution or replication and consistency.",
      "laborHours": 0,
      "languages": [],
      "name": "Fast Global File Status",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/fastglobalfilestatus",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MPI_T is an interface for tools introduced in the 3.0 version of MPI. The interface provides mechanisms for tools to access and set performance and control variables that are exposed by an MPI implementation. We have developed an MPI_T tool suite to provide a first set of tools exploiting the new interface and to get tool writers started on the path to more sophisticated support.",
      "laborHours": 0,
      "languages": [],
      "name": "The LLNL MPI_Tool Suite",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.1",
            "name": "GPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/mpi-tools",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "UPC++ is a Partitioned Global Address Space (PGAS) extension for C++, with three main objectives: 1) to provide an object-oriented PGAS programming model in the context of the popular C++ language; 2) to add useful parallel programming idioms unavailable in UPC, such as asynchronous remote function invocation and multidimensional arrays, to support complex scientific applications; 3) to offer an easy on-ramp to PGAS programming through interoperability with other existing parallel programming systems (e.g., MPI, OpenMP, CUDA). UPC++ includes two main features beyond UPC: 1) One of the major limitations of UPC in the context of DOE application is the relatively weak notion of multidimensional arrays, which it inherited from C. To remedy this problem in UPC++, we included a multidimensional domain and array library based on that of Titanium. Titanium's library is similar to Chapel's dense and strided domains, as both were inspired by the dense and strided regions and arrays in ZPL. 2) Another feature provided by UPC++ but not by UPC is remote function invocation, which is inspired by Phalanx, X10, Habanero-C, and C++11. The user may start an asynchronous remote function invocation with the following syntax: \"async(place)(function, args...);\". UPC++ provides two programming constructs for specifying dynamic dependencies among tasks: 1) event-driven execution as in Phalanx and Habanero-C; 2) finish-async as in X10. We implemented UPC++ with a \"compiler-free\" approach using C++ templates and runtime libraries. The UPC++ front-end consists of a set of C++ header files that enables the C++ compiler to \"translate\" UPC++ features in a user program to runtime library calls. In particular, we use templates and operator overloading to customize the behavior of UPC++ types.",
      "laborHours": 0,
      "languages": [],
      "name": "UPC++",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://bitbucket.org/upcxx/upcxx/src/0863f5d06029fedf5c8cce713c0e68c9af49a5b9/LICENSE.txt?at=master&fileviewer=file-view-default",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/upcxx/upcxx/src",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ]
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The SEED platform is expected to be a building energy performance data management tool that provides federal, state and local governments, building owners and operators with an easy, flexible and cost-effective method to collect information about groups of buildings, oversee compliance with energy disclosure laws and demonstrate the economic and environmental benefits of energy efficiency. It will allow users to leverage a local application to manage data disclosure and large data sets without the IT investment of developing custom applications. The first users of SEED will be agencies that need to collect, store, and report/share large data sets generated by benchmarking, energy auditing, retro-commissioning or retrofitting of many buildings. Similarly, building owners and operators will use SEED to manage their own energy data in a common format and centralized location. SEED users will also control the disclosure of their information for compliance requirements, recognition programs such as ENERGY STAR, or data sharing with the Buildings Performance Database and/or other third parties at their discretion.",
      "laborHours": 0,
      "languages": [],
      "name": "Standard Energy Efficiency Data Platform",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/SEED-platform/seed/blob/develop/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/SEED-platform/seed/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Hone sensors are packet-process correlation engines that log the relationships between applications and the communications they are responsible for. Hone sensors are available for a variety of platforms including Linux, Windows, and MacOSX. Hone sensors are designed to help analysts understand the meaning of communications on a deeper level by associating the origin or destination process to the communication. They do this by tracing communications on a per-packet basis, through the kernel of the operating system to determine their ultimate source/destination on the monitored machine.",
      "laborHours": 0,
      "languages": [],
      "name": "The Open Host Network Packet Process Correlator for Windows",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/HoneProject/Windows-Sensor/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/HoneProject/Windows-Sensor",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The ADARA software is a collection of programs which gather neutron scattering data from multiple detector banks, multiplex the data into a single stream and distribute that stream to analysis, reduction and translation utilities in real-time.",
      "laborHours": 0,
      "languages": [],
      "name": "ADARA",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ADARA-Neutrons/adara",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Set of scripts (Python and Bash) to help users configure, run, and benchmark Hadoop clusters on ORNL computing infrastructure.",
      "laborHours": 0,
      "languages": [],
      "name": "Spot-Hadoop",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jhorey/SpotHadoop",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Data reduction software for the Oak Ridge National Laboratory Spallation Neutron Source's Magnetism Reflectometer beam line 4A, used to extract reflectivity, off-specular and GISANS scattering from raw data in NeXus file format. The package consists of a Python library for the extraction and a Qt4 based graphical user interface to work with the data.",
      "laborHours": 0,
      "languages": [],
      "name": "QuickNXS",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/aglavic/quicknxs",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Chisel is a new open-source hardware construction language developed at UC Berkeley that supports advanced hardware design using highly parameterized generators and layered domain-specific hardware languages. Chisel is embedded in the Scala programming language, which raises the level of hardware design abstraction by providing concepts including object orientation, functional programming, parameterized types, and type inference. From the same source, Chisel can generate a high-speed C++-based cycle-accurate software simulator, or low-level Verilog designed to pass on to standard ASIC or FPGA tools for synthesis and place and route.",
      "laborHours": 0,
      "languages": [],
      "name": "Constructing Hardware in a Scale Embedded Language",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ucb-bar/chisel/blob/master/src/LICENSE.TXT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ucb-bar/chisel/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Recent advancements in technology scaling have shown a trend towards greater integration with large-scale chips containing thousands of processors connected to memories and other I/O devices using non-trivial network topologies. Software simulation proves insufficient to study the tradeoffs in such complex systems due to slow execution time, whereas hardware RTL development is too time-consuming. We present OpenSoC Fabric, an on-chip network generation infrastructure which aims to provide a parameterizable and powerful on-chip network generator for evaluating future high performance computing architectures based on SoC technology. OpenSoC Fabric leverages a new hardware DSL, Chisel, which contains powerful abstractions provided by its base language, Scala, and generates both software (C++) and hardware (Verilog) models from a single code base. The OpenSoC Fabric2 infrastructure is modeled after existing state-of-the-art simulators, offers large and powerful collections of configuration options, and follows object-oriented design and functional programming to make functionality extension as easy as possible.",
      "laborHours": 0,
      "languages": [],
      "name": "OpenSoC Fabric",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LBL-CoDEx/OpenSoCFabric/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LBL-CoDEx/OpenSoCFabric",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kindrew@jlab.org"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This library provides a library containing highly optimized Wilson-Dslash, Wilson Clover operator and Krylov subspace solvers for Lattice QCD simulations. The library is targeted at Intel(R) Xeon Phi(tm), and Intel(R) Xeon(tm) processors.",
      "laborHours": 0,
      "languages": [],
      "name": "QCD For Intel(R) Xeon Phi(tm) and Xeon(tm) processors",
      "organization": "Thomas Jefferson National Accelerator Facility (TJNAF)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/JeffersonLab/qphix/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/JeffersonLab/qphix.git",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Thomas Jefferson National Accelerator Facility (TJNAF)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A series of software programs that enables students to progress from completely unsecured control of devices to control that protects network commands with authentication, integrity and confidentiality. The working example provided is for turning LED lights on and off on a Raspberry Pi computer.",
      "laborHours": 0,
      "languages": [],
      "name": "CyPhyTown",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/PNNLgov/cyPhyTown/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNLgov/cyPhyTown",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "\"The soft costs of solar — costs not associated with hardware — remain stubbornly high. Among the biggest soft costs are those associated with inefficiencies in local permitting and inspection. A study by the National Renewable Energy Laboratory and Lawrence Berkeley National Laboratory estimates that these costs add an average of $0.22/W per residential installation. This project helps reduce non-hardware/balance of system (BOS) costs by creating and maintaining a free and available site of permitting requirements and solar system verification software that installers can use to reduce time, capital, and resource investments in tracking permitting requirements. Software tools to identify best permitting practices can enable government stakeholders to optimize their permitting process and remove superfluous costs and requirements. Like \"\"a Wikipedia for solar permitting\"\", users can add, edit, delete, and update information for a given jurisdiction. We incentivize this crowdsourcing approach by recognizing users for their contributions in the form of SEO benefits to their company or organization by linking back to users' websites.\"",
      "laborHours": 0,
      "languages": [],
      "name": "The National Solar Permitting Database",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/solarpermit/solarpermit/",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "procmon performs large-scale monitoring, data collection, and analysis of user processes running on Linux systems. It is intended to be used to aid in performing an automated workload analysis of very large scale systems, but may also be useful for live monitoring of the running processes on large scale systems.",
      "laborHours": 0,
      "languages": [],
      "name": "procmon",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://bitbucket.org/berkeleylab/nersc-procmon/src/c6e67d63e7c9c24f85a46b6d8965b8c615097edc/LICENSE?at=master&fileviewer=file-view-default",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/berkeleylab/nersc-procmon",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ]
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "F3D is written in OpenCL, so it achieve[sic] platform-portable parallelism on modern mutli-core CPUs and many-core GPUs. The interface and mechanims to access F3D core are written in Java as a plugin for Fiji/ImageJ to deliver several key image-processing algorithms necessary to remove artifacts from micro-tomography data. The algorithms consist of data parallel aware filters that can efficiently utilizes[sic] resources and can work on out of core datasets and scale efficiently across multiple accelerators. Optimizing for data parallel filters, streaming out of core datasets, and efficient resource and memory and data managements over complex execution sequence of filters greatly expedites any scientific workflow with image processing requirements. F3D performs several different types of 3D image processing operations, such as non-linear filtering using bilateral filtering and/or median filtering and/or morphological operators (MM). F3D gray-level MM operators are one-pass constant time methods that can perform morphological transformations with a line-structuring element oriented in discrete directions. Additionally, MM operators can be applied to gray-scale images, and consist of two parts: (a) a reference shape or structuring element, which is translated over the image, and (b) a mechanism, or operation, that defines the comparisons to be performed between the image and the structuring element. This tool provides a critical component within many complex pipelines such as those for performing automated segmentation of image stacks. F3D is also called a \"descendent\" of Quant-CT, another software we developed in the past. These two modules are to be integrated in a next version. Further details were reported in: D.M. Ushizima, T. Perciano, H. Krishnan, B. Loring, H. Bale, D. Parkinson, and J. Sethian. Structure recognition from high-resolution images of ceramic composites. IEEE International Conference on Big Data, October 2014.",
      "laborHours": 0,
      "languages": [],
      "name": "F3D Image Processing and Analysis for Many - and Multi-core Platforms",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/CameraIA/F3D/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/CameraIA/F3D/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This Drupal metadata and documents capture and management system is a repository, used for maintenance of metadata which describe resources contributed to the AASG State Geothermal Data System. The repository also provides an archive for files that are not hosted by the agency contributing the resource. Data from all 50 state geological surveys is represented here, and is contributed in turn to the National Geothermal Data System.",
      "laborHours": 0,
      "languages": [],
      "name": "AASG State Geothermal Data Repository for the National Geothermal Data System.",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/metadata-repository",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This is an adaptation of the pre-existing Scimark benchmark code to a variety of Python and Lua implementations. It also measures performance of the Fparser expression parser and C and C++ code on a variety of simple scientific expressions.",
      "laborHours": 0,
      "languages": [],
      "name": "Python/Lua Benchmarks",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://bitbucket.org/lebusby/splb/src/e1b801db07cbb8fd0eab2a50fdb3b1f25906fbef/Copyright",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/lebusby/splb",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GRAPE is a tool for managing software project workflows for the Git version control system. It provides a suite of tools to simplify and configure branch based development, integration with a project's testing suite, and integration with the Atlassian Stash repository hosting tool.",
      "laborHours": 0,
      "languages": [],
      "name": "Git Replacement for the",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/GRAPE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Hardware advancements such as Intel's PEBS and AMD's IBS, as well as software developments such as the perf_event API in Linux have made available the acquisition of memory access samples with performance information. MemAxes is a visualization and analysis tool for memory access sample data. By mapping the samples to their associated code, variables, node topology, and application dataset, MemAxes provides intuitive views of the data.",
      "laborHours": 0,
      "languages": [],
      "name": "MemAxes Visualization Software",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/scalability-llnl/MemAxes",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ZFP is a library for lossy compression of single- and double-precision floating-point data. One of the unique features of ZFP is its support for fixed-rate compression, which enables random read and write access at the granularity of small blocks of values. Using a C++ interface, this allows declaring compressed arrays (1D, 2D, and 3D arrays are supported) that through operator overloading can be treated just like conventional, uncompressed arrays, but which allow the user to specify the exact number of bits to allocate to the array. ZFP also has variable-rate fixed-precision and fixed-accuracy modes, which allow the user to specify a tolerance on the relative or absolute error.",
      "laborHours": 0,
      "languages": [],
      "name": "Fixed-rate compressed floating-point arrays",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/zfp/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/ZFP",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Large-scale systems like Sequoia allow running small numbers of very large (1M+ process) jobs, but their resource managers and schedulers do not allow large numbers of small (4, 8, 16, etc.) process jobs to run efficiently. Cram is a tool that allows users to launch many small MPI jobs within one large partition, and to overcome the limitations of current resource management software for large ensembles of jobs.",
      "laborHours": 0,
      "languages": [],
      "name": "Cram",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/scalability-llnl/cram",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "dkrakowski@anl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "OpenSHMEM is a community effort to unifyt and standardize the SHMEM programming model. MPI (Message Passing Interface) is a well-known community standard for parallel programming using distributed memory. The most recen t release of MPI, version 3.0, was designed in part to support programming models like SHMEM.OSHMPI is an implementation of the OpenSHMEM standard using MPI-3 for the Linux operating system. It is the first implementation of SHMEM over MPI one-sided communication and has the potential to be widely adopted due to the portability and widely availability of Linux and MPI-3. OSHMPI has been tested on a variety of systems and implementations of MPI-3, includingInfiniBand clusters using MVAPICH2 and SGI shared-memory supercomputers using MPICH. Current support is limited to Linux but may be extended to Apple OSX if there is sufficient interest. The code is opensource via https://github.com/jeffhammond/oshmpi",
      "laborHours": 0,
      "languages": [],
      "name": "OpenSHMEM over MPI-3",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jeffhammond/oshmpi",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This program is a graphical user interface for measuring and performing inter-active analysis of physical unclonable functions (PUFs). It is intended for demonstration and education purposes. See license.txt for license details. The program features a PUF visualization that demonstrates how signatures differ between PUFs and how they exhibit noise over repeated measurements. A similarity scoreboard shows the user how close the current measurement is to the closest chip signatures in the database. Other metrics such as average noise and inter-chip Hamming distances are presented to the user. Randomness tests published in NIST SP 800-22 can be computed and displayed. Noise and inter-chip histograms for the sample of PUFs and repeated PUF measurements can be drawn.",
      "laborHours": 0,
      "languages": [],
      "name": "Sandia PUF Analysis Tool",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/spat",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Domi (Greek for \"structure\") is a Trilinos package that provides support for multi-dimensional data arrays distributed over multiple processors of a high performance computing system. The software supports data arrays of arbitrary number of dimensions mapped to a multi-dimensional grid of processors. Domi provides local access to the data, as well as the ability to compute global quantities such as norms, maxima and minima. Data arrays can be constructed with boundary and communication padding, necessary for finite difference algorithms, and provides high-level methods for communicating data between processors to update these buffers. The distributed maps and vectors in Domi can be converted to the equivalent data structures in Epetra and Tpetra (both of which assume unstructured data), using view semantics when appropriate, for use with other Trilinos solvers.",
      "laborHours": 0,
      "languages": [],
      "name": "Domi",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/domi/Copyright.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software serves two purposes. The first purpose of the software is to prototype the Sandia High Performance Computing Power Application Programming Interface Specification effort. The specification can be found at http://powerapi.sandia.gov . Prototypes of the specification were developed in parallel with the development of the specification. Release of the prototype will be instructive to anyone who intends to implement the specification. More specifically, our vendor collaborators will benefit from the availability of the prototype. The second is in direct support of the PowerInsight power measurement device, which was co-developed with Penguin Computing. The software provides a cluster wide measurement capability enabled by the PowerInsight device. The software can be used by anyone who purchases a PowerInsight device. The software will allow the user to easily collect power and energy information of a node that is instrumented with PowerInsight. The software can also be used as an example prototype implementation of the High Performance Computing Power Application Programming Interface Specification.",
      "laborHours": 0,
      "languages": [],
      "name": "Power API Prototype",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pwrapi/pwrapi-ref",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Percept software package is a collection of libraries and executables that provide tools for verifying computer simulations of engineering components and systems. Percept is useful for simulations using the finite element or finite volume methods on unstructured meshes. Percept includes API's for adaptive mesh refinement, geometry representation, the method of manufactured solutions, analysis of convergence including the convergence of vibrational eigenmodes, and metrics for analyzing the difference between fields represented on two different overlapping unstructured grids.",
      "laborHours": 0,
      "languages": [],
      "name": "Percept",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "WEC-Sim (Wave Energy Converter SIMulator) is a code developed by Sandia National Laboratories and the National Renewable Energy Laboratory to model wave energy converters (WECs) when they are subject to operational waves. The code is a time-domain modeling tool developed in MATLAB/Simulink using the multi-body dynamics solver SimMechanics. In WEC-Sim, WECs are modeled by connecting rigid bodies to one another with joint or constraint blocks from the WEC-Sim library. WEC-Sim is a publicly available, open-source code to model WECs.",
      "laborHours": 0,
      "languages": [],
      "name": "WEC-Sim (Wave Energy Converter - SIMulator)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WEC-Sim/WEC-Sim",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software provides implementations of fast matrix multiplication algorithms. These algorithms perform fewer floating point operations than the classical cubic algorithm. The software uses code generation to automatically implement the fast algorithms based on high-level descriptions. The code serves two general purposes. The first is to demonstrate that these fast algorithms can out-perform vendor matrix multiplication algorithms for modest problem sizes on a single machine. The second is to rapidly prototype many variations of fast matrix multiplication algorithms to encourage future research in this area. The implementations target sequential and shared memory parallel execution.",
      "laborHours": 0,
      "languages": [],
      "name": "fast-matmul",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/arbenson/fast-matmul",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SCOT cyber security team enhancement tool that coordinates activities, captures knowledge, and serves as a platform to automate time-consuming tasks that a cyber security team needs to perform in its daily operations.",
      "laborHours": 0,
      "languages": [],
      "name": "Sandia Cyber Omni Tracker",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/sandialabs/scot/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/scot",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Oxide is a modular framework for feature extraction and analysis of executable files. Oxide is useful in a variety of reverse engineering and categorization tasks relating to executable content.",
      "laborHours": 0,
      "languages": [],
      "name": "Oxide",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/SamuelMulder/oxide/blob/master/shell.py",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/SamuelMulder/oxide",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Doubly Distributed Transactions (D2T) offers a technique for managing operations from a set of parallel clients with a collection of distributed services. It detects and manages faults. Example code with a test harness is also provided",
      "laborHours": 0,
      "languages": [],
      "name": "Doubly Distributed Transactions",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gflofst/d2t",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Toyplot integrates high quality interactive, animated plotting capabilities into web browsers using the Python programming language.",
      "laborHours": 0,
      "languages": [],
      "name": "toyplot",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/toyplot",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Pike is a software library for coupling and solving multiphysics applications. It provides basic interfaces and utilities for performing code-to-code coupling. It provides simple \"black-box\" Picard iteration methods for solving the coupled system of equations including Jacobi and Gauss-Seidel solvers. Pike was developed originally to couple neutronics and thermal fluids codes to simulate a light water nuclear reactor for the Consortium for Simulation of Light-water Reactors (CASL) DOE Energy Innovation Hub. The Pike library contains no physics and just provides interfaces and utilities for coupling codes. It will be released open source under a BSD license as part of the Trilinos solver framework (trilinos.org) which is also BSD. This code provides capabilities similar to other open source multiphysics coupling libraries such as LIME, AMP, and MOOSE.",
      "laborHours": 0,
      "languages": [],
      "name": "Physics Integration KErnels (PIKE)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Django app for tracking individual state's progress in their contributions to the National Geothermal Data System.",
      "laborHours": 0,
      "languages": [],
      "name": "AASG Geothermal Data submissions tracking application and site.",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/usgin/aasgtrack/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/aasgtrack",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GitHub repositories for creating and managing information exchanges (content models) for use in the NGDS and larger USGIN systems.",
      "laborHours": 0,
      "languages": [],
      "name": "Information Exchange development forums",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/usgin/usginmodels/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/usginmodels",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This web site provides information related to service profiles and implementation in development for the US Geoscience information network (USGIN). It is meant to be a site where developers can learn about the standard in use, the objectives of the application profiles being developed, software being used or tested for implementation of services, and details about particular implementations. Forums are provided for asking questions about the services, profiles, and implemenation issues.",
      "laborHours": 0,
      "languages": [],
      "name": "USGIN Lab site",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/lab-usgin-site",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This wiki page provides the public with all specifications needed to create a new information exchange (content model package).",
      "laborHours": 0,
      "languages": [],
      "name": "Defining a new information exchange",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/usgin/usginmodels/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/usginmodels",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This wiki page provides the public with all specifications needed to create a new spreadsheet (workbook) implementation of an information exchange, so that it conforms and functions properly with NGDS validation tools.",
      "laborHours": 0,
      "languages": [],
      "name": "Content Model Guidelines",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/usgin/ContentModelCMS/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/ContentModelCMS",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This is an executable python script which offers two different conversions for well log data: 1) Conversion from a BoreholeLASLogData.xls model to a LAS version 2.0 formatted XML file. 2) Conversion from a LAS 2.0 formatted XML file to an entry in the WellLog Content Model. Example templates for BoreholeLASLogData.xls and WellLogsTemplate.xls can be found in the package after download.",
      "laborHours": 0,
      "languages": [],
      "name": "Well Log ETL tool",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/WellLogDataTools",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This is a Node.js command line utility for scraping XML metadata from CSW and WFS, downloading linkage data from CSW and WFS, pinging hosts and returning status codes, pinging data linkages and returning status codes, writing ping status to CSV files, and uploading data to Amazon S3.",
      "laborHours": 0,
      "languages": [],
      "name": "NGDS Data Archiver",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ngds/data-archiver",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Django application providing a user-interface for building a file and metadata management system. Operates in conjunction with https://github.com/usgin/metadata-server.",
      "laborHours": 0,
      "languages": [],
      "name": "Metadata staging tools",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/metadata-repository",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Conduit is a C++ software library that helps software developers with data representation and data exchange in scientific simulations",
      "laborHours": 0,
      "languages": [],
      "name": "Conduit - Scientific Data Exchange Library for HPC Simulations",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/conduit/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/conduit",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This python script, available from ESRI and modified here, checks a server at specified intervals to ensure that web services remain up and running. If any are found to be off, they are automatically turned back on.",
      "laborHours": 0,
      "languages": [],
      "name": "Web service performance script",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ngds/CheckRunningArcGISservices/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ngds/CheckRunningArcGISservices",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This is a repository for tracking issues with metadata in the National Geothermal Data System. Each page representing a resource in NGDS has a link for the user to report issues with the metadata. NGDS teams also use this issue tracker to indicate problems and manage their resolution.",
      "laborHours": 0,
      "languages": [],
      "name": "Data Quality Reporting",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ngds/metadata-issues/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ngds/metadata-issues",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "OpenLayers application to help search for features in a WFS. The publicly available site is at http://data.geothermaldatasystem.org/.",
      "laborHours": 0,
      "languages": [],
      "name": "NGDS Data Explorer",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/NGDSDataExplorer",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "joiner@ameslab.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software is an efficient computational package of the Gutzwiller variational method. It solves the Gutzwiller variational problem for general multiband models with arbitrary on-site interaction in a fully self-consistent numerical approach. The underlying algorithm drastically reduces the problem of the high-dimensional Gutzwiller minimization by mapping it to a minimization only in the variational density matrix. For &#64257;xed density the Gutzwiller renormalization matrix is determined as a &#64257;x-point of a proper functional, whose evaluation requires only ground-state calculations of matrices de&#64257;ned in the Gutzwiller variational space. Furthermore, the package is able to account for the symmetries of the variational function in a controlled way, reducing the number of variational parameters. The software is highly ef&#64257;cient and robust, and is particularly suitable for &#64257;rst-principles studies (e.g., in combination with DFT) of many complex real materials, where the full intra-atomic interaction is important to obtain correct results.",
      "laborHours": 0,
      "languages": [],
      "name": "CyGutz",
      "organization": "Ames Laboratory (AMES)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/yaoyongxin/CyGutz",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Ames Laboratory (AMES)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MiniAero is an MPl+X proxy app for gas dynamics problems. MiniAero can be used as a representative limited gas dynamics application to assess future computer architectures and programming models",
      "laborHours": 0,
      "languages": [],
      "name": "MiniAero",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Mantevo/miniAero",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Nalu is a Sierra ToolKit (STK) based application module, and it has provided a set of \"lessons learned\" for the STK transition effort through its early adoption of STK. It makes use of the open-sourced Trilinos/ Tpetra library. Through the investment of LORD and ASCR projects, the Nalu code module has been extended beyond prototype status. Physics capability includes low Mach, variable density turbulent flow. The ongoing objective for Nalu is to facilitate partnerships with external organizations in order to extend code capability and knowledge; however, it is not intended to support routine CFD analysis. The targeted usage of this module is for non-NW applications that support work-for-others in the multiphysics energy sector.",
      "laborHours": 0,
      "languages": [],
      "name": "Nalu",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/spdomin/Nalu/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/spdomin/Nalu",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This is a Python API for interacting with USGIN Content Models.",
      "laborHours": 0,
      "languages": [],
      "name": "USGIN content models API",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/usgin/usginmodels/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/usginmodels",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This is a Python API for interacting with USGIN Content Models.",
      "laborHours": 0,
      "languages": [],
      "name": "Content Model Validator",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/usgin/ContentModelCMS/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/ContentModelCMS",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This site allows state data contributors to standardize their data in a USIGN content model, ensure that it meets all specifications, reprojects spatial data, and creates a geodatabase that is ready for web services deployment for tier 3 data.",
      "laborHours": 0,
      "languages": [],
      "name": "Excel to NGDS Services Tool",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/ExcelToNGDSServiceTool",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Django application providing a user-interface for building a file and metadata management system. An evolution of our Node.js and CouchDb metadata management system. This one focuses on server functionality and uses a well-documented, rational and REST-ful API for data access.",
      "laborHours": 0,
      "languages": [],
      "name": "Metadata management staging system",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/metadata-server",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Provides a message passing framework between generic input, model and output drivers, and specifies an API for developing such drivers. Also provides batch and real-time controllers which step the model and 1/0 through the time domain (or other discrete domain), and sample 1/0 drivers. This is a Framework library framework, and does not, itself, solve any problems or execute any modelling. The SeMe framework aids in development of models which operate on sequential information, such as time-series, where evaluation is based on prior results combined with new data for this iteration. Ha) applications in quality monitoring, and was developed as part of the CANARY-EDS software, where real-time water quality data is being analyzed",
      "laborHours": 0,
      "languages": [],
      "name": "Sequentially Executed Model Evaluation Framework",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/willfurnass/seme",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SVF is a full featured OpenGL 3d framework that allows for rapid creation of complex visualizations. The SVF framework handles much of the lifecycle and complex tasks required for a 3d visualization. Unlike a game framework SVF was designed to use fewer resources, work well in a windowed environment, and only render when necessary. The scene also takes advantage of multiple threads to free up the UI thread as much as possible. Shapes (actors) in the scene are created by adding or removing functionality (through support objects) during runtime. This allows a highly flexible and dynamic means of creating highly complex actors without the code complexity (it also helps overcome the lack of multiple inheritance in Java.) All classes are highly customizable and there are abstract classes which are intended to be subclassed to allow a developer to create more complex and highly performant actors. There are multiple demos included in the framework to help the developer get started and shows off nearly all of the functionality. Some simple shapes (actors) are already created for you such as text, bordered text, radial text, text area, complex paths, NURBS paths, cube, disk, grid, plane, geometric shapes, and volumetric area. It also comes with various camera types for viewing that can be dragged, zoomed, and rotated. Picking or selecting items in the scene can be accomplished in various ways depending on your needs (raycasting or color picking.) The framework currently has functionality for tooltips, animation, actor pools, color gradients, 2d physics, text, 1d/2d/3d textures, children, blending, clipping planes, view frustum culling, custom shaders, and custom actor states",
      "laborHours": 0,
      "languages": [],
      "name": "Sci-Vis Framework",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/svf/blob/master/svf-core/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/svf",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The FireHose Streaming Benchmarks are a suite of stream-processing benchmarks defined to enable comparison of streaming software and hardware, both quantitatively vis-a-vis the rate at which they can process data, and qualitatively by judging the effort involved to implement and run the benchmarks. Each benchmark has two parts. The first is a generator which produces and outputs datums at a high rate in a specific format. The second is an analytic which reads the stream of datums and is required to perform a well-defined calculation on the collection of datums, typically to find anomalous datums that have been created in the stream by the generator. The FireHose suite provides code for the generators, sample code for the analytics (which users are free to re-implement in their own custom frameworks), and a precise definition of each benchmark calculation.",
      "laborHours": 0,
      "languages": [],
      "name": "FireHose Streaming Benchmarks",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/stream-benchmarking/firehose",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "miniAMR is a \"miniapp\" which will be added to the Mantevo project. It provides a platform to experiment with different aspects of Adaptive Mesh Refinement (AMR). The calculations are performed on random data and the refinement is driven by simple objects moving through the mesh, so no real problem is solved. By having a small code that runs quickly, we can use to study different aspects of AMR and easily port the code to new testbed machines",
      "laborHours": 0,
      "languages": [],
      "name": "miniAMR",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Mantevo/miniAMR",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PathFinder is a graph search program, traversing a directed cyclic graph to find pathways between labeled nodes. Searches for paths through ordered sequences of labels are termed signatures. Determining the presence of signatures within one or more graphs is the primary function of Path Finder. Path Finder can work in either batch mode or interactively with an analyst. Results are limited to Path Finder whether or not a given signature is present in the graph(s).",
      "laborHours": 0,
      "languages": [],
      "name": "Path Finder",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Mantevo/PathFinder",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This is an implementation of a VTK class that can read data from an ADIOS file. Specifically, it interprets a schema embedded in the attributes of the ADIOS metadata to determine the structure of the data.",
      "laborHours": 0,
      "languages": [],
      "name": "ADIOS Schema reader for VTK",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.kitware.com/paraview/paraview/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SpawnNet provides a networking interface similar to Linux sockets that runs natively on High-performance network interfaces. It is intended to be used to bootstrap parallel jobs and communication libraries like MPI.",
      "laborHours": 0,
      "languages": [],
      "name": "SpawnNet",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/spawnnet/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/spawnnet",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "CombAlign is a new Python code that generates a gapped, one-to-many, multiple structure-based sequence alignment(MSSA) given a set of pairwise structure-based alignments. In order to better define regions of similarity among related protein structures, it is useful to detect the residue-residue correspondences among a set of pairwise structure alignments. Few codes exist for constructing a one-to-many, multiple sequence alignment derived from a set of structure alignments, and we perceived a need for creating a new tool for combing pairwise structure alignments that would allow for insertion of gaps in the reference structure.",
      "laborHours": 0,
      "languages": [],
      "name": "Combining Multiple Pairwise Structure-based Alignments",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/carolzhou/Protein",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "IBTopo is a set of perl modules and scripts that enable one to determine the network topology of an Infiniband network.",
      "laborHours": 0,
      "languages": [],
      "name": "IBTopo",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/ibtopo/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/hpc/ibtopo",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ParFELAG is a parallel distributed memory C++ library for numerical upscaling of finite element discretizations. It provides optimal complesity algorithms ro build multilevel hierarchies and solvers that can be used for solving a wide class of partial differential equations (elliptic, hyperbolic, saddle point problems) on general unstructured mesh (under the assumption that the topology of the agglomerated entities is correct). Additionally, a novel multilevel solver for saddle point problems with divergence constraint is implemented.",
      "laborHours": 0,
      "languages": [],
      "name": "Parallel Element Agglomeration Algebraic Multigrid and Upscaling Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/parelag",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Compare Gene Profiles (CGP) performs pairwise gene content comparisons among a relatively large set of related bacterial genomes. CGP performs pairwise BLAST among gene calls from a set of input genome and associated annotation files, and combines the results to generate lists of common genes, unique genes, homologs, and genes from each genome that differ substantially in length from corresponding genes in the other genomes. CGP is implemented in Python and runs in a Linux environment in serial or parallel mode.",
      "laborHours": 0,
      "languages": [],
      "name": "Compare Gene Profiles",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/carolzhou/Genome",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Qspp is an agent-based stochastic simulation model of the Poliovirus Sabin-to-Mahoney transition. This code simulates a cell-to-cell model of Poliovirus replication. The model tracks genotypes (virus genomes) as they are replicated in cells, and as the cells burst and release particles into the medium of a culture dish. An inoculum is then taken from the pool of virions and is used to inoculate cells on a new dish. This process repeats. The Sabin genotype comprises the initial inoculum. Nucleotide positions that match the Sabin1 (vaccine strain) and Mahoney (wild type) genotypes, as well as the neurovirulent phenotype (from the literature) are enumerated as constants.",
      "laborHours": 0,
      "languages": [],
      "name": "Sabin-to-Mahoney Transition Model of Quasispecies Replication",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/carolzhou/Virus",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ROL provides interfaces to and implementations of algorithms for gradient-based unconstrained and constrained optimization. ROL can be used to optimize the response of any client simulation code that evaluates scalar-valued response functions. If the client code can provide gradient information for the response function, ROL will take advantage of it, resulting in faster runtimes. ROL's interfaces are matrix-free, in other words ROL only uses evaluations of scalar-valued and vector-valued functions. ROL can be used to solve optimal design problems and inverse problems based on a variety of simulation software.",
      "laborHours": 0,
      "languages": [],
      "name": "Rapid Optimization Library",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/rol/Copyright.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "dkrakowski@anl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Python-ARM Radar Toolkit (Py-ART) is a collection of radar quality control and retrieval codes which all work on two unifying Python objects: the PyRadar and PyGrid objects. By building ingests to several popular radar formats and then abstracting the interface Py-ART greatly simplifies data processing over several other available utilities. In addition Py-ART makes use of Numpy arrays as its primary storage mechanism enabling use of existing and extensive community software tools.",
      "laborHours": 0,
      "languages": [],
      "name": "Python-ARM Radar Toolkit",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ARM-DOE/pyart",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This is a general purpose math library implementing basic tensor algebra operations on NVidia GPU accelerators. This software is a tensor algebra library that can perform basic tensor algebra operations, including tensor contractions, tensor products, tensor additions, etc., on NVidia GPU accelerators, asynchronously with respect to the CPU host. It supports a simultaneous use of multiple NVidia GPUs. Each asynchronous API function returns a handle which can later be used for querying the completion of the corresponding tensor algebra operation on a specific GPU. The tensors participating in a particular tensor operation are assumed to be stored in local RAM of a node or GPU RAM. The main research area where this library can be utilized is the quantum many-body theory (e.g., in electronic structure theory).",
      "laborHours": 0,
      "languages": [],
      "name": "Tensor Algebra Library for NVidia Graphics Processing Units",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/DmitryLyakh/TAL_SH",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SHOMS is a micro benchmark designed to test vendor implementations of the OpenSHMEM 1.1 spec. It seeks to test both bandwidth and latencies for small and large messages.",
      "laborHours": 0,
      "languages": [],
      "name": "SHOMS",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/MattBBaker/shoms",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "STONIX is a program for configuring UNIX and Linux computer operating systems. It applies configurations based on the guidance from publicly accessible resources such as: NSA Guides, DISA STIGs, the Center for Internet Security (CIS), USGCB and vendor security documentation. STONIX is written in the Python programming language using the QT4 and PyQT4 libraries to provide a GUI. The code is designed to be easily extensible and customizable.",
      "laborHours": 0,
      "languages": [],
      "name": "Stonix, Version 0.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/CSD-Public/stonix",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "brulilo is a Python package for building and evolving thermonuclear reaction networks, such as those used in astrophysical explosion calculations. It is very much a current work in progress, and much of the intended functionality is still under development. The main goal of brulilo is an easy-to-use code for quick calculations or post-processing, as well as a learning tool to test various implementations of solvers on both CPUs and GPUs. Currently, brulilo parses an input text file that specifies the reactions to be included in the network. The notation of the inputs are in the typical astrophysical notation; i.e. hydrogen burning to deuterium in the sun, \"p + p + e --> d + neutrino\", is given as \"p(p,)d.\" Each reaction is added to a list comprising the reaction network, and once completed, the network contains a list of all isotopes and reactions involved. brulilo then parses publicly available nuclear data (binding energy, spin, partition function data, etc.) for each isotope from the WebNucleo group's data at nucleo.ces.clemson.edu. Fits to reaction rate data for each reaction are obtained from the publicly available data provided by the Joint Institute for Nuclear Astrophysics' Reaclib database. Reverse reactions are calculated from detailed balance. The reaction network then consists of a sparse system of mathematically stiff ordinary differential equations (ODEs). Physically, \"stiffness\" here means that there are some reaction rates that are occurring much faster than others; the ratio of the fast to slow often being greater than 10^15 in astrophysics. Numerical integration of such systems typically involves implicit integration schemes, which brulilo will leverage from the scientific computing Python package, Numpy, as well as implement its own. There has recently been work from researchers at Oak Ridge National Lab who have found good results from applying quasi-equilibrium and quasi-asymptotic conditions to the stiff system of ODEs, which effectively remove some of the stiffness and allow for efficient explicit integration techniques to be used. The original intent of brulilo was to implement these stiffness-alleviating techniques with explicit integrators and compare the performance to traditional implicit integrations of the full stiff system. This is still underway, as the code is very much in an alpha-release state. Furthermore, explicit integrators are often much easier to parallelize than their implicit counterparts. brulilo will implement parallelization of these techniques, leveraging both the Python implementation of MPI, mpi4py, as well as highly parallelized versions targeted at GPUs with PyOpenCL and/or PyCUDA.",
      "laborHours": 0,
      "languages": [],
      "name": "brulilo, Version 0.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/cmsquared/brulilo/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/cmsquared/brulilo",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The intent of the software is eventually to become a middleware library to provide a cross platform interface for creating and managing a ramdisk. Eventually it will cover many platforms (*nix, Windows, Mac), and have the library written in several languages. At this point, the library is a functional python library for managing a Mac ramdisk. Some code is also included in how to use the library. Initial intended uses for the library: archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Provide a throw-away filesystem for unit testing filesystem related functionality. archive deleteone.sql elink_2017_10_20.json file.json fix_on_records.sh just-doi-it.sh onrecords postfile.sh postit.sh solr-delete testrepos.sh wipe.postgresql Improve compile time when building software.",
      "laborHours": 0,
      "languages": [],
      "name": "ramdisk, Version 0.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/csd-dev-tools/ramdisk",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MATK provides basic functionality to facilitate model analysis within the Python computational environment. Model analysis setup within MATK includes: - define parameters - define observations - define model (python function) - define samplesets (sets of parameter combinations) Currently supported functionality includes: - forward model runs - Latin-Hypercube sampling of parameters - multi-dimensional parameter studies - parallel execution of parameter samples - model calibration using internal Levenberg-Marquardt algorithm - model calibration using lmfit package - model calibration using levmar package - Markov Chain Monte Carlo using pymc package MATK facilitates model analysis using: - scipy - calibration (scipy.optimize) - rpy2 - Python interface to R",
      "laborHours": 0,
      "languages": [],
      "name": "Model Analysis ToolKit",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dharp/MATK",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Streaming Canvas is an interactive data visualization tool for high dimensional data such as text documents. It allows the user to interactively analyze documents.",
      "laborHours": 0,
      "languages": [],
      "name": "Streaming Canvas",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/aim-science-of-interaction/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/aim-science-of-interaction",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Vector extensions, such as SSE, have been part of the x86 CPU since the 1990s, with applications in graphics, signal processing, and scientific applications. Although many algorithms and applications can naturally benefit from automatic vectorization techniques, there are still many that are difficult to vectorize due to their dependence on irregular data structures, dense branch operations, or data dependencies. Sequence alignment, one of the most widely used operations in bioinformatics workflows, has a computational footprint that features complex data dependencies. The trend of widening vector registers adversely affects the state-of-the-art sequence alignment algorithm based on striped data layouts. Therefore, a novel SIMD implementation of a parallel scan-based sequence alignment algorithm that can better exploit wider SIMD units was implemented as part of the Parallel Sequence Alignment Library (parasail). Parasail features: Reference implementations of all known vectorized sequence alignment approaches. Implementations of Smith Waterman (SW), semi-global (SG), and Needleman Wunsch (NW) sequence alignment algorithms. Implementations across all modern CPU instruction sets including AVX2 and KNC. Language interfaces for C/C++ and Python.",
      "laborHours": 0,
      "languages": [],
      "name": "Pairwise Sequence Alignment Library",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/jeffdaily/parasail/blob/master/COPYING",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jeffdaily/parasail",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Shifter enables application virtualization or containerization in large-scale HPC environments. This technology decreases the effort to port applications to or between HPC sites while increasing reproducibility and scientific productivity. Shifter works by converting application/container images to a common format, and then leverages basic Linux functionality to make that image available to batch jobs run in the HPC environment.",
      "laborHours": 0,
      "languages": [],
      "name": "shifter",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NERSC/shifter/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NERSC/shifter",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "dkrakowski@anl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Tomopy is a Python toolbox to perform x-ray data processing, image reconstruction and data exchange tasks at synchrotron facilities. The dependencies of the software are currently as follows: -Python related python standard library (http://docs.python.org/2/library/) numpy (http://www.numpy.org/) scipy (http://scipy.org/) matplotlib (http://matplotlip.org/) sphinx (http://sphinx-doc.org) pil (http://www.pythonware.com/products/pil/) pyhdf (http://pysclint.sourceforge.net/pyhdf/) h5py (http://www.h5py.org) pywt (http://www.pybytes.com/pywavelets/) file.py (https://pyspec.svn.sourceforge.net/svnroot/pyspec/trunk/pyspec/ccd/files.py) -C/C++ related: gridec (anonymous?? C-code written back in 1997 that uses standard C library) fftw (http://www.fftw.org/) tomoRecon (multi-threaded C++ verion of gridrec. Author: Mark Rivers from APS. http://cars9.uchicago.edu/software/epics/tomoRecon.html) epics (http://www.aps.anl.gov/epics/)",
      "laborHours": 0,
      "languages": [],
      "name": "Tomopy: A Python toolbox to perform X-Ray data proessing and image reconstruction.",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/tomopy/tomopy/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/tomopy/tomopy",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The OpenSM Monitoring System includes a collection of diagnostic and monitoring tools for use on Infiniband networks. The information this system gathers is obtained from a service, which in turn is obtained directly from the OpenSM subnet manager.",
      "laborHours": 0,
      "languages": [],
      "name": "OpenSM Monitoring System",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/meier/opensm-smt",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Not Specified",
      "laborHours": 0,
      "languages": [],
      "name": "Framework for Network Co-simulation v. 2.x",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/GridOPTICS/FNCS/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/GridOPTICS/FNCS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Flume-plugins are plugins for Apache Flume, which are used for managing data transferred through Apache Flume.",
      "laborHours": 0,
      "languages": [],
      "name": "flume-plugins Version 1.0",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/flume-plugins/blob/master/DISCLAIMER",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chu11/flume-plugins",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "FileUtils provides a suite of tools to manage large datasets typically created by large parallel MPI applications. They are written in C and use standard POSIX I/Ocalls. The current suite consists of tools to copy, compare, remove, and list. The tools provide dramatic speedup over existing Linux tools, which often run as a single process.",
      "laborHours": 0,
      "languages": [],
      "name": "Distributed File System Utilities to Manage Large DatasetsVersion 0.5",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/hpc/mpifileutils/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/hpc/fileutils",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "FALCON has been developed to enable simulation of the tightly coupled fluid-rock behavior in hydrothermal and engineered geothermal system (EGS) reservoirs, targeting the dynamics of fracture stimulation, fluid flow, rock deformation, and heat transport in a single integrated code, with the ultimate goal of providing a tool that can be used to test the viability of EGS in the United States and worldwide. Reliable reservoir performance predictions of EGS systems require accurate and robust modeling for the coupled thermal­hydrological­mechanical processes.",
      "laborHours": 0,
      "languages": [],
      "name": "Fracturing And Liquid CONvection",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/falcon",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A general particle library designed to run on next-generation hardware such as MICs and GPUs.",
      "laborHours": 0,
      "languages": [],
      "name": "Libparty, Version 1.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/libparty",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kindrew@jlab.org"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A simple code-generator to generate the low level code kernels used by the QPhiX Library for Lattice QCD. Generates Kernels for Wilson-Dslash, and Wilson-Clover kernels. Can be reused to write other optimized kernels for Intel Xeon Phi(tm), Intel Xeon(tm) and potentially other architectures.",
      "laborHours": 0,
      "languages": [],
      "name": "QPhiX Code Generator",
      "organization": "Thomas Jefferson National Accelerator Facility (TJNAF)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/JeffersonLab/qphix-codegen/blob/master/codegen/LICENSE.markdown",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/JeffersonLab/qphix-codegen",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Thomas Jefferson National Accelerator Facility (TJNAF)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MACSio is a Multi-purpose, Application-Centric, Scalable I/O proxy application. It is designed to support a number of goals with respect to parallel I/O performance testing and benchmarking including the ability to test and compare various I/O libraries and I/O paradigms, to predict scalable performance of real applications and to help identify where improvements in I/O performance can be made within the HPC I/O software stack.",
      "laborHours": 0,
      "languages": [],
      "name": "Multi-Purpose, Application-Centric, Scalable I/O Proxy Application",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/MACSio",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "\"MetaGenomic Assembly by Merging\" (MeGAMerge)Is a novel method of merging of multiple genomic assembly or long read data sources for assembly by use of internal trimming/filtering of data, followed by use of two 3rd party tools to merge data by overlap based assembly.",
      "laborHours": 0,
      "languages": [],
      "name": "MetaGenomic Assembly by Merging (MeGAMerge)",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/MeGAMerge/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/MeGAMerge",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Edge Bioinformatics is a developmental bioinformatics and data management platform which seeks to supply laboratories with bioinformatics pipelines for analyzing data associated with common samples case goals. Edge Bioinformatics enables sequencing as a solution and forward-deployed situations where human-resources, space, bandwidth, and time are limited. The Edge bioinformatics pipeline was designed based on following USE CASES and specific to illumina sequencing reads. 1. Assay performance adjudication (PCR): Analysis of an existing PCR assay in a genomic context, and automated design of a new assay to resolve conflicting results; 2. Clinical presentation with extreme symptoms: Characterization of a known pathogen or co-infection with a. Novel emerging disease outbreak or b. Environmental surveillance",
      "laborHours": 0,
      "languages": [],
      "name": "Edge Bioinformatics",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/edge",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "One major challenge in the field of shotgun metagenomics is the accurate identification of the organisms present within the community, based on classification of short sequence reads. Though microbial community profiling methods have emerged to attempt to rapidly classify the millions of reads output from contemporary sequencers, the combination of incomplete databases, similarity among otherwise divergent genomes, and the large volumes of sequencing data required for metagenome sequencing has led to unacceptably high false discovery rates (FDR). Here we present the application of a novel, gene-independent and signature-based metagenomic taxonomic profiling tool with significantly smaller FDR, which is also capable of classifying never-before seen genomes into the appropriate parent taxa.The algorithm is based upon three primary computational phases: (I) genomic decomposition into bit vectors, (II) bit vector intersections to identify shared regions, and (III) bit vector subtractions to remove shared regions and reveal unique, signature regions. In the Decomposition phase, genomic data is first masked to highlight only the valid (non-ambiguous) regions and then decomposed into overlapping 24-mers. The k-mers are sorted along with their start positions, de-replicated, and then prefixed, to minimize data duplication. The prefixes are indexed and an identical data structure is created for the start positions to mimic that of the k-mer data structure. During the Intersection phase -- which is the most computationally intensive phase -- as an all-vs-all comparison is made, the number of comparisons is first reduced by four methods: (a) Prefix restriction, (b) Overlap detection, (c) Overlap restriction, and (d) Result recording. In Prefix restriction, only k-mers of the same prefix are compared. Within that group, potential overlap of k-mer suffixes that would result in a non-empty set intersection are screened for. If such an overlap exists, the region which intersects is first reduced by performing a binary search of the boundary suffixes of the smaller set into the larger set, which defines the limits of the zipper-based intersection process. Rather than recording the actual k-mers of the intersection, another data structure of identical \"shape\" is created which consists of only bit vectors so that only a 1 or 0 will be stored in the location of the k-mer suffix that was found in the intersection. This reduces the amount of data generated and stored considerably. During the Subtraction phase, relevant intersection bitmasks are first unionized together to form a single bitmask which is then applied over the original genome to reveal only those regions of the genome that are unique. These regions are then exported to disk in FASTA format and used in the application of determining the constituents of an unknown metagenomic community.",
      "laborHours": 0,
      "languages": [],
      "name": "GOTTCHA, Version 1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/GOTTCHA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "One major challenge in the field of shotgun metagenomics is the accurate identification of the organisms present within the community, based on classification of short sequence reads. Though microbial community profiling methods have emerged to attempt to rapidly classify the millions of reads output from contemporary sequencers, the combination of incomplete databases, similarity among otherwise divergent genomes, and the large volumes of sequencing data required for metagenome sequencing has led to unacceptably high false discovery rates (FDR). Here we present the application of a novel, gene-independent and signature-based metagenomic taxonomic profiling tool with significantly smaller FDR, which is also capable of classifying never-before seen genomes into the appropriate parent taxa.The algorithm is based upon three primary computational phases: (I) genomic decomposition into bit vectors, (II) bit vector intersections to identify shared regions, and (III) bit vector subtractions to remove shared regions and reveal unique, signature regions.In the Decomposition phase, genomic data is first masked to highlight only the valid (non-ambiguous) regions and then decomposed into overlapping 24-mers. The k-mers are sorted along with their start positions, de-replicated, and then prefixed, to minimize data duplication. The prefixes are indexed and an identical data structure is created for the start positions to mimic that of the k-mer data structure.During the Intersection phase -- which is the most computationally intensive phase -- as an all-vs-all comparison is made, the number of comparisons is first reduced by four methods: (a) Prefix restriction, (b) Overlap detection, (c) Overlap restriction, and (d) Result recording. In Prefix restriction, only k-mers of the same prefix are compared. Within that group, potential overlap of k-mer suffixes that would result in a non-empty set intersection are screened for. If such an overlap exists, the region which intersects is first reduced by performing a binary search of the boundary suffixes of the smaller set into the larger set, which defines the limits of the zipper-based intersection process. Rather than recording the actual k-mers of the intersection, another data structure of identical \"shape\" is created which consists of only bit vectors so that only a 1 or 0 will be stored in the location of the k-mer suffix that was found in the intersection. This reduces the amount of data generated and stored considerably.During the Subtraction phase, relevant intersection bitmasks are first unionized together to form a single bitmask which is then applied over the original genome to reveal only those regions of the genome that are unique. These regions are then exported to disk in FASTA format and used in the application of determining the constituents of an unknown metagenomic community.The DATABASE provided is the result of the algorithm described.",
      "laborHours": 0,
      "languages": [],
      "name": "GOTTCHA Database, Version 1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/GOTTCHA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "CASL's modeling and simulation technology, the Virtual Environment for Reactor Applications (VERA), incorporates coupled physics and science-based models, state-of-the-art numerical methods, modern computational science, integrated uncertainty quantification (UQ) and validation against data from operating pressurized water reactors (PWRs), single-effect experiments, and integral tests. The computational simulation component of VERA is the VERA Core Simulator (VERA-CS). The core simulator is the specific collection of multi-physics computer codes used to model and deplete a LWR core over multiple cycles. The core simulator has a single common input file that drives all of the different physics codes. The parser code, VERAIn, converts VERA Input into an XML file that is used as input to different VERA codes.",
      "laborHours": 0,
      "languages": [],
      "name": "VERAIn",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/CASL/VERAin/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/CASL/VERAin/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Cloud droplet number concentration is an important factor in understanding aerosol-cloud interactions. As aerosol concentration increases, it is expected that droplet number concentration (Nd) will increase and droplet size will decrease, for a given liquid water path. This will greatly affect cloud albedo as smaller droplets reflect more shortwave radiation&#894; however, the magnitude and variability of these processes under different environmental conditions is still uncertain.McComiskey et al. (2009) have implemented a method, based onBoers and Mitchell (1994), for calculating Nd from ground-based remote sensing measurements of optical depth and liquid water path. They show that the magnitude of the aerosol-cloud interactions (ACI) varies with a range of factors, including the relative value of the cloud liquid water path (LWP), the aerosol size distribution, and the cloud updraft velocity. Estimates of Nd under a range of cloud types and conditions and at a variety of sites are needed to further quantify the impacts of aerosol cloud interactions. In order to provide data sets for studying aerosol-cloud interactions, the McComiskey et al. (2009) method was implemented as the Droplet Number Concentration (NDROP) value-added product (VAP).",
      "laborHours": 0,
      "languages": [],
      "name": "Droplet Number Concentration Value Added Product",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ARM-DOE/adi-vap-ndrop",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ARM-DOE/adi-vap-ndrop",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "joiner@ameslab.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ParFit is a flexible and extendable framework and library of classes for fitting force-field parameters to data from high-level ab-initio calculations on the basis of deterministic and stochastic algorithms. Currently, the code is fitting MM3 and Merck force-field parameters but could easily extend to other force-field types.",
      "laborHours": 0,
      "languages": [],
      "name": "Force-Field Parameter Fitter",
      "organization": "Ames Laboratory (AMES)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/fzahari/ParFit",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Ames Laboratory (AMES)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The four-dimensional scattering function S(Q,w) obtained by inelastic neutron scattering measurements provides unique \"dynamical fingerprints\" of the spin state and interactions present in complex magnetic materials. Extracting this information however is currently a slow and complex process that may take an expert -depending on the complexity of the system- up to several weeks of painstaking work to complete. Spin Wave Genie was created to abstract and automate this process. It strives to both reduce the time to complete this analysis and make these calculations more accessible to a broader group of scientists and engineers.",
      "laborHours": 0,
      "languages": [],
      "name": "Spin Wave Genie",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/SpinWaveGenie/SpinWaveGenie",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "DESTINY is a comprehensive tool for modeling 3D and 2D cache designs using SRAM,embedded DRAM (eDRAM), spin transfer torque RAM (STT-RAM), resistive RAM (ReRAM), and phase change RAM (PCN). In its purpose, it is similar to CACTI, CACTI-3DD or NVSim. DESTINY is very useful for performing design-space exploration across several dimensions, such as optimizing for a target (e.g. latency, area or energy-delay product) for agiven memory technology, choosing the suitable memory technology or fabrication method (i.e. 2D v/s 3D) for a given optimization target, etc. DESTINY has been validated against several cache prototypes. DESTINY is expected to boost studies of next-generation memory architectures used in systems ranging from mobile devices to extreme-scale supercomputers.",
      "laborHours": 0,
      "languages": [],
      "name": "DESTINY",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://code.ornl.gov/3d_cache_modeling_tool/destiny/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://code.ornl.gov/3d_cache_modeling_tool/destiny",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ]
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "To address a pressing need to better understand the behavior and complex interaction of ice sheets within the global Earth system, significant development of continental-scale, dynamical ice-sheet models is underway. The associated verification and validation process of these models is being coordinated through a new, robust, python-based extensible software package, the Land Ice Verification and Validation toolkit (LIVV). This release provides robust and automated verification and a performance evaluation on LCF platforms. The performance V&V involves a comprehensive comparison of model performance relative to expected behavior on a given computing platform. LIVV operates on a set of benchmark and test data, and provides comparisons for a suite of community prioritized tests, including configuration and parameter variations, bit-4-bit evaluation, and plots of tests where differences occur.",
      "laborHours": 0,
      "languages": [],
      "name": "Land Ice Verification and Validation Kit",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LIVVkit/LIVVkit",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Autotune software code uses an island-based evolutionary algorithm to solve multi-objective optimization problems. For the code provided, this has been applied to the whole-building simulation engine EnergyPlus to allow a software description of a building to be calibrated to measured data.",
      "laborHours": 0,
      "languages": [],
      "name": "Autotune",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL-BTRIC/Autotune/blob/master/LICENCE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-BTRIC/Autotune",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A collection of functions for statistical computing and data manipulation. These include routines for rapidly aggregating heterogeneous matrices, manipulating file names, loading R objects, sourcing multiple R files, formatting datetimes, multi-core parallel computing, stream editing, specialized plotting, etc. Smisc-package A collection of miscellaneous functions allMissing Identifies missing rows or columns in a data frame or matrix as.numericSilent Silent wrapper for coercing a vector to numeric comboList Produces all possible combinations of a set of linear model predictors cumMax Computes the maximum of the vector up to the current index cumsumNA Computes the cummulative sum of a vector without propogating NAs d2binom Probability functions for the sum of two independent binomials dataIn A flexible way to import data into R. dbb The Beta-Binomial Distribution df2list Row-wise conversion of a data frame to a list dfplapply Parallelized single row processing of a data frame dframeEquiv Examines the equivalence of two dataframes or matrices dkbinom Probability functions for the sum of k independent binomials factor2character Converts all factor variables in a dataframe to character variables findDepMat Identify linearly dependent rows or columns in a matrix formatDT Converts date or datetime strings into alternate formats getExtension Filename manipulations: remove the extension or path, extract the extension or path getPath Filename manipulations: remove the extension or path, extract the extension or path grabLast Filename manipulations: remove the extension or path, extract the extension or path ifelse1 Non-vectorized version of ifelse integ Simple numerical integration routine interactionPlot Two-way Interaction Plot with Error Bar linearMap Linear mapping of a numerical vector or scalar list2df Convert a list to a data frame loadObject Loads and returns the object(s) in an \".Rdata\" file more Display the contents of a file to the R terminal movAvg2 Calculate the moving average using a 2-sided window openDevice Opens a graphics device based on the filename extension p2binom Probability functions for the sum of two independent binomials padZero Pad a vector of numbers with zeros parseJob Parses a collection of elements into (almost) equal sized groups pbb The Beta-Binomial Distribution pcbinom A continuous version of the binomial cdf pkbinom Probability functions for the sum of k independent binomials plapply Simple parallelization of lapply plotFun Plot one or more functions on a single plot PowerData An example of power data pvar Prints the name and value of one or more objects qbb The Beta-Binomial Distribution rbb And numerous others (space limits reporting).",
      "laborHours": 0,
      "languages": [],
      "name": "Smisc - A collection of miscellaneous functions",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/Smisc/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/Smisc",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The core of the modeling platform is an extensible block library for the MATLAB/Simulink software suite. The platform enables true co-simulation (interaction at each simulation time step) with NREL's state-of-the-art modeling tools and other energy modeling software.",
      "laborHours": 0,
      "languages": [],
      "name": "Campus Energy Model for Control and Performance Validation",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/CampusEnergyModeling/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Small pieces of software that wraps the FAST model so that FAST can be integrated to WISDEM.",
      "laborHours": 0,
      "languages": [],
      "name": "Aeroelastic Systems Engineering Module",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/aeroelasticse",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "FESTR is a modeling tool for calculating spectroscopic-quality synthetic outputs (e.g., spectra and images) based on (in general) the time evolutions of 3-D spatial distributions of materials characterized by their chemical composition, temperature, and density conditions. FESTR performs raytracing across unstructured meshes, builds intrinsic optical properties of mixed materials by performing equation-of-state lookups in external data, and then solves the radiation-transport equation along rays to obtain emergent time and space resolved synthetic spectra. These results can be further processed into time and/or space integrated spectra, as well as into spectral-band-integrated synthetic images, radiated power histories, and total radiated energy values. FESTR is also applicable to spatial reconstructions of material properties via the analysis of experimental data.",
      "laborHours": 0,
      "languages": [],
      "name": "FESTR, Version 0.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LANLhakel/FESTR/blob/d5a8941f2e74fb0adc8b12a90180b299b95dc93e/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LANLhakel/FESTR",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This package contains statistical routines for extracting features from multivariate time-series data which can then be used for subsequent multivariate statistical analysis to identify patterns and anomalous behavior. It calculates local linear or quadratic regression model fits to moving windows for each series and then summarizes the model coefficients across user-defined time intervals for each series. These methods are domain agnostic-but they have been successfully applied to a variety of domains, including commercial aviation and electric power grid data.",
      "laborHours": 0,
      "languages": [],
      "name": "qFeature",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/qFeature/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL/qFeature",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Enables applications to emit log information into an output file and produced a structured visual summary of the log data, as well as various statistical analyses of it. This makes it easier for developers to understand the behavior of their applications.",
      "laborHours": 0,
      "languages": [],
      "name": "Sight Version 0.1",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.1",
            "name": "GPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/bronevet/sight",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "joiner@ameslab.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "As the rate, sophistication, and potential damage of cyber attacks continue to grow, the latency of human-speed analysis and response is becoming increasingly costly. Intelligent response to detected attacks and other malicious activity requires both knowledge of the characteristics of the attack as well as how resources involved in the attack related to the mission of the organization. Cydime fills this need by estimating a key component of intrusion detection and response automation: the relationship type and strength between the target organization and the potential attacker.",
      "laborHours": 0,
      "languages": [],
      "name": "Cyber Dynamic Impact Modeling Engine",
      "organization": "Ames Laboratory (AMES)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Ames-Laboratory-Cyber-Group/Cydime",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Ames Laboratory (AMES)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "DICe is an open source digital image correlation (DIC) tool intended for use as a module in an external application or as a standalone analysis code. It's primary capability is computing full-field displacements and strains from sequences of digital These images are typically of a material sample undergoing a materials characterization experiment, but DICe is also useful for other applications (for example, trajectory tracking). DICe is machine portable (Windows, Linux and Mac) and can be effectively deployed on a high performance computing platform. Capabilities from DICe can be invoked through a library interface, via source code integration of DICe classes or through a graphical user interface.",
      "laborHours": 0,
      "languages": [],
      "name": "Digital Image Correlation Engine",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dicengine/dice",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Many simulation software produce data in the form of a set of field values or of a set of particle positions. (one such example is that of particle-in-cell codes, which produce data on the electromagnetic fields that they simulate.) However, each particular software uses its own particular format and layout, for the output data. This makes it difficult to compare the results of different simulation software, or to have a common visualization tool for these results. However, a standardized layout for fields and particles has recently been developed: the openPMD format ( HYPERLINK \"http://www.openpmd.org/\"www.openpmd.org) This format is open- source, and specifies a standard way in which field data and particle data should be written. The openPMD format is already implemented in the particle-in-cell code Warp (developed at LBL) and in PIConGPU (developed at HZDR, Germany). In this context, the proposed software (openPMD-viewer) is a Python package, which allows to access and visualize any data which has been formatted according to the openPMD standard. This package contains two main components: - a Python API, which allows to read and extract the data from a openPMD file, so as to be able to work with it within the Python environment. (e.g. plot the data and reprocess it with particular Python functions) - a graphical interface, which works with the ipython notebook, and allows to quickly visualize the data and browse through a set of openPMD files. The proposed software will be typically used when analyzing the results of numerical simulations. It will be useful to quickly extract scientific meaning from a set of numerical data.",
      "laborHours": 0,
      "languages": [],
      "name": "openPMD-viewer",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/openPMD/openPMD-viewer/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/openPMD/openPMD-viewer",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "VOLTTRON™ is an agent execution platform providing services to its agents that allow them to easily communicate with physical devices and other resources. VOLTTRON™ delivers an innovative distributed control and sensing software platform that supports modern control strategies, including agent-based and transaction-based controls. It enables mobile and stationary software agents to perform information gathering, processing, and control actions. VOLTTRON™ can independently manage a wide range of applications, such as HVAC systems, electric vehicles, distributed energy or entire building loads, leading to improved operational efficiency.",
      "laborHours": 0,
      "languages": [],
      "name": "Volttron version 3.x",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/VOLTTRON/volttron/blob/3.x/TERMS.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/VOLTTRON/volttron/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "\"XTL Converter\" is a short Python script for electron microscopy simulation. The program takes an input crystal file in the VESTA *.XTL format and converts it to a text format readable by the multislice simulation program ìSTEM. The process of converting a crystal *.XTL file to the format used by the ìSTEM simulation program is quite tedious&#894; it generally requires the user to select dozens or hundreds of atoms, rearranging and reformatting their position. Header information must also be reformatted to a specific style to be read by ìSTEM. \"XTL Converter\" simplifies this process, saving the user time and allowing for easy batch processing of crystals.",
      "laborHours": 0,
      "languages": [],
      "name": "XTL Converter",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/stevenspurgeon/xtl-converter/blob/master/License",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/stevenspurgeon/xtl-converter",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Cantera is a suite of object-oriented software tools for problems involving chemical kinetics, thermodynamics, and/or transport processes. It is a multi-organizational effort to create and formulate high quality 0D and 1D constitutive modeling tools for reactive transport codes.Institutions involved with the effort include Sandia, MIT, Colorado School of Mines, U. Texas, NASA, and Oak Ridge National Labs. Specific to Sandia's contributions, the Cantera Electrolyte Thermo Objects (CETO) packages is comprised of add-on routines for Cantera that handle electrolyte thermochemistry and reactions within the overall Cantera package. Cantera is a C++ Cal Tech code that handles gas phase species transport, reaction, and thermodynamics. With this addition, Cantera can be extended to handle problems involving liquid phase reactions and transport in electrolyte systems, and phase equilibrium problemsinvolving concentrated electrolytes and gas/solid phases. A full treatment of molten salt thermodynamics and transport has also been implemented in CETO. The routines themselves consist of .cpp and .h files containing C++ objects that are derived from parent Cantera objects representing thermodynamic functions. They are linked unto the main Cantera libraries when requested by the user. As an addendum to the main thermodynamics objects, several utility applications are provided. The first is multiphase Gibbs free energy minimizer based on the vcs algorithm, called vcs_cantera. This code allows for the calculation of thermodynamic equilibrium in multiple phases at constant temperature and pressure. Note, a similar code capability exists already in Cantera. This version follows the same algorithm, but gas a different code-base starting point, and is used as a research tool for algorithm development. The second program, cttables, prints out tables of thermodynamic and kinetic information for thermodynamic and kinetic objects within Cantera. This program serves as a \"Get the numbers out\" utility for Cantera, and as such it is very useful as a verification tool. These add-on utilities are encapsulated into a directory structure named cantera_apps, whose installation uses autoconf and also utilizes Cantera's application environment (i.e., they utilize Cantera as a library).",
      "laborHours": 0,
      "languages": [],
      "name": "Cantera and Cantera Electrolyte Thermodynamics Objects",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Cantera/cantera",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Sandia's Dakota software (available at http://dakota.sandia.gov) supports science and engineering transformation through advanced exploration of simulations. Specifically it manages and analyzes ensembles of simulations to provide broader and deeper perspective for analysts and decision makers. This enables them to: (1) enhance understanding of risk, (2) improve products, and (3) assess simulation credibility. In its simplest mode, Dakota can automate typical parameter variation studies through a generic interface to a computational model. However, Dakota also delivers advanced parametric analysis techniques enabling design exploration, optimization, model calibration, risk analysis, and quantification of margins and uncertainty with such models. It directly supports verification and validation activities. The algorithms implemented in Dakota aim to address challenges in performing these analyses with complex science and engineering models from desktop to high performance computers.",
      "laborHours": 0,
      "languages": [],
      "name": "Design Analysis Kit for Optimization and Terascale Applications 6.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pemryan/DAKOTA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Kokkos library implements thread-parallel execution policies and shared-memory multidimensional array data structures that enable applications and domain libraries to develop computational kernels that are performance portable across multicore-CPU and manycore-accelerator (e.g. GPU) computing architectures.",
      "laborHours": 0,
      "languages": [],
      "name": "Kokkos Version 2.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/kokkos/kokkos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Sandia National Laboratories has modified Simulating WAves Nearshore (SWAN), the Delft University of Technology code,, to include functionality to better model wave energy converters (WECs). The code modified by SNL has been named SNL-SWAN. SNL-SWAN includes a frequency dependent WEC Module that builds upon the traditional obstacle module in SWAN. In SNL-SWAN, a frequency dependent transmission coefficient is calculated to model power absorbed by WEC devices. The power transmission coefficients are calculated based on the WEC's power performance, which is defined by the user in the input text files. Two methods of defining WEC power performance have been implemented: a user-specified power matrix, and a user-specified relative capture width. These methods allow the user to define the WEC's frequency dependent energy absorption as a function of period and/or wave height. SWAN test cases were run to verify the compiled code's functionality, and verification of the frequency dependent WEC Module in SNL-SWAN has also been performed. SNL-SWAN code is will be released as open source code and will be made publicly available.",
      "laborHours": 0,
      "languages": [],
      "name": "SNL-SWAN",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/SNL-WaterPower/SNL-SWAN",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "UseLATEX.cmake is a collection of script functions and examples for building LaTeX documents. It simplifies the process of building LaTeX documents, which requires the execution of multiple programs and the management of several input files. UseLATEX.cmake also provides several options to customize the LaTeX build process.",
      "laborHours": 0,
      "languages": [],
      "name": "UseLATEX.cmake",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/kmorel/UseLATEX",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "VTK-m is a toolkit of scientific visualization algorithms for emerging processor architectures. VTK-m supports the fine-grained concurrency for data analysis and visualization algorithms required to drive extreme scale computing by providing abstract models for data and execution that can be applied to a variety of algorithms across many different processor architectures.",
      "laborHours": 0,
      "languages": [],
      "name": "VTK-m",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.kitware.com/vtk/vtk-m",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Some moment methods for kinetic equations are complicated and take time to develop. Over the course of a couple years, this software was developed to test different closures on standard test problems in the literature. With this software, researchers in the field of moment closures will be able to rapidly test new methods.",
      "laborHours": 0,
      "languages": [],
      "name": "Moment Closures on Two-Dimensional Cartesian Grids",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ckrisgarrett/closures-2d",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ckrisgarrett/closures-2d",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "An automated drift time extraction and computed associated collision cross section software tool for small molecule analysis with ion mobility spectrometry-mass spectrometry (IMS-MS). The software automatically extracts drift times and computes associated collision cross sections for small molecules analyzed using ion mobility spectrometry-mass spectrometry (IMS-MS) based on a target list of expected ions provided by the user.",
      "laborHours": 0,
      "languages": [],
      "name": "IMS - MS Data Extractor",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/PNNL-Comp-Mass-Spec/PIXIE/blob/master/PNNL%20OSS%20License_citation.doc",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/PIXIE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "nHHD is a C++ library to decompose a flow field into three components exhibiting specific types of behaviors. These components allow more targeted analysis of flow behavior and can be applied to a variety of application areas.",
      "laborHours": 0,
      "languages": [],
      "name": "The Natural Helmholtz-Hodge Decomposition",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/bhatiaharsh/naturalHHD",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "To understand the performance of parallel programs, developers need to be able to relate performance measurement data with context information, such as the call path / line numbers or iteration numbers where measurements were taken. Caliper provides a generic way to specify and collect multi-dimensional context information across the software stack, and provide ti to third-party measurement tools or write it into a file or database in the form of context streams.",
      "laborHours": 0,
      "languages": [],
      "name": "Caliper Context Annotation Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/Caliper/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/Caliper",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "LCMSnet communicates with, controls and orchestrates devices for high pressure liquid chromatography. In developing cutting edge chromatographic methods it was apparent that components from different manufacturers were required. Autosamplers, valves, and pumps all had to be controlled and configured to run unattended and in the highest throughput possible. The power of LCMSnet is the ability so build methods in a simple step by step fashion and then the software uses a scheduling algorithm to run the devices as efficiently as possible without crashing critical functions. This latest iteration of the software allows for modeling of the valves and incorporates logic that will report if a fluid path is undesirable. LCMSnet has reduced method development time from days to minutes and allows the ability to check configurations before any valves or pumps are connected.",
      "laborHours": 0,
      "languages": [],
      "name": "LCMSNet v. 3.0",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/PNNL-Comp-Mass-Spec/LCMSNet",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/LCMSNet",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "BGQNCL is a library to monitor and record network performance counters on the 5D torus interconnection network of IBM's Blue Gene/Q platform.",
      "laborHours": 0,
      "languages": [],
      "name": "Blue Gene/Q Network Performance Counters Monitoring Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/bgqncl",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Dragonview is an interactive visual analytics tool to visualize the nodes and links of a supercomputer that uses the dragonfly topology for its interconnection network. It can be used to map different data such as number of packets or bytes or stalls on the network links and job IDs or other on-node metrics on the router or node.",
      "laborHours": 0,
      "languages": [],
      "name": "Dragonview",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/DragonView",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Graphator is a collection of relatively simple sequential programs that generate communication graphs/matrices for commonly occurring patterns in parallel programs. Currently, there is support for five communication patterns: two-dimensional 4-point stencil, four-dimensional 8-point stencil, all-to-alls over sub-communicators, random near-neighbor communication, and near-neighbor communication.",
      "laborHours": 0,
      "languages": [],
      "name": "Communication Graph Generator for Parallel Programs",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/graphator",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "AriesNCL is a library to monitor and record network router tile performance counters on the Aries router of Cray's Cascade/XC30 platform.",
      "laborHours": 0,
      "languages": [],
      "name": "Aries Network Performance Counters Monitoring Library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/ariesncl",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Damselfly is a model-based parallel network simulator. It can simulate communication patterns of High Performance Computing applications on different network topologies. It outputs steady-state network traffic for a communication pattern, which can help in studying network congestion and its impact on performance.",
      "laborHours": 0,
      "languages": [],
      "name": "Damselfly Network Simulator",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/damselfly",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Most of the software related to file system are written for conventional local file system, they are serialized and can't take advantage of the benefit of a large scale parallel file system. \"pcircle\" software builds on top of ubiquitous MPI in cluster computing environment and \"work-stealing\" pattern to provide a scalable, high-performance suite of file system tools. In particular - it implemented parallel data copy and parallel data checksumming, with advanced features such as async progress report, checkpoint and restart, as well as integrity checking.",
      "laborHours": 0,
      "languages": [],
      "name": "pcircle - A Suite of Scalable Parallel File System Tools",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-TechInt/pcircle",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "The visualization enables the simulation analyst to see changes in the frequency through time and space. With this technology, the analyst has a bird's eye view of the frequency at loads and generators as the simulated power system responds to the loss of a generator, spikes in load, and other contingencies. The significance of a contingency to the operation of an electrical power system depends critically on how the resulting tansients evolve in time and space. Consequently, these dynamic events can only be understood when seen in their proper geographic context. this understanding is indispensable to engineers working on the next generation of distributed sensing and control systems for the smart grid. By making possible a natural and intuitive presentation of dynamic behavior, our new visualization technology is a situational-awareness tool for power-system engineers.",
      "laborHours": 0,
      "languages": [],
      "name": "Geographic Visualization of Power-Grid Dynamics",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ssrangan/VizPower/blob/master/Open%20Source%20Software%20License%20(Permissive).pdf",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ssrangan/VizPower",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SSCA1-K1 is a parallel implementation of kernel 1 of the SSCA1 benchmark suite released by the DARPA HPCS program. This kernel is able to run in parallel on a distributed shared memory system at extreme scales using OpenSHMEM.",
      "laborHours": 0,
      "languages": [],
      "name": "SSCA1-K1",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.com/MattBBaker/ssca1",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Intrepid is a library of interoperable tools for compatible discretizations of Partial Differential Equations (PDEs).Current version is intended primarily for application developers who want to reuse large parts of their existing code frameworks such as I/O, data structures, assembly routines, etc. while gaining access to advanced discretization capabilities provided by Intrepid. Intrepid2 is a performance portable version of Intrepid, that requires all input data types be Kokkos (performance-portability library from Trillions) multidimentional arrays. this restriction is needed for providing performance portability in Intrepid2 and break backward-compatibility of Intrepid.",
      "laborHours": 0,
      "languages": [],
      "name": "INteroperable Tools for Rapid dEveloPment of compatible Discretizations",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/intrepid/Copyright.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This code implements the GloVe algorithm for learning word vectors from a text corpus. It uses a modern C++ approach. This algorithm is described in the open literature in the referenced paper by Pennington, Jeffrey, Richard Socher, and Christopher D. Manning.",
      "laborHours": 0,
      "languages": [],
      "name": "GloVe C++ v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/joncox123/GloveCpp",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "ryan.morrone@netl.doe.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "RVA is a plugin developed for the 64-bit Windows version of the ParaView 3.14 visualization package. RVA is designed to provide support in the visualization and analysis of complex reservoirs being managed using multi-fluid EOR techniques. RVA, for Reservoir Visualization and Analysis, was developed at the University of Illinois at Urbana-Champaign, with contributions from the Illinois State Geological Survey, Department of Computer Science and National Center for Supercomputing Applications. RVA was designed to utilize and enhance the state-of-the-art visualization capabilities within ParaView, readily allowing joint visualization of geologic framework and reservoir fluid simulation model results. Particular emphasis was placed on enabling visualization and analysis of simulation results highlighting multiple fluid phases, multiple properties for each fluid phase (including flow lines), multiple geologic models and multiple time steps. Additional advanced functionality was provided through the development of custom code to implement data mining capabilities. The built-in functionality of ParaView provides the capacity to process and visualize data sets ranging from small models on local desktop systems to extremely large models created and stored on remote supercomputers. The RVA plugin that we developed and the associated User Manual provide improved functionality through new software tools, and instruction in the use of ParaView-RVA, targeted to petroleum engineers and geologists in industry and research. The RVA web site (http://rva.cs.illinois.edu) provides an overview of functions, and the development web site (https://github.com/shaffer1/RVA) provides ready access to the source code, compiled binaries, user manual, and a suite of demonstration data sets. Key functionality has been included to support a range of reservoirs visualization and analysis needs, including: sophisticated connectivity analysis, cross sections through simulation results between selected wells, simplified volumetric calculations, global vertical exaggeration adjustments, ingestion of UTChem simulation results, ingestion of Isatis geostatistical framework models, interrogation of joint geologic and reservoir modeling results, joint visualization and analysis of well history files, location-targeted visualization, advanced correlation analysis, visualization of flow paths, and creation of static images and animations highlighting targeted reservoir features.",
      "laborHours": 0,
      "languages": [],
      "name": "RVA: A Plugin for ParaView 3.14",
      "organization": "National Energy Technology Laboratory (NETL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/shaffer1/RVA/blob/master/Copyright.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/shaffer1/RVA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Energy Technology Laboratory (NETL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PyTrilinos is a Python interface to selected Trilinos packages. This makes Trilinos linear algebra classes, linear solvers, preconditioners, nonlinear solvers, eigensolvers, and tools available to Python programmers. This broadens the user base of Trilinos, and facilitates rapid prototyping of scientific codes and interactive manipulation of large, distributed data sets.",
      "laborHours": 0,
      "languages": [],
      "name": "PyTrilinos",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The DOE has funded Sandia National Labs (SNL) to develop an open-source modeling tool to guide the design and layout of marine hydrokinetic (MHK) arrays to maximize power production while minimizing environmental effects. This modeling framework simulates flows through and around MHK arrays while quantifying environmental responses. As an augmented version of US EPA's Environmental Fluid Dynamics Code (EFDC), SNL-EFDC includes: (1) a new module that simulates energy conversion (momentum withdrawal) by MHK devices with commensurate changes in the turbulent kinetic energy and its dissipation rate, (2) new, advanced sediment dynamics routines, and (3) augmented water quality modules.",
      "laborHours": 0,
      "languages": [],
      "name": "Sandia National Laboratories Environmental Fluid Dynamics Code V. 1 0.0 (Beta)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/SNL-WaterPower/SNL-Delft3D-CEC",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The basic matrix library (bml) is a collection of various matrix data formats (in dense and sparse) and their associated algorithms for basic matrix operations.",
      "laborHours": 0,
      "languages": [],
      "name": "Basic Matrix Library (bml), Version 0.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/bml/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/qmmd/bml",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This code is a set of global sums to support the paper \"Computational Reproducibility for Production Physics Applications\" submitted to the Numerical Reproducibility at Exascale (NRE 2015) workshop at the 2015 Supercomputing conference, Nov. 20, 2015",
      "laborHours": 0,
      "languages": [],
      "name": "GlobalSums, Version 1.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/GlobalSums",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PV_LIB comprises a library of Matlab? code for modeling photovoltaic (PV) systems. Included are functions to compute solar position and to estimate irradiance in the PV system's plane of array, cell temperature, PV module electrical output, and conversion from DC to AC power. Also included are functions that aid in determining parameters for module performance models from module characterization testing. PV_LIB is open source code primarily intended for research and academic purposes. All algorithms are documented in openly available literature with the appropriate references included in comments within the code.",
      "laborHours": 0,
      "languages": [],
      "name": "PV_LIB Toolbox v. 1.3",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/SandiaTestAccount/PVLIB_Matlab",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "WNTR is a python package designed to simulate and analyze resilience of water distribution networks. The software includes: - Pressure driven and demand driven hydraulic simulation - Water quality simulation to track concentration, trace, and water age - Conditional controls to simulate power outages - Models to simulate pipe breaks - A wide range of resilience metrics - Analysis and visualization tools",
      "laborHours": 0,
      "languages": [],
      "name": "Water Network Tool for Resilience v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usepa/wntr",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Single-Sided Messaging (SSM) is a portable, multitransport networking library that enables applications to leverage potential one-sided capabilities of underlying network transports. It also provides desirable semantics that services for highperformance, massively parallel computers can leverage, such as an explicit cancel operation for pending transmissions, as well as enhanced matching semantics favoring large numbers of buffers attached to a single match entry. This release supports TCP/IP, shared memory, and Infiniband.",
      "laborHours": 0,
      "languages": [],
      "name": "Single Sided Messaging v. 0.6.6",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/matthewcurry/single-sided-messaging",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Mobile digital signage software optimized for giving tours and trade shows.",
      "laborHours": 0,
      "languages": [],
      "name": "DiTour OSS",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ditour/ditour/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ditour/ditour",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "VTK is a software library used for scientific visualization tasks. My specific contribution is a new class that improves the I/O performance when reading certain input files.",
      "laborHours": 0,
      "languages": [],
      "name": "vtkPNetCDFPOPReader: a new C++ class for Visualization Toolkit (VTK)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.vtk.org/licensing/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.kitware.com/vtk/vtk/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Sirocco is a parallel storage system under development, designed for write-intensive workloads on large-scale HPC platforms. It implements a keyvalue object store on top of a set of loosely federated storage servers that cooperate to ensure data integrity and performance. It includes support for a range of different types of storage transactions. This software release constitutes a conformant storage server, along with the client-side libraries to access the storage over a network.",
      "laborHours": 0,
      "languages": [],
      "name": "Sirocco Storage Server v. pre-alpha 0.1",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/matthewcurry/sirocco-release/blob/master/COPYING",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/matthewcurry/sirocco-release",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "minimega is an emulytics platform for creating testbeds of networked devices. The platoform consists of easily deployable tools to facilitate bringing up large networks of virtual machines including Windows, Linux, and Android. minimega allows experiments to be brought up quickly with almost no configuration. minimega also includes tools for simple cluster, management, as well as tools for creating Linux-based virtual machines. This release of minimega includes new emulated sensors for Android devices to improve the fidelity of testbeds that include mobile devices. Emulated sensors include GPS and",
      "laborHours": 0,
      "languages": [],
      "name": "minimega v. 3.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandia-minimega/minimega",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GridDyn is a part of power grid simulation toolkit. The code is designed using modern object oriented C++ methods utilizing C++11 and recent Boost libraries to ensure compatibility with multiple operating systems and environments.",
      "laborHours": 0,
      "languages": [],
      "name": "Dynamic Power Grid Simulation",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/GridDyn/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/GridDyn",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Stride Search provides a flexible tool for detecting storms or other extreme climate events in high-resolution climate data sets saved on uniform latitude-longitude grids in standard NetCDF format. Users provide the software a quantitative description of a meteorological event they are interested in; the software searches a data set for locations in space and time that meet the user’s description. In its first stage, Stride Search performs a spatial search of the data set at each timestep by dividing a search domain into circular sectors of constant geodesic radius. Data from a netCDF file is read into memory for each circular search sector. If the data meet or exceed a set of storm identification criteria (defined by the user), a storm is recorded to a linked list. Finally, the linked list is examined and duplicate detections of the same storm are removed and the results are written to an output file. The first stage’s output file is read by a second program that builds storm. Additional identification criteria may be applied at this stage to further classify storms. Storm tracks are the software’s ultimate output and routines are provided for formatting that output for various external software libraries for plotting and tabulating data.",
      "laborHours": 0,
      "languages": [],
      "name": "Stride Search v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pbosler/StrideSearch",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "In the cyber security operations of a typical organization, data from multiple sources are monitored, and when certain conditions in the data are met, an alert is generated in an alert management system. Analysts inspect these alerts to decide if any deserve promotion to an event requiring further scrutiny. This triage process is manual, time-consuming, and detracts from the in-depth investigation of events. We have created a software system that uses supervised machine learning to automatically prioritize these alerts. In particular we utilize active learning to make efficient use of the pool of unlabeled alerts, thereby improving the performance of our ranking models over passive learning. We have demonstrated the effectiveness of our system on a large, real-world dataset of cyber security alerts.",
      "laborHours": 0,
      "languages": [],
      "name": "Alert Triage v 0.1 beta",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/alert-triage",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This application can determine the performance and chemical behavior of batteries in 1D when they are cycled. With CanTrilBat, we are developing predictive phenomenological models for battery systems to predict operating performance and rate limiting steps in the performance of battery models. Particular attention is paid to primary and secondary chemistry mechanisms, such as the thermal runaway mechanisms experienced in secondary lithium ion batteries or self-discharge reaction mechanism that all batteries experience to one extent or another. The first application of this model has been for modeling the performance of thermal batteries. However, an implementation for secondary ion batteries is next. CanTrilBat applications solves transient problems involving batteries. It is a 1-D application that represents 3-D physical systems that can be reduced using the porous flow approximation for the anode, cathode, and separator. A control volume formulation is used to track conserved quantities. An operator-split approach is used to calculate the chemistry, diffusion and electronic transport that occurs within cathode and anode particles, allowing for the reduction in code complexity. All jacobian operations in CanTrilBat utilize numerical jacobians. A home grown predictor corrector scheme is used for time step control, and a home grown newton solver is used to relax the equations at each time step. Trilinos is used to solve for the resulting linear systems equation A block text input format is used to initialize options for the CanTriBat program. Within this block are the names of several XML input files, which specify the chemistry mechanism. These XML input files are read by low level Cantera routines, and serve to initialize the electrode and electrolyte chemistry mechanisms and transport properties. A GUI implementation has been contracted out to a university professor, but has not been implemented yet. It?s expected that CanTriBat will have the capability to do adaptive grid refinement in later versions. Grids will be halved based on an complicated set of heuristic criteria, based on how well the mesh captures changes to the first and second derivatives of selected solution components. Primary emphasis is given towards converged profiles for IV performance.",
      "laborHours": 0,
      "languages": [],
      "name": "CanTrilBat and Cantera_apps v1.0 beta",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Cantera/cantera",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "TraceR is a trace reply tool built upon the ROSS-based CODES simulation framework. TraceR can be used for predicting network performances and understanding network behavior by simulating messaging in High Performance Computing applications on interconnection networks.",
      "laborHours": 0,
      "languages": [],
      "name": "Trace Replay and Network Simulation Tool",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/tracer",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Albany code is a general-purpose finite element code for solving partial differential equations (PDEs). Albany is a research code that demonstrates how a PDE code can be built by interfacing many of the open-source software libraries that are released under Sandia's Trilinos project. Part of the mission of Albany is to be a testbed for new Trilinos libraries, to refine their methods, usability, and interfaces. Albany includes hooks to optimization and uncertainty quantification algorithms, including those in Trilinos as well as those in the Dakota toolkit. Because of this, Albany is a desirable starting point for new code development efforts that wish to make heavy use of Trilinos. Albany is both a framework and the host for specific finite element applications. These applications have project names, and can be controlled by configuration option when the code is compiled, but are all developed and released as part of the single Albany code base, These include LCM, QCAD, FELIX, Aeras, and ATO applications.",
      "laborHours": 0,
      "languages": [],
      "name": "Albany v. 3.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gahansen/Albany",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PyGSTi is an implementation of Gate Set Tomography in the python programming language. Gate Set Tomography (GST) is a theory and protocol for simultaneously estimating the state preparation, gate operations, and measurement effects of a physical system of one or many quantum bits (qubits). These estimates are based entirely on the statistics of experimental measurements, and their interpretation and analysis can provide a detailed understanding of the types of errors/imperfections in the physical system. In this way, GST provides not only a means of certifying the \"goodness\" of qubits but also a means of debugging (i.e. improving) them.",
      "laborHours": 0,
      "languages": [],
      "name": "Python GST Implementation v. 0.9 beta",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pyGSTio/pyGSTi",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software extends the Cray Chapel runtime to use directly Sandia's Qthreads lightweight threading library and Sandia's Portals4 lightweight communication reference library.",
      "laborHours": 0,
      "languages": [],
      "name": "Lightweight Threading and Communication Shims for Chapel v. 1.0 Beta",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/chapel-lang/chapel/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chapel-lang/chapel",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A processor emulator and a suite of benchmark applications have been developed to assist in characterizing the performance of data-centric workloads on current and future computer architectures. Some of the applications have been collected from other open source projects. For more details on the emulator and an example of its usage, see reference [1].",
      "laborHours": 0,
      "languages": [],
      "name": "Processor Emulator with Benchmark Applications",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://bitbucket.org/PerMA/emulator_st/src/2969fa5dab7e1b0ffe425869bd27158242c2ee27/COPYING",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/perma/emulator_st",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This code is a data parse for preparing output from the Qspp agent-based stochastic simulation model for plotting in Excel. This code is specific to a set of simulations that were run for the purpose of preparing data for a publication. It is necessary to make this code open-source in order to publish the model code (Qspp), which has already been released. There is a necessity of assuring that results from using Qspp for a publication",
      "laborHours": 0,
      "languages": [],
      "name": "Parser for Sabin-to-Mahoney Transition Model of Quasispecies Replication",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://www.github.com/carolzhou/virus",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "OLCF's ATlas 1 & 2 filesystems use disk drive controllers from a company named Data Direct Networks. The vendor-provided monitoring software is sufficient for a small number of controllers, but is ill-suited for simultaneous monitoring of all the controllers used by OLCF. This tool provides a means of gathering performance data from multiple controllers, collating it and storing it in a database for querying by other tools.",
      "laborHours": 0,
      "languages": [],
      "name": "DDNTool",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL-TechInt/DDNTool_v2/blob/master/License.pdf",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-TechInt/DDNTool_v2",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Simple Ontology Format (SOFT) library and file format specification provides a set of simple tools for developing and maintaining ontologies. The library, implemented as a perl module, supports parsing and verification of the files in SOFt format, operations with ontologies (adding, removing, or filtering of entities), and converting of ontologies into other formats. SOFT allows users to quickly create ontologies using only a basic text editor, verify it, and portray it in a graph layout system using customized styles.",
      "laborHours": 0,
      "languages": [],
      "name": "Simple Ontology Format (SOFT)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/sorokine/SOFT/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sorokine/SOFT",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Atom Trajectory Viewer is a visualization tool developed to enable interactive exploration of atomic trajectories and corresponding statistics in molecular dynamics.",
      "laborHours": 0,
      "languages": [],
      "name": "Atom Trajectory Viewer",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/bhatiaharsh/TrajectoryExplorer",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software is the interface between LCIO (lcio.desy.de) and Julia (julialang.org), such that event records in the LCIO format can be analyzed with Julia and its libraries.",
      "laborHours": 0,
      "languages": [],
      "name": "LCIO Julia Bindings",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/jstrube/LCIO.jl/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jstrube/LCIO.jl",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "CoMD-Em is a software implementation suite of the CoMD [4] proxy app using different emerging programming models. It is intended to analyze the features and capabilities of novel programming models that could help ensure code and performance portability and scalability across heterogeneous platforms while improving programmer productivity. Another goal is to provide the authors and venders with some meaningful feedback regarding the capabilities and limitations of their models. The actual application is a classical molecular dynamics (MD) simulation using either the Lennard-Jones method (LJ) or the embedded atom method (EAM) for primary particle interaction. The code can be extended to support alternate interaction models. The code is expected ro run on a wide class of heterogeneous hardware configurations like shard/distributed/hybrid memory, GPU's and any other platform supported by the underlying programming model.",
      "laborHours": 0,
      "languages": [],
      "name": "CoMD Implementation Suite in Emerging Programming Models",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/CoMD-Chapel/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/CoMD-Chapel",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software provides a web interface means to upload, generate, analyze, manage and store DNA fragment length polymorphism data. This tool can easily be configured to accommodate other bio data.",
      "laborHours": 0,
      "languages": [],
      "name": "ReteBiome",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/ReteBiome/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/ReteBiome",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "VTK-m is a toolkit of scientific visualization algorithms for emerging processor architectures. VTK-m supports the fine-grained concurrency for data analysis and visualization algorithms required to drive extreme scale computing by providing abstract models for data and execution that can be applied to a variety of algorithms across many different processor architectures.",
      "laborHours": 0,
      "languages": [],
      "name": "VTK-m v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.kitware.com/vtk/vtk-m",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Pecos is a python package designed to perform quality control analysis on time series data for system operations. The software loads time indexed databases, performs a series of quality control tests defined by the user, and creates automated reports which include summary statistics, tables, and graphics.",
      "laborHours": 0,
      "languages": [],
      "name": "Pecos v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/sandialabs/pecos/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/pecos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Sandia's Lightweight Distributed Metric Service (LDMS) is a data collection and transport system used at Livermore Computing to gather performance data across the center. While Sandia has a set of plugins available, they do not include all the data we need to capture. The ECAC plugin that we have developed enables collection of the Error Detection and Correction (EDAC) counters.",
      "laborHours": 0,
      "languages": [],
      "name": "Error Detection and Correction LDMS Plugin Version 1.0",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ovis-hpc/ovis",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "libROM is a library that implements order reduction via singular value decomposition (SVD) of sampled state vectors. It implements 2 parallel, incremental SVD algorithms and one serial, non-incremental algorithm. It also provides a mechanism for adaptive sampling of basis vectors.",
      "laborHours": 0,
      "languages": [],
      "name": "Reduced Order Model Basis Vector Generation: Generates Basis Vectors fro ROMs",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/libROM/blob/master/README_BSD_NOTICE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/libROM",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Calculation of thermal and optical properties of glass, windows and shades. Calculation code only, no GUI.",
      "laborHours": 0,
      "languages": [],
      "name": "Berkeley Lab WINDOW Calc Engine (CalcEngine) v1",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LBNL-ETA/Windows-CalcEngine/blob/master/Legal.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LBNL-ETA/Windows-CalcEngine",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Modern scientific and engineering simulations track the time evolution of billions of elements. For such large runs, storing most time steps for later analysis is not a viable strategy. It is far more efficient to analyze the simulation data while it is still in memory. The developers present a novel design for running multiple codes in situ: using coroutines and position-independent executables they enable cooperative multitasking between simulation and analysis, allowing the same executables to post-process simulation output, as well as to process it on the fly, both in situ and in transit. They present Henson, an implementation of our design, and illustrate its versatility by tackling analysis tasks with different computational requirements. Our design differs significantly from the existing frameworks and offers an efficient and robust approach to integrating multiple codes on modern supercomputers. The presented techniques can also be integrated into other in situ frameworks.",
      "laborHours": 0,
      "languages": [],
      "name": "Henson v1.0",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/mrzv/henson/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/mrzv/henson",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Collabmaps is a tool for generating an interactive map that can be displayed in a web browser to visualize connections between research institutions publishing on specific scientific topics. It also highlights the most highly cited papers and top authors at each institution.",
      "laborHours": 0,
      "languages": [],
      "name": "Collabmaps",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/Collabmaps",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Sandia OpenSHMEM is an implementation of the OpenSHMEM Standard over the Portals 4 Networking API and the OpenFabrics Interface (OFI). Sandia OpenSHMEM is designed to be a low-overhead implementation of the OpenSHMEM standard which takes advantage of the many features of the Portals 4 specification.",
      "laborHours": 0,
      "languages": [],
      "name": "Sandia OpenSHMEM",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/Sandia-OpenSHMEM/SOS/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Sandia-OpenSHMEM/SOS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SpokeDarts software produces sample distributions with blue noise characteristics over arbitrary-dimensional spaces. More generally, spoke darts enable efficient searches and tailored distributions over high dimensional spaces. The software includes underlying geometric routines which are useful in their own right, such as efficient neighbor searches, random points on a sphere, and line-sphere intersections.",
      "laborHours": 0,
      "languages": [],
      "name": "SpokeDarts",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/samitch/SpokeDartsPublic/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/samitch/SpokeDartsPublic",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The WEC Design Response Toolbox (WDRT) is a numerical toolbox for design-response analysis of wave energy converters (WECs). The WDRT was developed during a series of efforts to better understand WEC survival design. The WDRT has been designed as a tool for researchers and developers, enabling the straightforward application of statistical and engineering methods. The toolbox includes methods for short-term extreme response, environmental characterization, long-term extreme response and risk analysis, fatigue, and design wave composition.",
      "laborHours": 0,
      "languages": [],
      "name": "WEC Design Response Toolbox v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WEC-Sim/WDRT",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The main purpose of the xSDKTrilinos package is to provide an interoperability layer that enables easy installation and combined usage of the IDEAS libraries, including PETSc, Hypre, and SuperLU. The package can be used for any project that uses or will use different libraries, such as Trilinos, PETSc, HYPRE and SuperLU, together. One particular example is AMANZI code from Los Alamos National Laboratories, that uses PETSc and Trilinos at the same time.",
      "laborHours": 0,
      "languages": [],
      "name": "xSDKTrilinos v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/xSDKTrilinos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This code implements a variety of \"deep learning\" algorithms from openly published academic journals. These deep learning algorithms allow the user to train neural networks to do various tasks. Such tasks include predicting future values in a time sequence, categorizing images or compressing information. The code is mostly written in the easy to understand Matlab / GNU Octave language, which enables rapid prototyping and understanding for research and educational purposes.",
      "laborHours": 0,
      "languages": [],
      "name": "Cortexsys v. 3.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/joncox123/Cortexsys",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "RAJA is a collection of C++ software abstractions designed to make HPC applications portable across a range of hardware architectures and programming models. The main conceptual abstraction in FAJA is a loop. RAJA provides abstractions for types, loop execution and scheduling, and loop iteration space portioning and ordering cooperate to insulate algorithms in application code that domain experts write from implementations details of those algorithms that may need to depend on the underlying computer hardware for high performance.",
      "laborHours": 0,
      "languages": [],
      "name": "RAJA - LLNL HPC Architecture Portability Encapsulation Layer Version 1.0",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/RAJA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The DOE has funded Sandia National Labs (SNL) to develop an open-source modeling tool to guide the design and layout of marine hydrokinetic (MHK) arrays to maximize power production while minimizing environmental effects. This modeling framework simulates flows through and around a MHK arrays while quantifying environmental responses. As an augmented version of the Dutch company, Deltares’s, environmental hydrodynamics code, Delft3D, SNL-Delft3D includes a new module that simulates energy conversion (momentum withdrawal) by MHK devices with commensurate changes in the turbulent kinetic energy and its dissipation rate.",
      "laborHours": 0,
      "languages": [],
      "name": "Delft3D turbine turbulence module",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/SNL-WaterPower/SNL-Delft3D-CEC",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Quinoa is a set of computational tools that enables research and numerical analysis in fluid dynamics. At this time it is a test-bed to experiment with various algorithms using fully asynchronous runtime systems.",
      "laborHours": 0,
      "languages": [],
      "name": "Quinoa, Version 0.1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/quinoacomputing/quinoa/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/quinoacomputing/quinoa/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The ParaDIS_lib software is a project that is funded by the DOE ASC Program. Its purpose is to provide visualization and analysis capabilities for the existing ParaDIS parallel dislocation dynamics simulation code.",
      "laborHours": 0,
      "languages": [],
      "name": "ParaDIS_lib",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/paraDIS_lib",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "FleCSI is a compile-time configurable framework designed to support multi-physics application development. As such, FleCSI attempts to provide a very general set of infrastructure design patterns that can be specialized and extended to suit the needs of a broad variety of solver and data requirements. Current support includes multi-dimensional mesh topology, mesh geometry, and mesh adjacency information, n-dimensional hashed-tree data structures, graph partitioning interfaces, and dependency closures. FleCSI also introduces a functional programming model with control, execution, and data abstractions that are consistent with both MPI and state-of-the-art task-based runtimes such as Legion and Charm++. The FleCSI abstraction layer provides the developer with insulation from the underlying runtime, while allowing support for multiple runtime systems, including conventional models like asynchronous MPI. The intent is to give developers a concrete set of user-friendly programming tools that can be used now, while allowing flexibility in choosing runtime implementations and optimizations that can be applied to architectures and runtimes that arise in the future. The control and execution models in FleCSI also provide formal nomenclature for describing poorly understood concepts like kernels and tasks.",
      "laborHours": 0,
      "languages": [],
      "name": "Flexible Computer Science Infrastructure (FleCSI)",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/laristra/flecsi-third-party",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/flecsi-third-party",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Methods for fitting and predicting logistic regression classifiers (LRC) with an arbitrary loss function using elastic net or best subsets. This package adds additional model fitting features to the existing glmnet and bestglm R packages. This package was created to perform the analyses described in Amidan BG, Orton DJ, LaMarche BL, et al. 2014. Signatures for Mass Spectrometry Data Quality. Journal of Proteome Research. 13(4), 2215-2222. It makes the model fitting available in the glmnet and bestglm packages more general by identifying optimal model parameters via cross validation with an customizable loss function. It also identifies the optimal threshold for binary classification.",
      "laborHours": 0,
      "languages": [],
      "name": "glmnetLRC f/k/a lrc package: Logistic Regression Classification",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/glmnetLRC/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/glmnetLRC",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Tycho 2 is a mini-app for testing performance of new algorithms and computational optimizations of neutral particle transport sweeps on 3D tetrahedral, unstructured grids.",
      "laborHours": 0,
      "languages": [],
      "name": "Tycho 2, Version 0.1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/tycho2/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/tycho2",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "COGENT is a simulation code that models the plasma evolution in the edge region of a tokamak fusion reactor, from the open field line scrape-off layer, across the separatrix, and into the core. The model is based on the 4D gyrokinetic closure of the kinetic equations for a plasma coupled to an electrostatic potential field. The background magnetic field is prescribed either analytically or generated from experimental data, and the grid is aligned with magnetic flux surfaces. Multiple collision operator options are provided, from Krook to fully nonlinear Fokker-Planck.",
      "laborHours": 0,
      "languages": [],
      "name": "Continuum Gyrokinetic Edge New Technology",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/COGENT/blob/master/COPYRIGHT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/llnl/cogent",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Virtual Flow Simulator (VFS) is a state-of-the-art computational fluid mechanics (CFD) package that is capable of simulating multi-physics/multi-phase flows with the most advanced turbulence models (RANS, LES) over complex terrains. The flow solver is based on the Curvilinear Immersed Boundary (CURVIB) method to handle geometrically complex and moving domains. Different modules of the VFS package can provide different simulation capabilities for specific applications ranging from the fluid-structure interaction (FSI) of solid and deformable bodies, the two-phase free surface flow solver based on the level set method for ocean waves, sediment transport models in rivers and the large-scale models of wind farms based on actuator lines and surfaces. All numerical features of VFS package have been validated with known analytical and experimental data as reported in the related journal articles. VFS package is suitable for a broad range of engineering applications within different industries. VFS has been used in different projects with applications in wind and hydrokinetic energy, offshore and near-shore ocean studies, cardiovascular and biological flows, and natural streams and river morphodynamics. Over the last decade, the development of VFS has been supported and assisted with the help of various United States companies and federal agencies that are listed in the sponsor lists. In this version, VFS-Wind contains all the necessary modeling tools for wind energy applications, including land-based and offshore wind farms. VFS is highly scalable to run on either desktop computers or high performance clusters (up to 16,000 CPUs). This released version comes with a detailed user’s manual and a set of case studies designed to facilitate the learning of the various aspects of the code in a comprehensive manner. The included documentation and support material has been elaborated in a collaboration effort with Sandia National Labs under the contract DE-EE0005482. The VFS-Wind source code is distributed under the GNU General Public License (GPL 2.0), offering to the community the flexibility to use and expand the capabilities of the package. We note that future publications including academic journals that result from the use of VFS must be cited appropriately under the GPL v.2 license agreement.",
      "laborHours": 0,
      "languages": [],
      "name": "Virtual Flow Simulator",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/SAFL-CFD-Lab/VFS-Wind/",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Draco is an object-oriented component library geared towards numerically intensive, radiation (particle) transport applications built for parallel computing hardware. It consists of semi-independent packages and a robust build system. The packages in Draco provide a set of components that can be used by multiple clients to build transport codes. The build system can also be extracted for use in clients. Software includes smart pointers, Design-by-Contract assertions, unit test framework, wrapped MPI functions, a file parser, unstructured mesh data structures, a random number generator, root finders and an angular quadrature component.",
      "laborHours": 0,
      "languages": [],
      "name": "Draco,Version 6.x.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/Draco/blob/develop/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/Draco",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "STREAMM is a collection of python classes and scripts that enables and eases the setup of input files and configuration files for simulations of advanced energy materials. The core STREAMM python classes provide a general framework for storing, manipulating and analyzing atomic/molecular coordinates to be used in quantum chemistry and classical molecular dynamics simulations of soft materials systems. The design focuses on enabling the interoperability of materials simulation codes such as GROMACS, LAMMPS and Gaussian.",
      "laborHours": 0,
      "languages": [],
      "name": "Simulation Toolkit for Renewable Energy Advanced Materials Modeling",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/streamm-tools",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software record documents the OpenStudio fault model development portion of the Fault Detection and Diagnostics LDRD project.The software provides a suite of OpenStudio measures (scripts) for modeling typical HVAC system faults in commercial buildings and also included supporting materials: example projects and OpenStudio measures for reporting fault costs and energy impacts.",
      "laborHours": 0,
      "languages": [],
      "name": "OpenStudio - Fault Modeling",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/OpenStudio-fault-models/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/OpenStudio-fault-models",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This package builds on existing software to provide clear and simple interfaces between GDX files and pandas DataFrames.",
      "laborHours": 0,
      "languages": [],
      "name": "GDX-pandas",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/gdx-pandas/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/gdx-pandas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GridLAB-D is an agent? based distribution system simulation environment that allows fine-grained end-user models, including geospatial and network topology detail. GridLAB-D addresses the lack of runtime interaction by designing a flexible communication interface, Bus.py (pronounced bus-dot-pie), that uses Python to pass messages between one or more GridLAB-D instances and a Smart Grid simulator.",
      "laborHours": 0,
      "languages": [],
      "name": "Bus.py",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/buspy/blob/develop/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/buspy",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A cost model for operational expenditures for land-based wind plants.",
      "laborHours": 0,
      "languages": [],
      "name": "LandOpExSE",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WISDEM/Plant_CostsSE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Home Energy Score is a simulation-based rating method for existing homes. Home Performance XML (HPXML) is a data transfer standard for home energy audit and retrofit data used throughout the industry. This software receives an HPXML document and translates the building characteristics into HEScore inputs compliant with their API.",
      "laborHours": 0,
      "languages": [],
      "name": "HPXML to Home Energy Score Translator",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/hescore-hpxml",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software consists of a CKAN extension to an existing REEGLE Tagging API.",
      "laborHours": 0,
      "languages": [],
      "name": "Reegle Tagging API (CKAN Extension)",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/REEEP/ckanext-climate-tagger/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/REEEP/ckanext-climate-tagger",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Cost and case analyzer components of the FUSED-Wind software. These are small pieces of code which define interfaces between software in order to do wind plant cost of energy on the one hand and analysis of load cases for an aeroelastic code on the other.",
      "laborHours": 0,
      "languages": [],
      "name": "Framework for Unified Systems Engineering and Design of Wind Plants (FUSED-Wind) cost models and case analyzer",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/FUSED-Wind/fusedwind",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A module for static hydrodynamic, aerodynamic, and structural design and analysis of wind turbine jacket and towers within the Systems Engineering toolbox.",
      "laborHours": 0,
      "languages": [],
      "name": "JacketSE",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WISDEM/JacketSE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A module that allows Frame3DD to interact with codes developed at NREL within the Systems Engineering WIDEM toolbox.",
      "laborHours": 0,
      "languages": [],
      "name": "PyFrame3DD",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WISDEM/pyFrame3DD",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "FLORIS is an engineering model of wind turbine wake interactions which accounts for the effects of turbines on the flow through the creation of wakes an accounting for both velocity deficit and wake redirection through yaw",
      "laborHours": 0,
      "languages": [],
      "name": "FLORIS",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WISDEM/FLORISSE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "rplexos is a R (statistical software framework; more? details below) package that processes and facilitates analysis of solution from PLEXOS. PLEXOS is a production cost model that is utilize to simulate the behavior of the power.systems and is developed and commercialized by Energy Exomplar. The intention is to make rptexos open-source so other PLEXOS users can utilize it.",
      "laborHours": 0,
      "languages": [],
      "name": "Rplexos",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/rplexos/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/rplexos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "REPRA is a statistical tool that models the effect of variable generation in the calculation of resource adequacy metrics. It is built as a research tool to explore different methodologies and technologies.",
      "laborHours": 0,
      "languages": [],
      "name": "REPRA",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/rplexos/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/rplexos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Cost model for Land-Based BOS for wind turbines.",
      "laborHours": 0,
      "languages": [],
      "name": "Land-Based Balance Of System",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/WISDEM/LandBOSSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WISDEM/LandBOSSE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A modular tool for simulating wind plant aerodynamics with computational fluid dynamics and turbine structural and control response to the incoming flow.",
      "laborHours": 0,
      "languages": [],
      "name": "Simulator for Wind Farm Applications",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/nrel/SOWFA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "NREL_WISDEM is an integrated model for wind turbines and plants developed In python based on the open source software OpenMDAO. NREL_WISDEM is a set of wrappers for various wind turbine and models that integrate pre-existing models together into OpenMDAO. It is organized into groups each with their own repositories including Plant_CostSE. Plant_EnergySE, Turbine_CostSE and TurbineSE. The wrappers are designed for licensed and non-licensed models though in both cases, one has to have access to and install the individual models themselves before using them in the overall software platform.",
      "laborHours": 0,
      "languages": [],
      "name": "NREL Wind Integrated System Design and Engineering Model",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WISDEM/WISDEM",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "turb_costSE is a set of models that link wind turbine component masses (and a few other key variables) to component costs.",
      "laborHours": 0,
      "languages": [],
      "name": "Turbine Cost Systems Engineering Model",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/turbine_costsse",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "nacelleSE and hubSE are a set of models that size wind turbine hub system and drivetrain components based on key turbine design parameters and load inputs from a rotor model.",
      "laborHours": 0,
      "languages": [],
      "name": "Nacelle Systems Engineering Model and Hub Systems Engineering Model",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/drivese",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A module for static aerodynamic and structural analysis of wind turbine towers",
      "laborHours": 0,
      "languages": [],
      "name": "TowerSE",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/towerse",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A module for static aerodynamic and structural analysis of wind turbine rotors",
      "laborHours": 0,
      "languages": [],
      "name": "RotorSE",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/rotorse",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "pBEAM (Polynomial Beam Element Analysis Module) is a finite element code for beam-like structures. The methodology uses Euler? Bernoulli beam elements with 12 degrees of freedom (3 translation and 3 rotational at each end of the element).",
      "laborHours": 0,
      "languages": [],
      "name": "Polynomial Beam Element Analysis Module",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/pbeam",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A blade element momentum method for analyzing wind turbine aerodynamic performance that is robust (guaranteed convergence), fast (superlinear convergence rate), and smooth (continuously differentiable) .",
      "laborHours": 0,
      "languages": [],
      "name": "CCBlade",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/ccblade",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A Python module for preprocessing and evaluating aerodynamic ainoil data---primarily for wind turbine applications.",
      "laborHours": 0,
      "languages": [],
      "name": "AirfoilPrep.py",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/airfoilpreppy",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "NREL_CSM is a set of models that provide an overall cost of energy analysis for the wind plant.",
      "laborHours": 0,
      "languages": [],
      "name": "NREL Wind Energy Cost and Scaling Model",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/nrel_csm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "DrivePy is physics-based drivetrain model that sizes drivetrain components based on aerodynamic and operational loads for use in a systems engineering model. It also calculates costs based on empirical data collected by NREL's National Wind Technology Center.",
      "laborHours": 0,
      "languages": [],
      "name": "DrivePy",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WISDEM/DriveSE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The National Renewable Energy Laboratoy has developed a new system dynamics global LUC model intended to examine LUC attributed to biofuel production. The model represents major global, stocks, flows and produces results under different food and biofuel demand assumptions, with flexible regional divisions. This model is not intended to generate precise numerical estimates, but instead to provide insights into the drivers and dynamic interactions of LUC, population, dietary choices, and biofuel policy.",
      "laborHours": 0,
      "languages": [],
      "name": "Bioenergy and Land Use Change",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://creativecommons.org/licenses/by-sa/3.0/legalcode",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/bioluc",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This code connects the SANDIA’a C++-based DAKOTA optimization and analyis tool with NASA’s python-based openMDAO systems engineering framework. It allows DAKOTA to be used as an openMDAO “Driver”. DAKOTA contains a wide array of advanced sensitivity, uncertainty quantification, and optimization methods. These are now available in a “pluggable” way to any openMDAO based workflow.",
      "laborHours": 0,
      "languages": [],
      "name": "Dakota Driver",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/wisdem/pyDAKOTA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software is a learning model excerpted from the BSM that can be used to examine effects of different learning rates and different techno-economics on industry evolution.",
      "laborHours": 0,
      "languages": [],
      "name": "Learning in Emerging Energy Industries",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/bsm-learning/blob/master/ReadMe.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/bsm-learning",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The BACnet Client is designed to gather data from building control systems through the BACnet protocol and send to various destinations for data logging and collection.",
      "laborHours": 0,
      "languages": [],
      "name": "BACnet Client",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/BACnet",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Portals reference implementation is based on the Portals 4.X API, published by Sandia National Laboratories as a freely available public document. It is designed to be an implementation of the Portals Networking Application Programming Interface and is used by several other upper layer protocols like SHMEM, GASNet and MPI. It is implemented over existing networks, specifically Ethernet and InfiniBand networks. This implementation provides Portals networks functionality and serves as a software emulation of Portals compliant networking hardware. It can be used to develop software using the Portals API prior to the debut of Portals networking hardware, such as Bull’s BXI interconnect, as well as a substitute for portals hardware on development platforms that do not have Portals compliant hardware. The reference implementation provides new capabilities beyond that of a typical network, namely the ability to have messages matched in hardware in a way compatible with upper layer software such as MPI or SHMEM. It also offers methods of offloading network operations via triggered operations, which can be used to create offloaded collective operations. Specific details on the Portals API can be found at http://portals4.org.",
      "laborHours": 0,
      "languages": [],
      "name": "Portals Reference Implementation v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/Portals4/portals4/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/portals4/portals4/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Response Surface Modeling (RSM) Tool Suite is a collection of three codes used to generate an empirical interpolation function for a collection of drag coefficient calculations computed with Test Particle Monte Carlo (TPMC) simulations. The first code, \"Automated RSM\", automates the generation of a drag coefficient RSM for a particular object to a single command. \"Automated RSM\" first creates a Latin Hypercube Sample (LHS) of 1,000 ensemble members to explore the global parameter space. For each ensemble member, a TPMC simulation is performed and the object drag coefficient is computed. In the next step of the \"Automated RSM\" code, a Gaussian process is used to fit the TPMC simulations. In the final step, Markov Chain Monte Carlo (MCMC) is used to evaluate the non-analytic probability distribution function from the Gaussian process. The second code, \"RSM Area\", creates a look-up table for the projected area of the object based on input limits on the minimum and maximum allowed pitch and yaw angles and pitch and yaw angle intervals. The projected area from the look-up table is used to compute the ballistic coefficient of the object based on its pitch and yaw angle. An accurate ballistic coefficient is crucial in accurately computing the drag on an object. The third code, \"RSM Cd\", uses the RSM generated by the \"Automated RSM\" code and the projected area look-up table generated by the \"RSM Area\" code to accurately compute the drag coefficient and ballistic coefficient of the object. The user can modify the object velocity, object surface temperature, the translational temperature of the gas, the species concentrations of the gas, and the pitch and yaw angles of the object. Together, these codes allow for the accurate derivation of an object's drag coefficient and ballistic coefficient under any conditions with only knowledge of the object's geometry and mass.",
      "laborHours": 0,
      "languages": [],
      "name": "Response Surface Modeling Tool Suite, Version 1.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/AndrewCWalker/rsm_tool_suite",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "LBANN is a toolkit that is designed to train artificial neural networks efficiently on high performance computing architectures. It is optimized to take advantages of key High Performance Computing features to accelerate neural network training. Specifically it is optimized for low-latency, high bandwidth interconnects, node-local NVRAM, node-local GPU accelerators, and high bandwidth parallel file systems. It is built on top of the open source Elemental distributed-memory dense and spars-direct linear algebra and optimization library that is released under the BSD license. The algorithms contained within LBANN are drawn from the academic literature and implemented to work within a distributed-memory framework.",
      "laborHours": 0,
      "languages": [],
      "name": "Livermore Big Artificial Neural Network Toolkit",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/LBANN",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Kokkos Clang compiler is a version of the Clang C++ compiler that has been modified to perform targeted code generation for Kokkos constructs in the goal of generating highly optimized code and to provide semantic (domain) awareness throughout the compilation toolchain of these constructs such as parallel for and parallel reduce. This approach is taken to explore the possibilities of exposing the developer’s intentions to the underlying compiler infrastructure (e.g. optimization and analysis passes within the middle stages of the compiler) instead of relying solely on the restricted capabilities of C++ template metaprogramming. To date our current activities have focused on correct GPU code generation and thus we have not yet focused on improving overall performance. The compiler is implemented by recognizing specific (syntactic) Kokkos constructs in order to bypass normal template expansion mechanisms and instead use the semantic knowledge of Kokkos to directly generate code in the compiler’s intermediate representation (IR); which is then translated into an NVIDIA-centric GPU program and supporting runtime calls. In addition, by capturing and maintaining the higher-level semantics of Kokkos directly within the lower levels of the compiler has the potential for significantly improving the ability of the compiler to communicate with the developer in the terms of their original programming model/semantics.",
      "laborHours": 0,
      "languages": [],
      "name": "Kokkos GPU Compiler",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/kokkos-clang/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/kokkos-clang",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "FQCDB builds up existing open source software, FastQC, implementing a modern web interface for across parsed output of FastQC. In addition, FQCDB is extensible as a web service to include additional plots of type line, boxplot, or heatmap, across data formatted according to guidelines. The interface is also configurable via more readable JSON format, enabling customization by non-web programmers.",
      "laborHours": 0,
      "languages": [],
      "name": "FASTQ quality control dashboard",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/brwnj/fqc",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "\"rsed\" is an R package that contains tools for stream editing: manipulating text files by making insertions, replacements, deletions, substitutions, or commenting. It hails from the powerful Unix command, \"sed\". While the \"rsed\" package is not nearly as powerful as \"see\", it is much simpler to use. R programmers often write scripts that may require simple manipulation of text files. \"rsed\" addresses that need.",
      "laborHours": 0,
      "languages": [],
      "name": "rsed",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/rsed/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/rsed/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ROSSTEP is a system for sequentially running roslaunch, rosnode, and bash scripts automatically, for use in Robot Operating System (ROS) applications. The system consists of YAML files which define actions and conditions. A python file parses the code and runs actions sequentially using the sys and subprocess python modules. Between actions, it uses various ROS-based code to check conditions required to proceed, and only moves on to the next action when all the necessary conditions have been met. Included is rosstep-creator, a QT application designed to create the YAML files required for ROSSTEP. It has a nearly one-to-one mapping from interface elements to YAML output, and serves as a convenient GUI for working with the ROSSTEP system.",
      "laborHours": 0,
      "languages": [],
      "name": "ROSSTEP v1.3",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/Kukanani/rosstep/blob/8747daaa86110b2456711906177073ba7d511f92/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Kukanani/ROSSTEP/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "NUFLOOD Version 1.x is a surface-water hydrodynamic package designed for the simulation of overland flow of fluids. It consists of various routines to address a wide range of applications (e.g., rainfall-runoff, tsunami, storm surge) and real time, interactive visualization tools. NUFLOOD has been designed for general-purpose computers and workstations containing multi-core processors and/or graphics processing units. The software is easy to use and extensible, constructed in mind for instructors, students, and practicing engineers. NUFLOOD is intended to assist the water resource community in planning against water-related natural disasters.",
      "laborHours": 0,
      "languages": [],
      "name": "Nuflood, Version 1.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/nuflood/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/nuflood",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The contact control code is a generalized force control scheme meant to interface with a robotic arm being controlled using the Robot Operating System (ROS). The code allows the user to specify a control scheme for each control dimension in a way that many different control task controllers could be built from the same generalized controller. The input to the code includes maximum velocity, maximum force, maximum displacement, and a control law assigned to each direction and the output is a 6 degree of freedom velocity command that is sent to the robot controller.",
      "laborHours": 0,
      "languages": [],
      "name": "Contact Control, Version 1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/UTNuclearRoboticsPublic/contact_control/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/UTNuclearRoboticsPublic/contact_control",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The spark-hdf5 package is an extension to the Apache Spark program to allow native access to HDF5 files. It allows users to query the structured files using SQL-like syntax, and can parallelize large queries across several workers.",
      "laborHours": 0,
      "languages": [],
      "name": "Spark-hdf5",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/spark-hdf5",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The purpose of this software package is to solve large-scale block-angular mixed-integer (linear) programs specified in SMPS format; the major application of this software package is to solving large-scale stochastic mixed-integer programs, which are block-angular.",
      "laborHours": 0,
      "languages": [],
      "name": "Parallel Interior Point Solver - Simple Branch & Bound",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/PIPS-SBB",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The code runs the Game of Life among several processors. Each processor uses CUDA to set up the grid's buffer on the GPU, and that buffer is fed to other GPU languages to apply the rules of the game of life. Only the halo is copied off the buffer and exchanged using MPI. This code looks at the interoperability of GPU languages among current platforms.",
      "laborHours": 0,
      "languages": [],
      "name": "GPULife",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnkelly/GPULife",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SANDAL is a particle-mesh simulation mini-app. The simple simulated physics propagates a set of particles in a constant, 2D wind field with Gaussian turbulence. SANDAL demonstrates the feasibility of formulating a computational physics problem using an alternative, modern design. Specifically, it is implemented using relational tables and queries, rather than array-based data model. It also is implemented with functional language design and cloud deployment, Scala and Apache Spark, rather than Fortran and MPI+X.",
      "laborHours": 0,
      "languages": [],
      "name": "Simple rANDom wALk simulation",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/Sandal/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/Sandal",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "OpenStudio is a cross-platform (Windows, Mac, and Linux) collection of software tools to support whole building energy modeling using EnergyPlus and advanced daylight analysis using Radiance. OpenStudio is an open source (LGPL) project to facilitate community development, extension, and private sector adoption. OpenStudio includes graphical interfaces along with a Software Development Kit (SDK). In addition to the graphical interface, OpenStudio allows building researchers and software developers to quickly get started through its multiple entry levels, including access through C++, Ruby, and C#. Users can leverage the Ruby interface to create OpenStudio Measures that can be easily shared and applied to OpenStudio Models.",
      "laborHours": 0,
      "languages": [],
      "name": "OPENSTUDIO",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/OpenStudio",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This translator takes fields from the HPXML and translates them into RESO’s Data Dictionary, which is used in MLS systems for real estate transactions across the country. The purpose is to get energy efficiency data into the real estate transaction.",
      "laborHours": 0,
      "languages": [],
      "name": "Home Performance XML to Real Estate Standards Organization Data Dictionary Translator",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/hpxml2reso",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Operating software for MET-2 Vaultbot project. Pan-tilt camera control, autonomous task planning, inventory integration functions.",
      "laborHours": 0,
      "languages": [],
      "name": "Vaultbot ROS Package",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/UTNuclearRoboticsPublic/task_planning",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "NREL's Developer Network, developer.nrel.gov, provides data that users can access to provide data to their own analyses, mobile and web applications. Developers can retrieve the data through a Web services API (application programming interface). The Developer Network handles overhead of serving up web services such as key management, authentication, analytics, reporting, documentation standards, and throttling in a common architecture, while allowing web services and APIs to be maintained and managed independently.",
      "laborHours": 0,
      "languages": [],
      "name": "Developer Network",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/developer.nrel.gov/blob/master/source/terms.html.erb",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/developer.nrel.gov",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software is designed for efficiently integrating large-size of multi-scale environmental data using the Bayesian framework. Suppose we need to estimate the spatial distribution of variable X with high spatial resolution. The available data include (1) direct measurements Z of the unknowns with high resolution in a subset of the spatial domain (small spatial coverage), (2) measurements C of the unknowns at the median scale, and (3) measurements A of the unknowns at the coarsest scale but with large spatial coverage. The goal is to estimate the unknowns at the fine grids by conditioning to all the available data. We first consider all the unknowns as random variables and estimate conditional probability distribution of those variables by conditioning to the limited high-resolution observations (Z). We then treat the estimated probability distribution as the prior distribution. Within the Bayesian framework, we combine the median and large-scale measurements (C and A) through likelihood functions. Since we assume that all the relevant multivariate distributions are Gaussian, the resulting posterior distribution is a multivariate Gaussian distribution. The developed software provides numerical solutions of the posterior probability distribution. The software can be extended in several different ways to solve more general multi-scale data integration problems.",
      "laborHours": 0,
      "languages": [],
      "name": "Bayesian Integration of multiscale environmental data",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/jschen83/Multiscale-Bayesian-Integration/blob/master/license.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jschen83/Multiscale-Bayesian-Integration",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "OpenSHMEM is an effort to create a specification for a standardized API for parallel programming in the Partitioned Global Address Space. Along with the specification the project is also creating a reference implementation of the API. This implementation attempts to be portable, to allow it to be deployed in multiple environments, and to be a starting point for implementations targeted to particular hardware platforms. It will also serve as a springboard for future development of the API.",
      "laborHours": 0,
      "languages": [],
      "name": "Open SHMEM Reference Implementation",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/openshmem-org/openshmem/blob/master/ACKNOWLEDGEMENT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/openshmem-org/openshmem",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Suite of Python Libraries that implement structure data format processing, multivariate analysis, and interactive visualization of microscopy data and other spectral imaging modalities, including scanning probe microscopy, electron microscopy, Bragg diffraction microscopy, and chemical imaging.",
      "laborHours": 0,
      "languages": [],
      "name": "pyCroscopy",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pycroscopy/pycroscopy/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The purpose of this software is to interpret and analyze data taken using the NI PXIe-5171R digitizer based data acquisition system for the UCNB and Nab experiments. The detection and data acquisition systems are identical for the 2 experiments, with some differences in analysis requirements. The software converts raw binary files produced by the NI DAQ into ROOT TTree format, performs waveform analysis using trapezoidal filter algorithms, pulse fitting, and noise analysis routines, and applies variable criteria to identify valid events in the data stream. The software will be used to perform analysis of the events for multi-channel coincidences, timing and energy studies, and event rates under different experimental conditions.",
      "laborHours": 0,
      "languages": [],
      "name": "UCNB_Analyzer",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/UCNB_Analyzer/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "GraphBench is a benchmark suite for graph pattern mining and graph analysis systems. The benchmark suite is a significant addition to conducting apples-apples comparison of graph analysis software (databases, in-memory tools, triple stores, etc.)",
      "laborHours": 0,
      "languages": [],
      "name": "GraphBench",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ssrangan/GraphBench/blob/master/Open%20Source%20Software%20License%20(Permissive%20May%202015)%20for%20GM-SPARQL.pdf",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ssrangan/GraphBench",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Availability of accessing the World Bank Data API through the R language was limited to one existing package, which is limited in its ability. The software provides access to all of the features in World Bank API in one software package for the R language and provides functions for searching and downloading data from the World Bank API.",
      "laborHours": 0,
      "languages": [],
      "name": "wbstats",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/GIST-ORNL/wbstats/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/GIST-ORNL/wbstats",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Mcqueuer is a simple tool that allows anyone from researchers to experienced developers to create multi-node/multi-core jobs by simply creating a file with a list of commands. Users simply combine tasks, which would otherwise each be their own job on the cluster, into a single file that is given to Mcqueuer. Mcqueuer then does the heavy lifting required to process the tasks in parallel in a single multi-node job. In addition, Mcqueuer provides load-balancing, which frees the user from having to worry about complex memory and CPU considerations, and instead focus on the processing itself.",
      "laborHours": 0,
      "languages": [],
      "name": "Mcqueuer",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/aaronrphillips/mcqr/blob/master/COPYING",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/aaronrphillips/mcqr",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "AE3D solves for the shear Alfven eigenmodes and eigenfrequencies in a torodal magnetic fusion confinement device. The configuration can be either 2D (e.g. tokamak, reversed field pinch) or 3D (e.g. stellarator, helical reversed field pinch, tokamak with ripple). The equations solved are based on a reduced MHD model and sound wave coupling effects are not currently included.",
      "laborHours": 0,
      "languages": [],
      "name": "AE3D",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-Fusion/AE3D",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Stellgap calculates the shear Alfven gap structure for 3D configurations (stellarators, RFPs, 3D tokamaks). These codes are used to calculate shear Alfven continua for 3D configurations, both with and without sound wave coupling effects.",
      "laborHours": 0,
      "languages": [],
      "name": "Stellgap",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-Fusion/Stellgap",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GeoPlace software solves several problems related to efficient sensor placement for remote sensing. It consists of several components. “GeoFoot” finds efficient locations for centering a set of camera images, in order to ensure that the collection of images contains an entire region. It is built on a modified version of “Simple MPS”. GeoSubFoot selects non-overlapping rectangular subregions of a single camera image, in order to devote more resources for higher-fidelity sub-images of those regions. The goal is for the rectangular subregions to contain many user-specified pixels of interest. Simple MPS is a generic program that produces point-sample distributions with blue noise characteristics over arbitrary-dimensional squares. GeoFoot includes an extension of it to sampling from polygons in 2d, including both the inside of the polygon and slightly outside it.",
      "laborHours": 0,
      "languages": [],
      "name": "GeoPlace v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/cgvalic/GeoPlace/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/cgvalic/GeoPlace",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "DFNWorks is a suite of software for generating and solving flow and transport physics on a Discrete Fracture Network (DFN). The suite is composed of three components: DFNGen: Stochastic fracture generation, mesh generation, model setup; DFNFlow: Flow solution using PFLOTRAN or FEHM control volume formulation solver; DFNTrans: Particle tracking transport; DFNGen Algorithm Description: This is a workflow that uses Mathematica software, Python scripts written by the authors and the LaGriT software to generate; DFNFlow; The solution of flow in porous media is accomplished by coupling DFNGen output with the existing software packages FEHM and PFLOTRAN. The DFNWorks workflow involves modules and scripts that translate DFNGen output to formats compatible with FEHM and PFLOTRAN input. FEHM LA-CC-2012-083 PFLOTRAN LA-CC-09-047 LaGriT LA-CC-07-38 DFNTrans Stand alone particle tracking algorithm that takes FEHM/PFLOTRAN flow solution as output and computes velocity field and advects particles.",
      "laborHours": 0,
      "languages": [],
      "name": "dfnWorks, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/dfnWorks/dfnWorks-Version1.0/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dfnWorks/dfnWorks-Version1.0",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This code is a toy (short) version of CODE-2016-83. From a general perspective, the code represents an unsupervised adaptive machine learning algorithm that allows efficient and high performance de-mixing and feature extraction of a multitude of non-negative signals mixed and recorded by a network of uncorrelated sensor arrays. The code identifies the number of the mixed original signals and their locations. Further, the code also allows deciphering of signals that have been delayed in regards to the mixing process in each sensor. This code is high customizable and it can be efficiently used for a fast macro-analyses of data. The code is applicable to a plethora of distinct problems: chemical decomposition, pressure transient decomposition, unknown sources/signal allocation, EM signal decomposition. An additional procedure for allocation of the unknown sources is incorporated in the code.",
      "laborHours": 0,
      "languages": [],
      "name": "shiftNMFk 1.1: Robust Nonnegative matrix factorization with kmeans clustering and signal shift, for allocation of unknown physical sources, toy version for open sourcing with publications",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/rNMF/ShiftNMFk.jl/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/rNMF/ShiftNMFk.jl",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "A Splunk App designed to parse and tabulate PathScan data.",
      "laborHours": 0,
      "languages": [],
      "name": "PathScan for Splunk",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/jwernicke/pathscan-splunk",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jwernicke/pathscan-splunk",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Mads.jl (Model analysis and decision support in Julia) is a code that streamlines the process of using data and models for analysis and decision support. It is based on another open-source code developed at LANL and written in C/C++ (MADS; http://mads.lanl.gov; LA-CC-11- 035). Mads.jl can work with external models of arbitrary complexity as well as built-in models of flow and transport in porous media. It enables a number of data- and model-based analyses including model calibration, sensitivity analysis, uncertainty quantification, and decision analysis. The code also can use a series of alternative adaptive computational techniques for Bayesian sampling, Monte Carlo, and Bayesian Information-Gap Decision Theory. The code is implemented in the Julia programming language, and has high-performance (parallel) and memory management capabilities. The code uses a series of third party modules developed by others. The code development will also include contributions to the existing third party modules written in Julia; this contributions will be important for the efficient implementation of the algorithm used by Mads.jl. The code also uses a series of LANL developed modules that are developed by Dan O'Malley; these modules will be also a part of the Mads.jl release. Mads.jl will be released under GPL V3 license. The code will be distributed as a Git repo at gitlab.com and github.com. Mads.jl manual and documentation will be posted at madsjulia.lanl.gov.",
      "laborHours": 0,
      "languages": [],
      "name": "Mads.jl",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/madsjulia/Mads.jl",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "HPSim is a GPU-accelerated online multi-particle beam dynamics simulation tool for ion linacs. It was originally developed for use on the Los Alamos 800-MeV proton linac. It is a “z-code” that contains typical linac beam transport elements. The linac RF-gap transformation utilizes transit-time-factors to calculate the beam acceleration therein. The space-charge effects are computed using the 2D SCHEFF (Space CHarge EFFect) algorithm, which calculates the radial and longitudinal space charge forces for cylindrically symmetric beam distributions. Other space- charge routines to be incorporated include the 3D PICNIC and a 3D Poisson solver. HPSim can simulate beam dynamics in drift tube linacs (DTLs) and coupled cavity linacs (CCLs). Elliptical superconducting cavity (SC) structures will also be incorporated into the code. The computational core of the code is written in C++ and accelerated using the NVIDIA CUDA technology. Users access the core code, which is wrapped in Python/C APIs, via Pythons scripts that enable ease-of-use and automation of the simulations. The overall linac description including the EPICS PV machine control parameters is kept in an SQLite database that also contains calibration and conversion factors required to transform the machine set points into model values used in the simulation.",
      "laborHours": 0,
      "languages": [],
      "name": "HPSim, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/apphys/hpsim/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/apphys/hpsim",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The SIERRA Toolkit is a collection of libraries to facilitate the development of parallel engineering analysis applications. These libraries supply basic core services that an engineering application may need such as a parallel distributed and dynamic mesh database (for unstructured meshes), mechanics algorithm support (parallel infrastructure only), interfaces to parallel solvers, parallel mesh and data I/O, and various utilities (timers, diagnostic tools, etc.)",
      "laborHours": 0,
      "languages": [],
      "name": "SIERRA Toolkit v. 2.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/trilinos/Trilinos/blob/master/packages/stk/COPYRIGHT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/trilinos/Trilinos/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The IonControl software is a set of python scripts and Field-Programmable-Gate-Array (FPGA) code designed to control a trapped ion research experiment. It enables one to generate the pulses (time resolution: 20ns) necessary to control the quantum states of trapped ions and allows one to collect and analyze measurement results from trapped ion systems.",
      "laborHours": 0,
      "languages": [],
      "name": "IonControl v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pyIonControl/IonControl",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "VOLTTRON™ is an agent execution platform providing services to its agents that allow them to easily communicate with physical devices and other resources. VOLTTRON™ delivers an innovative distributed control and sensing software platform that supports modern control strategies, including agent-based and transaction-based controls. It enables mobile and stationary software agents to perform information gathering, processing, and control actions. VOLTTRON™ can independently manage a wide range of applications, such as HVAC systems, electric vehicles, distributed energy or entire building loads, leading to improved operational efficiency.",
      "laborHours": 0,
      "languages": [],
      "name": "Volttron version 4",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/VOLTTRON/volttron",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Electrostatics software under development since 1999. Soee http://www.poissonboltzmann.org/ for more detail.",
      "laborHours": 0,
      "languages": [],
      "name": "APBS (Adaptive Poisson-Boltzmann Solver) and PDB2PQR",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Electrostatics/apbs-pdb2pqr",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PyGeoTess is a Python interface module to the GeoTess gridding and earth model library from Sandia National Laboratories. It provides simplified access to a subset of the GeoTess C++ library, and takes advantage of Python's interactive interpreter and inline documentation system.",
      "laborHours": 0,
      "languages": [],
      "name": "PyGeoTess 0.2.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LANL-Seismoacoustics/PyGeoTess/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl-seismoacoustics/pygeotess",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Whole community shotgun sequencing of total DNA (i.e. metagenomics) and total RNA (i.e. metatranscriptomics) has provided a wealth of information in the microbial community structure, predicted functions, metabolic networks, and is even able to reconstruct complete genomes directly. Here we present ATLAS (Automatic Tool for Local Assembly Structures) a comprehensive pipeline for assembly, annotation, genomic binning of metagenomic and metatranscriptomic data with an integrated framework for Multi-Omics. This will provide an open source tool for the Multi-Omic community at large.",
      "laborHours": 0,
      "languages": [],
      "name": "Automatic Tool for Local Assembly Structures",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/atlas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The MC3 code is used to perform Monte Carlo simulations in the isothermal-isobaric ensemble (constant number of particles, temperature, and pressure) on molecular crystals. The molecules within the periodic simulation cell are treated as rigid bodies, alleviating the requirement for a complex interatomic potential. Intermolecular interactions are described using generic, atom-centered pair potentials whose parameterization is taken from the literature [D. E. Williams, J. Comput. Chem., 22, 1154 (2001)] and electrostatic interactions arising from atom-centered, fixed, point partial charges. The primary uses of the MC3 code are the computation of i) the temperature and pressure dependence of lattice parameters and thermal expansion coefficients, ii) tensors of elastic constants and compliances via the Parrinello and Rahman’s fluctuation formula [M. Parrinello and A. Rahman, J. Chem. Phys., 76, 2662 (1982)], and iii) the investigation of polymorphic phase transformations. The MC3 code is written in Fortran90 and requires LAPACK and BLAS linear algebra libraries to be linked during compilation. Computationally expensive loops are accelerated using OpenMP.",
      "laborHours": 0,
      "languages": [],
      "name": "MC3, Version 1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/cawkwell/MC3",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Software library for parallel rapid order N and graph-based recursive electronic structure solvers with applications to material science, chemistry, and molecular biology.",
      "laborHours": 0,
      "languages": [],
      "name": "Progress Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/progress/progress.github.io",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The code would be used in analyses of data from the LHC, to improve the sensitivity of their experiments to new exotic particles. The software minimizes a certain function, as defined in the above reference, for some input provided by the user. The output to the user is the global minimum of that function. The code finds the global minimum using the Nelder-Mead algorithm. All the codes for the minimization including the Nelder-Mead algorithm, is written by the author. The software is written in c++.",
      "laborHours": 0,
      "languages": [],
      "name": "Topness, Version 1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/michaelgraesser/topness/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/michaelgraesser/topness",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2018-03-28"
      },
      "description": "Sirepo is an open source framework for cloud computing. The graphical user interface (GUI) for Sirepo, also known as the client, executes in any HTML5 compliant web browser on any computing platform, including tablets. The client is built in JavaScript, making use of the following open source libraries: Bootstrap, which is fundamental for cross-platform web applications; AngularJS, which provides a model–view–controller (MVC) architecture and GUI components; and D3.js, which provides interactive plots and data-driven transformations. The Sirepo server is built on the following Python technologies: Flask, which is a lightweight framework for web development; Jinja, which is a secure and widely used templating language; and Werkzeug, a utility library that is compliant with the WSGI standard. We use Nginx as the HTTP server and proxy, which provides a scalable event-driven architecture. The physics codes supported by Sirepo execute inside a Docker container. One of the codes supported by Sirepo is the Synchrotron Radiation Workshop (SRW). SRW computes synchrotron radiation from relativistic electrons in arbitrary magnetic fields and propagates the radiation wavefronts through optical beamlines. SRW is open source and is primarily supported by Dr. Oleg Chubar of NSLS-II at Brookhaven National Laboratory.",
      "laborHours": 0,
      "languages": [],
      "name": "Sirepo for Synchrotron Radiation Workshop",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/radiasoft/sirepo",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Sirepo is an open source framework for cloud computing. The graphical user interface (GUI) for Sirepo, also known as the client, executes in any HTML5 compliant web browser on any computing platform, including tablets. The client is built in JavaScript, making use of the following open source libraries: Bootstrap, which is fundamental for cross-platform web applications; AngularJS, which provides a model–view–controller (MVC) architecture and GUI components; and D3.js, which provides interactive plots and data-driven transformations. The Sirepo server is built on the following Python technologies: Flask, which is a lightweight framework for web development; Jin-ja, which is a secure and widely used templating language; and Werkzeug, a utility library that is compliant with the WSGI standard. We use Nginx as the HTTP server and proxy, which provides a scalable event-driven architecture. The physics codes supported by Sirepo execute inside a Docker container. One of the codes supported by Sirepo is Warp. Warp is a particle-in-cell (PIC) code de-signed to simulate high-intensity charged particle beams and plasmas in both the electrostatic and electromagnetic regimes, with a wide variety of integrated physics models and diagnostics. At pre-sent, Sirepo supports a small subset of Warp’s capabilities. Warp is open source and is part of the Berkeley Lab Accelerator Simulation Toolkit.",
      "laborHours": 0,
      "languages": [],
      "name": "Sirepo - Warp",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/radiasoft/sirepo",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "pgarvey@bnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "OSCARS is a general purpose code for computation of radiation from charged particles in motion.",
      "laborHours": 0,
      "languages": [],
      "name": "Open Source Code for Advanced Radiation Simulation",
      "organization": "Brookhaven National Laboratory (BNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/dhidas/OSCARS/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dhidas/OSCARS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Brookhaven National Laboratory (BNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Nanoindentation is a tool that allows the mechanical response of a variety of materials at the nano to micron length scale to be measured. Recent advances in spherical nanoindentation techniques have allowed for a more reliable and meaningful characterization of the mechanical response from nanoindentation experiments in the form on an indentation stress-strain curve. This code base, Spin, is written in MATLAB (The Mathworks, Inc.) and based on the analysis protocols developed by S.R. Kalidindi and S. Pathak [1, 2]. The inputs include the displacement, load, harmonic contact stiffness, harmonic displacement, and harmonic load from spherical nanoindentation tests in the form of an Excel (Microsoft) spreadsheet. The outputs include indentation stress-strain curves and indentation properties as well their variance due to the uncertainty of the zero-point correction in the form of MATLAB data (.mat) and figures (.png). [1] S. Pathak, S.R. Kalidindi. Spherical nanoindentation stress–strain curves, Mater. Sci. Eng R-Rep 91 (2015). [2] S.R. Kalidindi, S. Pathak. Determination of the effective zero-point and the extraction of spherical nanoindentation stress-strain curves, Acta Materialia 56 (2008) 3523-3532.",
      "laborHours": 0,
      "languages": [],
      "name": "Spherical nanoindentation stress-strain analysis, Version 1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jsweaver/Spin",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Arion is a library and tool set that enables researchers to holistically define test system models. To define a complex system for testing an algorithm or control requires expertise across multiple domains. Simulating a complex system requires the integration of multiple simulators and test hardware, each with their own specification languages and concepts. This requires extensive set of knowledge and capabilities. Arion was developed to alleviate this challenge. Arion is a library of Java libraries that abstracts the concepts from supported simulators into a cohesive model language that allows someone to build models to their needed level of fidelity and expertise. Arion is also a software tool that translates the users model back into the specification languages of the simulators and test hardware needed for execution.",
      "laborHours": 0,
      "languages": [],
      "name": "Arion",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/arion/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/arion/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A system for processing network packet capture streams, extracting metadata and generating flow records (via Argus). The system can be used by network security operators and analysts to enable forensic investigations for network security events.",
      "laborHours": 0,
      "languages": [],
      "name": "Retro-Future",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/cardi/timefind",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MADSpython (Model analysis and decision support tools in Python) is a code in Python that streamlines the process of using data and models for analysis and decision support using the code MADS. MADS is open-source code developed at LANL and written in C/C++ (MADS; http://mads.lanl.gov; LA-CC-11-035). MADS can work with external models of arbitrary complexity as well as built-in models of flow and transport in porous media. The Python scripts in MADSpython facilitate the generation of input and output file needed by MADS as wells as the external simulators which include FEHM and PFLOTRAN. MADSpython enables a number of data- and model-based analyses including model calibration, sensitivity analysis, uncertainty quantification, and decision analysis. MADSpython will be released under GPL V3 license. MADSpython will be distributed as a Git repo at gitlab.com and github.com. MADSpython manual and documentation will be posted at http://madspy.lanl.gov.",
      "laborHours": 0,
      "languages": [],
      "name": "MADSpython 1.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/madspython",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MICOT is a tool for optimizing and controlling infrastructure systems. In includes modules for optimizing the operations of an infrastructure structure (for example optimal dispatch), designing infrastructure systems, restoring infrastructures systems, resiliency, preparing for natural disasters, interdicting networks, state estimation, sensor placement, and simulation of infrastructure systems. It implements algorithms developed at LANL that have been published in the academic community. This is a release of the of resilient design module of the MICOT.",
      "laborHours": 0,
      "languages": [],
      "name": "Multi Infrastructure Control and Optimization Toolkit, Resilient Design Module (MICOT-RDT), version 2.X",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl-ansi/micot-rdt/blob/master/LICENCE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl-ansi/micot-rdt",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "RmultiProcess software is designed to work with multiple correlated sensors. The characteristic that allows data to be filled in or the support to be changed is correlation, the interdependence between observations.",
      "laborHours": 0,
      "languages": [],
      "name": "Multivariate Gaussian Process Model for Correlated Time Series in R",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/erickalendra/RmultiProcess",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Returns bitwise identical sums regardless of the order of the summands. Uses no branches and mostly integer operations. Designed to be vectorizeable.",
      "laborHours": 0,
      "languages": [],
      "name": "Branchless Reproducible Floating Point Summation With Integers, Version 1.x.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/peterahrens/BranchlessReproducibleFloatingPointWithIntegers/blob/master/brfpwi.c",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/peterahrens/BranchlessReproducibleFloatingPointWithIntegers",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "DView is a time series data visualization tool that provides several different ways to plot time series datasets. It is particularly well suited for browsing the results of energy systems simulation programs such as BeOpt, SAM, and PVWatts.",
      "laborHours": 0,
      "languages": [],
      "name": "DVIEW",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/wex",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software presents a user-provided multivariate dataset as an interactive three dimensional visualization so that the user can explore the correlation between variables in the observations and the distribution of observations among the variables.",
      "laborHours": 0,
      "languages": [],
      "name": "Parallel Planes Information Visualization",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/infovis-parallel",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Clog is a library of charged particle stopping powers and related Coulomb logarithm processes in a plasma. The stopping power is a particularly useful quantity for plasma physics, as it measures the energy loss of per unit length of charged particle as it traverses a plasma. Clog's primary stopping power is the BPS (Brown-Preston-Singleton) theory.",
      "laborHours": 0,
      "languages": [],
      "name": "Coulomb Logarithm, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/clog/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/clog",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "NJOY2016 is used to convert evaluations in the Evaluated Nuclear Data Files (ENDF) format into forms useful for practical applications such as fission and fusion reactor analysis, criticality safety, radiation shielding, nuclear waste management, nuclear medicine procedures, and more. It begins with the generation of pointwise libraries, including reaction and resonance reconstruction, Doppler broadening, radiation heating and damage, thermal scattering data, unresolved resonance data, and gas production. It reviews the production of libraries for the continuous-energy Monte Carlo code MCNP, multigroup neutron, photon, and particle cross sections and matrices, and photon interaction data. Uncertainty information for ENDF data is processed, including the capability for calculating covariances of resonance data, angular distributions, energy distributions, and radioactive nuclide production. NJOY can prepare and process thermal scattering data evaluations into application libraries. It can also plot cross sections, angular distributions and secondary emission spectra.",
      "laborHours": 0,
      "languages": [],
      "name": "NJOY2016",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/njoy/NJOY21/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/njoy/NJOY21.git",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Tusas is a general / flexible software framework for solving coupled systems of onlinear partial differential equations. Tusas was originally developed for phase-field simulation of solidification. In order for Tusas to be effective, the PDEs must be compatible with structured or unstructured Lagrange (nodal) finite element discretizations and explicit (Euler) or implicit (Euler, Trapezoid, BDF2) temporal discretizations.",
      "laborHours": 0,
      "languages": [],
      "name": "Tusas, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/chrisknewman/tusas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This code implements the non-homogeneous poisson process model for estimating the rate of fast radio bursts. It includes modeling terms for the distribution of events in the Universe and the detection sensitivity of the radio telescopes and arrays used in observation. The model is described in LA-UR-16-26261.",
      "laborHours": 0,
      "languages": [],
      "name": "NHPP for FRBs, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/NHPP-for-FRBs/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/NHPP-for-FRBs",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "TBM3 is an open source package for computational simulations of quantum materials at multiple scales in length and time. The project originated to investigate the multiferroic behavior in transition-metal oxide heterostructures. The framework has also been designed to study emergent phemona in other quantum materials like 2-dimensional transition-metal dichalcogenides, graphene, topological insulators, and skyrmion in materials, etc. In the long term, we will enable the package for transport and time-resolved phenomena. TBM3 is currently a C++ based numerical tool package and framework for the design and construction of any kind of lattice structures with multi-orbital and spin degrees of freedom. The fortran based portion of the package will be added in the near future. The design of TBM3 is in a highly flexible and reusable framework and the tight-binding parameters can be modeled or informed by DFT calculations. It is currently GPU enabled and feature of CPU enabled MPI will be added in the future.",
      "laborHours": 0,
      "languages": [],
      "name": "Tight-binding model for materials at mesoscale",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/TDIV/TBM3/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/TDIV/TBM3/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "An example of reading the Galacticus HDF5 file in R and a demonstration of some of the features of the data.",
      "laborHours": 0,
      "languages": [],
      "name": "Galacticus HDF5 Example, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/Galacticus-HDF5-Example/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/Galacticus-HDF5-Example",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PcapDB is a packet capture system designed to optimize the captured data for fast search in the typical (network incident response) use case. The technology involved in this software has been submitted via the IDEAS system and has been filed as a provisional patent. It includes the following primary components: capture: The capture component utilizes existing capture libraries to retrieve packets from network interfaces. Once retrieved the packets are passed to additional threads for sorting into flows and indexing. The sorted flows and indexes are passed to other threads so that they can be written to disk. These components are written in the C programming language. search: The search components provide a means to find relevant flows and the associated packets. A search query is parsed and represented as a search tree. Various search commands, written in C, are then used resolve this tree into a set of search results. The tree generation and search execution management components are written in python. interface: The PcapDB web interface is written in Python on the Django framework. It provides a series of pages, API's, and asynchronous tasks that allow the user to manage the capture system, perform searches, and retrieve results. Web page components are written in HTML,CSS and Javascript.",
      "laborHours": 0,
      "languages": [],
      "name": "PcapDB: Search Optimized Packet Capture, Version 0.1.0.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dirtbags/pcapdb",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The JMP Add-In TopN-PFS provides an automated tool for finding layered Pareto front to identify the top N solutions from an enumerated list of candidates subject to optimizing multiple criteria. The approach constructs the N layers of Pareto fronts, and then provides a suite of graphical tools to explore the alternatives based on different prioritizations of the criteria. The tool is designed to provide a set of alternatives from which the decision-maker can select the best option for their study goals.",
      "laborHours": 0,
      "languages": [],
      "name": "TopN-Pareto Front Search",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/candcook/TopN-PFS/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/candcook/TopN-PFS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Code Analysis and Refactoring with Clang Tools is a small set of example code that demonstrates techniques for applying tools distributed with the open source Clang compiler. Examples include analyzing where variables are used and replacing old data structures with standard structures.",
      "laborHours": 0,
      "languages": [],
      "name": "Code Analysis and Refactoring with Clang Tools, Version 0.1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/losalamos/CoARCT",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A common operation in scientific visualization is to compute and render a contour of a data set. Given a function of the form f : R^d -> R, a level set is defined as an inverse image f^-1(h) for an isovalue h, and a contour is a single connected component of a level set. The Reeb graph can then be defined to be the result of contracting each contour to a single point, and is well defined for Euclidean spaces or for general manifolds. For simple domains, the graph is guaranteed to be a tree, and is called the contour tree. Analysis can then be performed on the contour tree in order to identify isovalues of particular interest, based on various metrics, and render the corresponding contours, without having to know such isovalues a priori. This code is intended to be the first data-parallel algorithm for computing contour trees. Our implementation will use the portable data-parallel primitives provided by Nvidia’s Thrust library, allowing us to compile our same code for both GPUs and multi-core CPUs. Native OpenMP and purely serial versions of the code will likely also be included. It will also be extended to provide a hybrid data-parallel / distributed algorithm, allowing scaling beyond a single GPU or CPU.",
      "laborHours": 0,
      "languages": [],
      "name": "Hybrid Parallel Contour Trees, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://gitlab.kitware.com/vtk/vtk-m/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.kitware.com/vtk/vtk-m",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ]
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The ParSplice code implements the Parallel Trajectory Splicing algorithm described in [1]. This method is part of the Accelerated Molecular Dynamics family of techniques developed in Los Alamos National Laboratory over the last 16 years. These methods aim at generating high-quality trajectories of ensembles of atoms in materials. ParSplice uses multiple independent replicas of the system in order to parallelize the generation of such trajectories in the time domain, enabling simulations of systems of modest size over very long timescales. ParSplice includes capabilities to store configurations of the system, to generate and distribute tasks across a large number of processors, and to harvest the results of these tasks to generate long trajectories. ParSplice is a management layer that orchestrate large number of calculations, but it does not perform the actual molecular dynamics itself; this is done by external molecular dynamics engines. [1] Danny Perez, Ekin D Cubuk, Amos Waterland, Efthimios Kaxiras, Arthur F Voter, Long-time dynamics through parallel trajectory splicing, Journal of chemical theory and computation 12, 18 (2015)",
      "laborHours": 0,
      "languages": [],
      "name": "ParSplice, Version 1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://gitlab.com/dannyperez/parsplice/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.com/dannyperez/parsplice",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ]
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "TRPS code was developed for the project \"Time Resolved Phonon Spectroscopy\". Routines contained in this piece of software were specially created to model phonon generation and tracking within materials that interact with ionizing radiation, particularly applicable to the modeling of cryogenic radiation detectors for dark matter and neutrino research. These routines were created to link seamlessly with the open source Geant4 framework for the modeling of radiation transport in matter, with the explicit intent of open sourcing them for eventual integration into that code base.",
      "laborHours": 0,
      "languages": [],
      "name": "Time Resolved Phonon Spectroscopy, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/goett/TRPS/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/goett/TRPS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "It can be challenging to interface National Instruments LabVIEW (http://www.ni.com/labview/) with EPICS (http://www.aps.anl.gov/epics/). Such interface is required when an instrument control program was developed in LabVIEW but it also has to be part of global control system. This is frequently useful in big accelerator facilities. The Channel Access Server is written in LabVIEW, so it works on any hardware/software platform where LabVIEW is available. It provides full server functionality, so any EPICS client can communicate with it.",
      "laborHours": 0,
      "languages": [],
      "name": "EPICS Channel Access Server for LabVIEW",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://code.ornl.gov/az9/LVCA/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://code.ornl.gov/az9/LVCA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ]
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Fortran language does not provide a standard library that implements generic containers, like linked lists, trees, dictionaries, etc. The GFC software provides an implementation of generic Fortran containers natively written in Fortran 2003/2008 language. The following containers are either already implemented or planned: Stack (done), Linked list (done), Tree (done), Dictionary (done), Queue (planned), Priority queue (planned).",
      "laborHours": 0,
      "languages": [],
      "name": "Generic Fortran Containers (GFC)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.com/DmitryLyakh/GFC",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ]
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Flexible visible exploration of long, high-resolution time series from multiple sensor streams is a challenge in several domains. Falcon is a visual analytics approach that helps researchers acquire a deep understanding of patterns in log and imagery data. Falcon allows users to interactively explore large, time-oriented data sets from multiple linked perspectives. Falcon provides overviews, detailed views, and unique segmented time series visualizations with multiple levels of detail. These capabilities are applicable to the analysis of any quantitative time series.",
      "laborHours": 0,
      "languages": [],
      "name": "Falcon: A Temporal Visual Analysis System",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/csteed/falcon",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "DFNWorks is a suite of software for generating and solving flow and transport physics on a Discrete Fracture Network (DFN). The suite is composed of three components: DFNGen: Stochastic fracture generation, mesh generation, model setup; DFNFlow: Flow solution using PFLOTRAN or FEHM control volume formulation solver; DFNTrans: Particle tracking transport; DFNGen Algorithm Description: This is a workflow that uses C++ software version for fracture generation, Python scripts written by the authors and the LaGriT software to generate computational mesh. DFNFlow The solution of flow in porous media is accomplished by coupling DFNGen output with the existing software packages FEHM and PFLOTRAN. The DFNWorks workflow involves modules and scripts that translate DFNGen output to formats compatible with FEHM and PFLOTRAN input. FEHM LA-CC-2012-083 PFLOTRAN LA-CC-09-047 LaGriT LA-CC-07-38 DFNTrans Stand-alone particle tracking algorithm that takes FEHM/PFLOTRAN flow solution as output and computes velocity field and advects particles.",
      "laborHours": 0,
      "languages": [],
      "name": "dfnWorks, Version 2.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dfnWorks/dfnWorks-Version2.0",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This code is made to model the effect of muons in a future double beta decay array with the Geant4 software framework.",
      "laborHours": 0,
      "languages": [],
      "name": "Muon GUORE - Geant4 MACRO for nextGEN 0vBB",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/massarczyk/Muon_GUORE/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/massarczyk/Muon_GUORE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Securely transferring timing information in the electrical grid is a critical component of securing the nation's infrastructure from cyber attacks. One solution to this problem is to use quantum information to securely transfer the timing information across sites. This software provides such an infrastructure using a standard Java webserver that pulls the quantum information from associated hardware.",
      "laborHours": 0,
      "languages": [],
      "name": "TASQC Quantum Key Transfer Program",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL/TASQC/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL/TASQC",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Finding Godsil-McKay switching sets in graphs is one way to demonstrate that a specific graph is not determined by its spectrum--the eigenvalues of its adjacency matrix. An important area of active research in pure mathematics is determining which graphs are determined by their spectra, i.e. when the spectrum of the adjacency matrix uniquely determines the underlying graph. We are interested in exploring the spectra of graphs in the Johnson scheme and specifically seek to determine which of these graphs are determined by their spectra. Given a graph G, a Godsil-McKay switching set is an induced subgraph H on 2k vertices with the following properties: I) H is regular, ii) every vertex in G/H is adjacent to either 0, k, or 2k vertices of H, and iii) at least one vertex in G/H is adjacent to k vertices in H. The software package examines each subset of a user specified size to determine whether or not it satisfies those 3 conditions. The software makes use of the massive parallel processing power of CUDA enabled GPUs. It also exploits the vertex transitivity of graphs in the Johnson scheme by reasoning that if G has a Godsil-McKay switching set, then it has a switching set which includes vertex 1. While the code (in its current state) is tuned to this specific problem, the method of examining each induced subgraph of G can be easily re-written to check for any user specified conditions on the subgraphs and can therefore be used much more broadly.",
      "laborHours": 0,
      "languages": [],
      "name": "CUDA Enabled Graph Subset Examiner",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/jtjohnston/computational_combinatorics/blob/master/GM-switching/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jtjohnston/computational_combinatorics/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Hybrid programming models for beyond-CMOS technologies will prove critical for integrating new computing technologies alongside our existing infrastructure. Unfortunately the software infrastructure required to enable this is lacking or not available. XACC is a programming framework for extreme-scale, post-exascale accelerator architectures that integrates alongside existing conventional applications. It is a pluggable framework for programming languages developed for next-gen computing hardware architectures like quantum and neuromorphic computing. It lets computational scientists efficiently off-load classically intractable work to attached accelerators through user-friendly Kernel definitions. XACC makes post-exascale hybrid programming approachable for domain computational scientists.",
      "laborHours": 0,
      "languages": [],
      "name": "XACC - eXtreme-scale Accelerator Programming Framework",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/xacc",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "There is a lack of state-of-the-art HPC simulation tools for simulating general quantum computing. Furthermore, there are no real software tools that integrate current quantum computers into existing classical HPC workflows. This product, the Quantum Virtual Machine (QVM), solves this problem by providing an extensible framework for pluggable virtual, or physical, quantum processing units (QPUs). It enables the execution of low level quantum assembly codes and returns the results of such executions.",
      "laborHours": 0,
      "languages": [],
      "name": "Quantum Virtual Machine (QVM)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL-QCI/qvm",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/qvm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "There is a lack of state-of-the-art quantum computing simulation software that scales on heterogeneous systems like Titan. Tensor Network Quantum Virtual Machine (TNQVM) provides a quantum simulator that leverages a distributed network of GPUs to simulate quantum circuits in a manner that leverages recent results from tensor network theory.",
      "laborHours": 0,
      "languages": [],
      "name": "Tensor Network Quantum Virtual Machine (TNQVM)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL-QCI/tnqvm/blob/master/examples/CMakeLists.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/tnqvm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "There are many common software patterns and utilities for the ORNL Quantum Computing Institute that can and should be shared across projects. Otherwise we find duplication of code which adds unwanted complexity. This is a software product seeks to alleviate this by providing common utilities such as object factories, graph data structures, parameter input mechanisms, etc., for other software products within the ORNL Quantum Computing Institute. This work enables pure basic research, has no export controlled utilities, and has no real commercial value.",
      "laborHours": 0,
      "languages": [],
      "name": "QCI Common",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/common",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "In this era of data-driven decisions and discovery where Big Data is producing Bigger Data, data scientists at the Oak Ridge National Laboratory are leveraging unique leadership infrastructure (e.g., Urika XA and Urika GD appliances) to develop scalable algorithms for semantic, logical and statistical reasoning with Big Data (i.e., data stored in databases as well as unstructured data in documents). ORiGAMI is a next-generation knowledge-discovery framework that is: (a) knowledge nurturing (i.e., evolves seamlessly with newer knowledge and data), (b) smart and curious (i.e. using information-foraging and reasoning algorithms to digest content) and (c) synergistic (i.e., interfaces computers with what they do best to help subject-matter-experts do their best. ORiGAMI has been demonstrated using the National Library of Medicine's SEMANTIC MEDLINE (archive of medical knowledge since 1994).",
      "laborHours": 0,
      "languages": [],
      "name": "Oak Ridge Graph Analytics for Medical Innovation (ORiGAMI)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ssrangan/origami/blob/master/Open%20Source%20Software%20License.pdf",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ssrangan/origami",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Portage is a software library system for physics remapping (mapping physics variables from one computational mesh to another) either within a single simulation code or between two disparate simulation codes. Portage is designed to utilize advanced-architecture compute platforms and to be easily extensible by third parties.",
      "laborHours": 0,
      "languages": [],
      "name": "Portage, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/laristra/portage/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/laristra/portage",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "In order to support engineering analysis of Virtual Environment for Reactor Analysis (VERA) model results, the Consortium for Advanced Simulation of Light Water Reactors (CASL) needs a tool that provides visualizations of HDF5 files that adhere to the VERAOUT specification. VERAView provides an interactive graphical interface for the visualization and engineering analyses of output data from VERA. The Python-based software provides instantaneous 2D and 3D images, 1D plots, and alphanumeric data from VERA multi-physics simulations.",
      "laborHours": 0,
      "languages": [],
      "name": "VERAView",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/CASL/VERAview",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The iESM is a simulation code that represents the physical and biological aspects of Earth's climate system, and also includes the macro-economic and demographic properties of human societies. The human aspect of the simulation code is focused in particular on the effects of human activities on land use and land cover change, but also includes aspects such as energy economies. The time frame for predictions with iESM is approximately 1970 through 2100.",
      "laborHours": 0,
      "languages": [],
      "name": "Integrated Earth System Model (iESM)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ACME-Climate/iESM/blob/master/license.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ACME-Climate/iESM/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MultiMatTest is a demonstration code to support a talk and paper titled A Comparative Study of Multi-material Data Structures for Computational Physics Applications. The application times basic operations for different representations of multi-material data structures.",
      "laborHours": 0,
      "languages": [],
      "name": "MultiMatTest, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/MultiMatTest/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LANL/MultiMatTest",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Ring current Atmosphere interactions Model with Self-Consistent magnetic field (B) is a unique code that combines a kinetic model of ring current plasma with a three dimensional force-balanced model of the terrestrial magnetic field. The kinetic portion, RAM, solves the kinetic equation to yield the bounce-averaged distribution function as a function of azimuth, radial distance, energy and pitch angle for three ion species (H+, He+, and O+) and, optionally, electrons. The domain is a circle in the Solar-Magnetic (SM) equatorial plane with a radial span of 2 to 6.5 RE. It has an energy range of approximately 100 eV to 500 KeV. The 3-D force balanced magnetic field model, SCB, balances the JxB force with the divergence of the general pressure tensor to calculate the magnetic field configuration within its domain. The domain ranges from near the Earth’s surface, where the field is assumed dipolar, to the shell created by field lines passing through the SM equatorial plane at a radial distance of 6.5 RE. The two codes work in tandem, with RAM providing anisotropic pressure to SCB and SCB returning the self-consistent magnetic field through which RAM plasma is advected.",
      "laborHours": 0,
      "languages": [],
      "name": "Ring current Atmosphere interactions Model with Self-Consistent Magnetic field",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/RAM-SCB/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/RAM-SCB",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Mercat is a highly scalable property software package for robust of analysis of features in next-generation sequencing data and observed unique peptides from metaproteomic data. Mercat is offered in python 3.5/anaconda3, is multiparellel and is easily installed using bioconda/conda recipes. Mercat inputs include assembled contigs, raw sequence reads from any platform, and unique peptide files obtained from proteomics with feature abundance counts tables. Mercat is the only software available that allows for direct analysis of data properties without a data-dependent search tools such as BLAST or diamond for compositional analysis of whole community shotgun sequencing (e.g. metagenomes and/or metatranscriptomes) or metaproteomic data.",
      "laborHours": 0,
      "languages": [],
      "name": "Mercat",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/mercat/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/mercat",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Pinyon is a tool that stores steps involved in creating a model derived from a collection of data. The main function of Pinyon is to store descriptions of calculations used to analyze or visualize the data in a database, and allow users to view the results of these calculations via a web interface. Additionally, users may also use the web interface to make adjustments to the calculations and rerun the entire collection of analysis steps automatically.",
      "laborHours": 0,
      "languages": [],
      "name": "Pinyon, Version 0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/pinyon/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/pinyon",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "System for converting DESIRE (Direct Executing Simulation in Real Time) simulation models to executable code models (C# / C++). These converted models are used as the basis for 2 products, one of which is the focus of this review: an engineering design interface for Fissile Solution Systems. ModelConverter.exe (C#) converts DESIRE model inputs to a C++ plug-in subclass. SimApp.exe (C# / C++) has a C++ dll that is a numerical integration engine that the Converted models plug into. The engineering design interface is a C# GUI that calls on the C++ dll to execute a particular converted model. The GUI allows the user to specify the length of a simulation, run the simulation, view data plots and data tables. Stability plots may also be produced and manipulated. The engineering design interface will be released as source code and executable; the model converter source is also intended for release.",
      "laborHours": 0,
      "languages": [],
      "name": "SimApp 1.8.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/determan/SimApp1.8x/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/determan/SimApp1.8x.git",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Grappa is a latency tolerant runtime system for mass market computer systems comprised of multiple nodes having x86 multicore processors and infiniband interconnect. Grappa is designed to enable in-memory irregular applications written in the C++ programming language to scale up on multiprocessor systems. Grappa addresses the load balance, communication, and synchronization challenges posed by running applications that do not partition evenly across large systems. Two mechanisms are essential to its success: fast task switching and message aggregation. Fast task switching enables processors to tolerate communication and synchronization delays; aggregation sustains high bandwidth on low injection rate networks.",
      "laborHours": 0,
      "languages": [],
      "name": "A Latency Tolerant Runtime System for Mass Market Computer Systems",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/uwsampa/grappa",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The GIBS software program is a Grand Canonical Monte Carlo (GCMC) simulation program (written in C++) that can be used for 1) computing the excess chemical potential of ions and the mean activity coefficients of salts in homogeneous electrolyte solutions; and, 2) for computing the distribution of ions around fixed macromolecules such as, nucleic acids and proteins. The solvent can be represented as neutral hard spheres or as a dielectric continuum. The ions are represented as charged hard spheres that can interact via Coulomb, hard-sphere, or Lennard-Jones potentials. In addition to hard-sphere repulsions, the ions can also be made to interact with the solvent hard spheres via short-ranged attractive square-well potentials.",
      "laborHours": 0,
      "languages": [],
      "name": "A Grand Canonical Monte Carlo simulation program for computing ion distributions around biomolecules in hard sphere solvents",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://store.pnnl.gov/content/30876-615-os",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Electrostatics/GIBS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Futility package contains the following: 1) Definition of the size of integers and real numbers; 2) A generic Unit test harness; 3) Definitions for some basic extensions to the Fortran language: arbitrary length strings, a parameter list construct, exception handlers, command line processor, timers; 4) Geometry definitions: point, line, plane, box, cylinder, polyhedron; 5) File wrapper functions: standard Fortran input/output files, Fortran binary files, HDF5 files; 6) Parallel wrapper functions: MPI, and Open MP abstraction layers, partitioning algorithms; 7) Math utilities: BLAS, Matrix and Vector definitions, Linear Solver methods and wrappers for other TPLs (PETSC, MKL, etc), preconditioner classes; 8) Misc: random number generator, water saturation properties, sorting algorithms.",
      "laborHours": 0,
      "languages": [],
      "name": "Futility",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/CASL/Futility",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software provides a real-time processing system for sonar to detect and track animals, and to extract water column biomass statistics in order to facilitate continuous monitoring of an underwater environment. The Nekton Interaction Monitoring System (NIMS) extracts and archives tracking and backscatter statistics data from a real-time stream of data from a sonar device. NIMS also sends real-time tracking messages over the network that can be used by other systems to generate other metrics or to trigger instruments such as an optical video camera. A web-based user interface provides remote monitoring and control. NIMS currently supports three popular sonar devices: M3 multi-beam sonar (Kongsberg), EK60 split-beam echo-sounder (Simrad) and BlueView acoustic camera (Teledyne).",
      "laborHours": 0,
      "languages": [],
      "name": "Nekton Interaction Monitoring System",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/nims/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/nims",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "TESP combines existing domain simulators in the electric power grid, with new transactive agents, growth models and evaluation scripts. The existing domain simulators include GridLAB-D for the distribution grid and single-family residential buildings, MATPOWER for transmission and bulk generation, and EnergyPlus for large buildings. More are planned for subsequent versions of TESP. The new elements are: TEAgents - simulate market participants and transactive systems for market clearing. Some of this functionality was extracted from GridLAB-D and implemented in Python for customization by PNNL and others; Growth Model - a means for simulating system changes over a multiyear period, including both normal load growth and specific investment decisions. Customizable in Python code; and Evaluation Script - a means of evaluating different transactive systems through customizable post-processing in Python code. TESP provides a method for other researchers and vendors to design transactive systems, and test them in a virtual environment. It allows customization of the key components by modifying Python code.",
      "laborHours": 0,
      "languages": [],
      "name": "Transactive Energy Simulation Platform",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/tesp/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/tesp",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Haystack is a software agent platform for user emulation. We are leveraging python and the SPADE software packages to develop an architecture and platform where software agents can be sent actuation behaviors, configured with different behavior profiles (time based, event based, probability based, etc.), and controlled/monitored from a central control unit. The haystack agent platform provides the ability to model and simulate user behavior in cyber systems. This eliminates the need to fund real users to provide this interaction, provides control such that researchers can randomize, hold-steady, or model whatever behavior that want to study without running afoul of IRB requirements, and provides a documented truth that enables understanding what happened in and experiment and provides for repeatability.",
      "laborHours": 0,
      "languages": [],
      "name": "Haystack",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/haystack",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This code solves the gray thermal radiative transfer (TRT) equations in parallel using simple opacities and Cartesian meshes. Although Branson solves the TRT equations it is not designed to model radiation transport: Branson contains simple physics and does not have a multigroup treatment, nor can it use physical material data. The opacities have are simple polynomials in temperature there is a limited ability to specify complex geometries and sources. Branson was designed only to capture the computational demands of production IMC codes, especially in large parallel runs. It was also intended to foster collaboration with vendors, universities and other DOE partners. Branson is similar in character to the neutron transport proxy-app Quicksilver from LLNL, which was recently open-sourced.",
      "laborHours": 0,
      "languages": [],
      "name": "Branson: A Mini-App for Studying Parallel IMC, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/branson/blob/develop/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/branson",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "WARP, which can stand for ``Weaving All the Random Particles,'' is a three-dimensional (3D) continuous energy Monte Carlo neutron transport code developed at UC Berkeley to efficiently execute on NVIDIA graphics processing unit (GPU) platforms. WARP accelerates Monte Carlo simulations while preserving the benefits of using the Monte Carlo method, namely, that very few physical and geometrical simplifications are applied. WARP is able to calculate multiplication factors, neutron flux distributions (in both space and energy), and fission source distributions for time-independent neutron transport problems. It can run in both criticality or fixed source modes, but fixed source mode is currently not robust, optimized, or maintained in the newest version. WARP can transport neutrons in unrestricted arrangements of parallelepipeds, hexagonal prisms, cylinders, and spheres. The goal of developing WARP is to investigate algorithms that can grow into a full-featured, continuous energy, Monte Carlo neutron transport code that is accelerated by running on GPUs. The crux of the effort is to make Monte Carlo calculations faster while producing accurate results. Modern supercomputers are commonly being built with GPU coprocessor cards in their nodes to increase their computational efficiency and performance. GPUs execute efficiently on data-parallel problems, but most CPU codes, including those for Monte Carlo neutral particle transport, are predominantly task-parallel. WARP uses a data-parallel neutron transport algorithm to take advantage of the computing power GPUs offer.",
      "laborHours": 0,
      "languages": [],
      "name": "WARP",
      "organization": "Office of Scientific and Technical Information (OSTI)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/sellitforcache/warp/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sellitforcache/warp",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Office of Scientific and Technical Information (OSTI)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Memory systems are expected to get evermore complicated in the coming years, and it isn't clear exactly what form that complexity will take. On the software side, a simple, flexible way of identifying and working with memory pools is needed. Additionally, most developers seek code portability and do not want to learn the intricacies of complex memory. Hence, we believe that a library for interacting with complex memory systems should expose two kinds of abstraction: First, a low-level, mechanism-based interface designed for the runtime or advanced user that wants complete control, with its focus on simplified representation but with all decisions left to the caller. Second, a high-level, policy-based interface designed for ease of use for the application developer, in which we aim for best-practice decisions based on application intent. We have developed such a library, called SICM: Simplified Interface to Complex Memory.",
      "laborHours": 0,
      "languages": [],
      "name": "Simplified Interface to Complex Memory Hierarchies 1.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/SICM",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "CHROTRAN is a fork of the widely-used PFLOTRAN flow and reactive transport numerical simulation code. It implements custom physics and chemistry appropriate to the design of in-situ reduction of heavy metals such as Cr(VI) in groundwater. CHROTRAN includes full dynamics for five species: the metal to be remediated, an electron donor, biofilm, a nontoxic conservative bio-inhibitor, and a biocide. Direct abiotic reduction by donor-metal interaction as well as donor-driven biomass growth and bio-reduction are modeled, along with crucial processes such as donor sorption, and biofilm inactivation. The software implementation handles heterogeneous flow fields, arbitrarily many chemical species and amendment injection points, and features full coupling between flow and reactive transport, allowing for assessment of the effect of bio-fouling.",
      "laborHours": 0,
      "languages": [],
      "name": "CHROTRAN, 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/scottkalevhansen/CHROTRAN-release",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MASS1 simulates open channel hydrodynamics and transport in branched channel networks, using cross-section averaged forms of the continuity, momentum, and convection diffusion equations. Thermal energy transport (temperature), including meteorological influences is supported. The thermodynamics of total dissolved gas (TDG) can be directly simulated. MASS1 has been developed over the last 20 years. It is currently being used on DOE projects that require MASS1 to beopen source. Hence, the authors would like to distribute MASS1 in source form.",
      "laborHours": 0,
      "languages": [],
      "name": "Modular Aquatic Simulation System 1D",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/mass1/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/mass1/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Synthetic Proxy Infrastructure for Task Evaluation is a proxy application designed to support application developers in gauging the performance of various task granularities when determining how best to utilize task based programming models.The infrastructure is designed to provide examples of common communication patterns with a synthetic workload intended to provide performance data to evaluate programming model and platform overheads for the purpose of determining task granularity for task decomposition purposes. This is presented as a reference implementation of a proxy application with run-time configurable input and output task dependencies ranging from an embarrassingly parallel scenario to patterns with stencil-like dependencies upon their nearest neighbors. Once all, if any, inputs are satisfied each task will execute a synthetic workload (a simple DGEMM of in this case) of varying size and output all, if any, outputs to the next tasks.The intent is for this reference implementation to be implemented as a proxy app in different programming models so as to provide the same infrastructure and to allow for application developers to simulate their own communication needs to assist in task decomposition under various models on a given platform.",
      "laborHours": 0,
      "languages": [],
      "name": "Synthetic Proxy Infrastructure for Task Evaluation",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/spite/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/spite",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The CosmicEmu implements a Gaussian process emulation scheme to predict the dark matter and dark matter + neutrino power spectra over a range of physical parameters that describe the composition and evolution of the Universe. The procedure can produce thousands of spectra per second, much faster than the complex n-body simulations used to produce the training set, which can take weeks per simulation. The training simulations, their design, and the general scheme is described in Lawrence et al. (2010), Heitmann et al. (2014), Heitmann et al. (2016), and an upcoming paper.",
      "laborHours": 0,
      "languages": [],
      "name": "CosmicEmu, Version 2.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/CosmicEmu/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/CosmicEmu",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "HELICS is designed to support very-large-scale (100,000+ federates) cosimulations with off-the-shelf power-system, communication, market, and end-use tools. Other key features include cross platform operating system support, the integration of both event driven (e.g., packetized communication) and time-series (e.g., power flow) simulations, and the ability to co-iterate among federates to ensure physical model convergence at each time step.",
      "laborHours": 0,
      "languages": [],
      "name": "Hierarchical Engine for Large-scale Infrastructure Co-Simulation",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/GMLC-TDC/HELICS-src/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/GMLC-TDC/HELICS-src",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ECoG ClusterFlow is a novel multi-scale visual analysis system for the detailed exploration of dynamic functional connectivity graphs obtained through electrocorticography.",
      "laborHours": 0,
      "languages": [],
      "name": "ECoG Cluster Flow v1.0",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/sugeerth/ECoG-ClusterFlow/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sugeerth/ECoG-ClusterFlow/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Small Python package to compute tomographic reconstructions using a reconstruction method published in: Pelt, D.M., & De Andrade, V. (2017). Improved tomographic reconstruction of large-scale real-world data by filter optimization. Advanced Structural and Chemical Imaging 2: 17; and Pelt, D. M., & Batenburg, K. J. (2015). Accurately approximating algebraic tomographic reconstruction by filtered backprojection. In Proceedings of The 13th International Meeting on Fully Three-Dimensional Image Reconstruction in Radiology and Nuclear Medicine (pp. 158-161).",
      "laborHours": 0,
      "languages": [],
      "name": "SIRT-FILTER v1.0.0",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://gitlab.com/dmpelt/sirtfilter/blob/master/license.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.com/dmpelt/sirtfilter",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ]
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "New contributions to the existing open source project called 'progressbars2.\" Improvements were created for use in JBEI software, but are generally useful to the open source software community.",
      "laborHours": 0,
      "languages": [],
      "name": "progressbar2",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/WoLpH/python-progressbar",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Equilibrium thermodynamics underpins many of the technologies used throughout theoretical physics, yet verification of the various theoretical models in the open literature remains challenging. EOSlib provides a single, consistent, verifiable implementation of these models, in a single, easy-to-use software package. It consists of three parts: a software library implementing various published equation-of-state (EOS) models; a database of fitting parameters for various materials for these models; and a number of useful utility functions for simplifying thermodynamic calculations such as computing Hugoniot curves or Riemann problem solutions. Ready availability of this library will enable reliable code-to- code testing of equation-of-state implementations, as well as a starting point for more rigorous verification work. EOSlib also provides a single, consistent API for its analytic and tabular EOS models, which simplifies the process of comparing models for a particular application.",
      "laborHours": 0,
      "languages": [],
      "name": "EOSlib, Version 3",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/EOSlib/blob/github/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/EOSlib",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Virtual Machine Builder is a graphical user interface for use and modification of virtual machine templates using Hashi Corp packer to perform virtual machine creation.",
      "laborHours": 0,
      "languages": [],
      "name": "Virtual Machine Builder",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/csd-dev-tools/VmBuilder",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Jali is a parallel unstructured mesh infrastructure library designed for use by multi-physics simulations. It supports 2D and 3D arbitrary polyhedral meshes distributed over hundreds to thousands of nodes. Jali can read write Exodus II meshes along with fields and sets on the mesh and support for other formats is partially implemented or is (https://github.com/MeshToolkit/MSTK), an open source general purpose unstructured mesh infrastructure library from Los Alamos National Laboratory. While it has been made to work with other mesh frameworks such as MOAB and STKmesh in the past, support for maintaining the interface to these frameworks has been suspended for now. Jali supports distributed as well as on-node parallelism. Support of on-node parallelism is through direct use of the the mesh in multi-threaded constructs or through the use of \"tiles\" which are submeshes or sub-partitions of a partition destined for a compute node.",
      "laborHours": 0,
      "languages": [],
      "name": "Jali - Unstructured Mesh Infrastructure for Multi-Physics Applications",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/jali",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "At exascale, the challenge becomes to develop applications that run at scale and use exascale platforms reliably, efficiently, and flexibly. Workflows become much more complex because they must seamlessly integrate simulation and data analytics. They must include down-sampling, post-processing, feature extraction, and visualization. Power and data transfer limitations require these analysis tasks to be run in-situ or in-transit. We expect successful workflows will comprise multiple linked simulations along with tens of analysis routines. Users will have limited development time at scale and, therefore, must have rich tools to develop, debug, test, and deploy applications. At this scale, successful workflows will compose linked computations from an assortment of reliable, well-defined computation elements, ones that can come and go as required, based on the needs of the workflow over time. We propose a novel framework that utilizes both virtual machines (VMs) and software containers to create a workflow system that establishes a uniform build and execution environment (BEE) beyond the capabilities of current systems. In this environment, applications will run reliably and repeatably across heterogeneous hardware and software. Containers, both commercial (Docker and Rocket) and open-source (LXC and LXD), define a runtime that isolates all software dependencies from the machine operating system. Workflows may contain multiple containers that run different operating systems, different software, and even different versions of the same software. We will run containers in open-source virtual machines (KVM) and emulators (QEMU) so that workflows run on any machine entirely in user-space. On this platform of containers and virtual machines, we will deliver workflow software that provides services, including repeatable execution, provenance, checkpointing, and future proofing. We will capture provenance about how containers were launched and how they interact to annotate workflows for repeatable and partial re-execution. We will coordinate the physical snapshots of virtual machines with parallel programming constructs, such as barriers, to automate checkpoint and restart. We will also integrate with HPC-specific container runtimes to gain access to accelerators and other specialized hardware to preserve native performance. Containers will link development to continuous integration. When application developers check code in, it will automatically be tested on a suite of different software and hardware architectures.",
      "laborHours": 0,
      "languages": [],
      "name": "Build and Execute Environment",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl/BEE/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/BEE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Our Python module, colormap_module, presented here can be used to analyze and manipulate colormaps and has two main aims: (i) compare existing and new custom colormaps quantitatively by comparing their values in a color space, called CAM02-UCS, that directly shows how a human perceives their hue, saturation, and lightness values and (ii) create isoluminant colormaps from existing or custom colormaps and (iii) mix isoluminant colormap data with a 4th dimension of data by manipulating lightness values across the image and present the new image. Our module was designed to be a tool for the community to use as a whole, allowing scientists to present, analyze, and manipulate colormaps they have created and/or decided to use for a particular type of data. By being able to do this, the scientific community as a whole will think more about the colormaps they choose, see why particular colormaps are bad to use for certain types of data, and move toward using colormaps our eyes can interpret much more efficiently.",
      "laborHours": 0,
      "languages": [],
      "name": "colormap_util",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/jamienunez/cmaputil/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jamienunez/cmaputil",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Route Sanitizer is ORNL's connected vehicle moving object database de-identification tool and a graphical user interface to ORNL's connected vehicle de-identification algorithm. It uses the Google Chrome (soon to be Electron) platform so it will run on different computing platforms. The basic de-identification strategy is record redaction: portions of a vehicle trajectory (e.g. sequences of precise temporal spatial records) are removed. It does not alter retained records. The algorithm uses custom techniques to find areas within trajectories that may be considered private, then it suppresses those in addition to enough of the trajectory surrounding those locations to protect against \"inference attacks\" in a mathematically sound way. Map data is integrated into the process to make this possible.",
      "laborHours": 0,
      "languages": [],
      "name": "Route Sanitizer: Connected Vehicle Trajectory De-Identification Tool",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jmcarter9t/route-sanitizer",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "EDGE bioinformatics was developed to help biologists process Next Generation Sequencing data (in the form of raw FASTQ files), even if they have little to no bioinformatics expertise. EDGE is a highly integrated and interactive web-based platform that is capable of running many of the standard analyses that biologists require for viral, bacterial/archaeal, and metagenomic samples. EDGE provides the following analytical workflows: quality trimming and host removal, assembly and annotation, comparisons against known references, taxonomy classification of reads and contigs, whole genome SNP-based phylogenetic analysis, and PCR analysis. EDGE provides an intuitive web-based interface for user input, allows users to visualize and interact with selected results (e.g. JBrowse genome browser), and generates a final detailed PDF report. Results in the form of tables, text files, graphic files, and PDFs can be downloaded. A user management system allows tracking of an individual’s EDGE runs, along with the ability to share, post publicly, delete, or archive their results.",
      "laborHours": 0,
      "languages": [],
      "name": "Enabling the democratization of the genomics revolution with a fully integrated web-based bioinformatics platform, Version 1.5 and 1.x.",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LANL-Bioinformatics/EDGE.git",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A Git server (GitHub, GitLab, BitBucket) sends event notifications to the Civet server. These are either a \" Pull Request\" or a \"Push\" notification. Civet then checks the database to determine what tests need to be run and marks them as ready to run. Civet clients, running on dedicated machines, query the server for available jobs that are ready to run. When a client gets a job it executes the scripts attached to the job and report back to the server the output and exit status. When the client updates the server, the server will also update the Git server with the result of the job, as well as updating the main web page.",
      "laborHours": 0,
      "languages": [],
      "name": "CIVET: Continuous Integration, Verification, Enhancement, and Testing",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/civet",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Xanthos is a Python package designed to quantify and analyze global water availability in history and in future at 0.5° × 0.5° spatial resolution and a monthly time step under a changing climate. Its performance was also tested through real applications. It is open-source, extendable and convenient to researchers who work on long-term climate data for studies of global water supply, and Global Change Assessment Model (GCAM). This package integrates inherent global gridded data maps, I/O modules, Water-Balance Model modules and diagnostics modules by user-defined configuration.",
      "laborHours": 0,
      "languages": [],
      "name": "Xanthos",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/JGCRI/xanthos",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "WindSE is a tool for modeling atmospheric fluid flow within a wind plant and performing optimization of the turbine positions or operating settings.",
      "laborHours": 0,
      "languages": [],
      "name": "WindSE",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ryannking/WindSE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Functionally-Assembled Terrestrial Ecosystem Simulator (FATES) is a vegetation model for use in Earth system models (ESMs). The model includes a size- and age-structured representation of tree dynamics, competition between functionally diverse plant functional types, and the biophysics underpinning plant growth, competition, mortality, as well as the carbon, water, and energy exchange with the atmosphere. The FATES model is designed as a modular vegetation model that can be integrated within a host land model for inclusion in ESMs. The model is designed for use in global change studies to understand and project the responses and feedbacks between terrestrial ecosystems and the Earth system under changing climate and other forcings.",
      "laborHours": 0,
      "languages": [],
      "name": "The Functionally-Assembled Terrestrial Ecosystem Simulator Version 1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NGEET/fates-release/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NGEET/fates-release",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Charliecloud is a set of scripts to let users run a virtual cluster of virtual machines (VMs) on a desktop or supercomputer. Key functions include: 1. Creating (typically by installing an operating system from vendor media) and updating VM images; 2. Running a single VM; 3. Running multiple VMs in a virtual cluster. The virtual machines can talk to one another over the network and (in some cases) the outside world. This is accomplished by calling external programs such as QEMU and the Virtual Distributed Ethernet (VDE) suite. The goal is to let users have a virtual cluster containing nodes where they have privileged access, while isolating that privilege within the virtual cluster so it cannot affect the physical compute resources. Host configuration enforces security; this is not included in Charliecloud, though security guidelines are included in its documentation and Charliecloud is designed to facilitate such configuration. Charliecloud manages passing information from host computers into and out of the virtual machines, such as parameters of the virtual cluster, input data specified by the user, output data from virtual compute jobs, VM console display, and network connections (e.g., SSH or X11). Parameters for the virtual cluster (number of VMs, RAM and disk per VM, etc.) are specified by the user or gathered from the environment (e.g., SLURM environment variables). Example job scripts are included. These include computation examples (such as a \"hello world\" MPI job) as well as performance tests. They also include a security test script to verify that the virtual cluster is appropriately sandboxed. Tests include: 1. Pinging hosts inside and outside the virtual cluster to explore connectivity; 2. Port scans (again inside and outside) to see what services are available; 3. Sniffing tests to see what traffic is visible to running VMs; 4. IP address spoofing to test network functionality in this case; 5. File access tests to make sure host access permissions are enforced. This test script is not a comprehensive scanner and does not test for specific vulnerabilities. Importantly, no information about physical hosts or network topology is included in this script (or any of Charliecloud); while part of a sensible test, such information is specified by the user when the test is run. That is, one cannot learn anything about the LANL network or computing infrastructure by examining Charliecloud code.",
      "laborHours": 0,
      "languages": [],
      "name": "Charliecloud",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/hpc/charliecloud",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Los Alamos sea ice model (CICE) is the result of an effort to develop a computationally efficient sea ice component for a fully coupled atmosphere–land–ocean–ice global climate model. It was originally designed to be compatible with the Parallel Ocean Program (POP), an ocean circulation model developed at Los Alamos National Laboratory for use on massively parallel computers. CICE has several interacting components: a vertical thermodynamic model that computes local growth rates of snow and ice due to vertical conductive, radiative and turbulent fluxes, along with snowfall; an elastic-viscous-plastic model of ice dynamics, which predicts the velocity field of the ice pack based on a model of the material strength of the ice; an incremental remapping transport model that describes horizontal advection of the areal concentration, ice and snow volume and other state variables; and a ridging parameterization that transfers ice among thickness categories based on energetic balances and rates of strain. It also includes a biogeochemical model that describes evolution of the ice ecosystem. The CICE sea ice model is used for climate research as one component of complex global earth system models that include atmosphere, land, ocean and biogeochemistry components. It is also used for operational sea ice forecasting in the polar regions and in numerical weather prediction models.",
      "laborHours": 0,
      "languages": [],
      "name": "CICE, The Los Alamos Sea Ice Model",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/CICE-Consortium/CICE/blob/master/LICENSE.pdf",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/CICE-Consortium/CICE/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2018-05-23"
      },
      "description": "URBANopt is a user interface for creating and running district and city scale building energy simulations. The framework is built around the OpenStudio Urban Measures which are part of the OpenStudio project. Building footprints, building height, building type, and other data can be imported from public records or other sources. Footprints and locations for new buildings and district systems can also be specified. OpenStudio Measures are used to create starting point energy models and to model energy design features and efficiency measures for each building. URBANopt allows a user to pose several scenarios such as “what if 30% of the commercial retail buildings added roof top solar” or “what if all elementary schools converted to ground source heat pumps” and then visualize the impacts at a district or city scale. URBANopt is capable of modeling existing buildings, new construction, and district energy systems. URBANopt can be used to explore options for achieving Zero Energy across a collection of buildings (e.g., Zero Energy Districts).",
      "homepageURL": "https://www.nrel.gov/buildings/urbanopt.html",
      "laborHours": 0,
      "languages": [],
      "name": "Urban Renewable Building And Neighborhood Optimization",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://www.nrel.gov/buildings/urbanopt.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ]
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "FleCSPH is a multi-physics compact application that exercises FleCSI parallel data structures for tree-based particle methods. In particular, FleCSPH implements a smoothed-particle hydrodynamics (SPH) solver for the solution of Lagrangian problems in astrophysics and cosmology. FleCSPH includes support for gravitational forces using the fast multipole method (FMM).",
      "laborHours": 0,
      "languages": [],
      "name": "FleCSPH - a parallel and distributed SPH implementation based on the FleCSI framework",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/laristra/flecsph",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "In most Home Energy Management Systems (HEMS) available in the market, different devices running different communication protocols cannot interact with each other and exchange information. As a result of this integration, the information about different devices running different communication protocol can be accessible by other agents and devices running on VOLTTRON platform. The integration process can be used by any HEMS available in the market regardless of the programming language they use. If the existing HEMS provides an Application Programming Interface (API) based on the RESTFul architecture, that API can be used for integration. Our candidate HEMS in this project is home-assistant (Hass). An agent is implemented which can communicate with the Hass API and receives information about the devices loaded on the API. The agent publishes the information it receives on the VOLTTRON message bus so other agents can have access to this information. On the other side, for each type of devices, an agent is implemented such as Climate Agent, Lock Agent, Switch Agent, Light Agent, etc. Each of these agents is subscribed to the messages published on the message bus about their associated devices. These agents can also change the status of the devices by sending appropriate service calls to the API. Other agents and services on the platform can also access this information and coordinate their decision-making process based on this information.",
      "laborHours": 0,
      "languages": [],
      "name": "Home Energy Management System - VOLTTRON Integration",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/VOLTTRON/volttron-applications/blob/master/ornl/HomeAssistant-VOLTTRON-Integration-Agents/License",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/VOLTTRON/volttron-applications/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The VisIT Java Client (JVC) library is a lightweight thin client that is designed and written purely in the native language of Java (the Python & JavaScript versions of the library use the same concept) and communicates with any new unmodified standalone version of VisIT, a high performance computing parallel visualization toolkit, over traditional or web sockets and dynamically determines capabilities of the running VisIT instance whether local or remote.",
      "laborHours": 0,
      "languages": [],
      "name": "Visualization Software for VisIT Java Client",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/visit-vis/visit_java_client/blob/master/gov.lbnl.visit.swt/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/visit-vis/visit_java_client",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Knowledge graphs represent information as entities and relationships between them. For tasks such as natural language question answering or automated analysis of text, a knowledge graph provides valuable context to establish the specific type of entities being discussed. It allow us to derive better context about newly arriving information and leads to intelligent reasoning capabilities. We address two primary needs: A) Automated construction of knowledge graphs is a technically challenging, expensive process; and B) The ability to synthesize new information by monitoring newly emerging knowledge is a transformational capability that does not exist in state of the art systems.",
      "laborHours": 0,
      "languages": [],
      "name": "NOUS: A Knowledge Graph Management System",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/streaming-graphs/NOUS",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/streaming-graphs/NOUS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Pececillo is a proxy-app for the open source Truchas metal processing code (LA-CC-15-097). It implements many of the physics models used in Truchas: free-surface, incompressible Navier-Stokes fluid dynamics (e.g., water waves); heat transport, material phase change, view factor thermal radiation; species advection-diffusion; quasi-static, elastic/plastic solid mechanics with contact; electomagnetics (Maxwell's equations). The models are simplified versions that retain the fundamental computational complexity of the Truchas models while omitting many non-essential features and modeling capabilities. The purpose is to expose Truchas algorithms in a greatly simplified context where computer science problems related to parallel performance on advanced architectures can be more easily investigated. While Pececillo is capable of performing simulations representative of typical Truchas metal casting, welding, and additive manufacturing simulations, it lacks many of the modeling capabilites needed for real applications.",
      "laborHours": 0,
      "languages": [],
      "name": "Pececillo",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://gitlab.com/truchas/pececillo/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://gitlab.com/truchas/pececillo",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ]
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Graphical user interface for use and modification of virtual machine templates using Hashi Corp packer to perform virtual machine creation.",
      "laborHours": 0,
      "languages": [],
      "name": "ClockworkVMs",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/csd-dev-tools/VmBuilder",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The open source Project Haystack initiative defines meta data and communication standards related to data from buildings and intelligent devices. The Project Haystack REST API defines standard formats and operations for exchanging Haystack tagged data over HTTP. The HaystackRuby gem wraps calls to this REST API to enable Ruby application to easily integrate data hosted on a Project Haystack compliant server. The HaystackRuby gem was developed at the National Renewable Energy Lab to support applications related to campus energy. We hope that this tool may be useful to others.",
      "laborHours": 0,
      "languages": [],
      "name": "Haystack-Ruby",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/haystack_ruby",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "High-Throughput software platform to create/launch/analyze physics-related calculations. The front-end is a python API which allows the user to create any conceivable first-principles physics calculation. Is is coupled to an ipython interface to launch and retrieve large number of calculations. It was successfully used in high-throughput calculations of point defect formation enthalpies, compound formation enthalpies, and a genetic algorithm search of direct-gap silicon/germanium structures.",
      "laborHours": 0,
      "languages": [],
      "name": "LaDa™",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://pylada.github.io/pylada/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/mdavezac/LaDa",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "The MAGMA software package is a package created in the R scripting language that reads a SQL database and outputs tables and figures of important data. The SQL database is created by another R package called “rplexos” and uses the .zip solution file output by PLEXOS, which is commercially available production cost modeling software.",
      "laborHours": 0,
      "languages": [],
      "name": "Multi-area Grid Metrics Analyzer",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/MAGMA",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/MAGMA",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Knife-ovirt is code building on the chef, knife-cloud, fog, rbovirt projects that allows deployment of virtual machines on an ovirt cluster, and immediately bootstrap them into a chef managed infrastructure. (similar to knife-openstack project).",
      "laborHours": 0,
      "languages": [],
      "name": "Knife-ovirt",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/EMSL-MSC/knife-ovirt",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software is intended to be part of an open source effort regarding soils data. The software provides customized data ingestion scripts for soil carbon related data sets and scripts for output databases that conform to common templates.",
      "laborHours": 0,
      "languages": [],
      "name": "Soil Carbon Data: long tail recovery",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ktoddbrown/soils-long-tail-recovery",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "The software was produced to reproduce biologically relevant results and present them using clear and elegant graphs.",
      "laborHours": 0,
      "languages": [],
      "name": "Supplemental Material for Bernstein-2017-founders-species",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/bernstein-2017-founders-species",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/bernstein-2017-founders-species",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SimulatorToFMU is a software package written in Python which allows users to export a memoryless Python-driven simulation program or script as a Functional Mock-up Unit (FMU) for model exchange or co-simulation.In CyDER (Cyber Physical Co-simulation Platform for Distributed Energy Resources in Smart Grids), SimulatorToFMU will allow exporting OPAL-RT as an FMU. This will enable OPAL-RT to be linked to CYMDIST and GridDyn FMUs through a standardized open source interface.",
      "laborHours": 0,
      "languages": [],
      "name": "SimulatorToFMU v0.1",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LBNL-ETA/SimulatorToFMU/blob/master/simulatortofmu/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LBNL-ETA/SimulatorToFMU",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "YADAS is a software system for statistical analysis using Markov chain Monte Carlo (MCMC). As such, it performs Monte Carlo integration of probability distributions and generates estimates of unknown quantities based on data and expert opinion if available. Its architecture makes it extensible enough to be helpful in the analysis of any statistical model, so it is particularly useful for statistic researchers. YADAS features a versatile scheme for defining models, and another versatile scheme for defining sampling algorithms that includes a default starting place for most analyses.",
      "laborHours": 0,
      "languages": [],
      "name": "YADAS, Version 0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/gertvv/yadas/blob/master/COPYING.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gertvv/yadas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Rdtools provides a set of tools for quantifying the degradation of photovoltaic systems and modules.",
      "laborHours": 0,
      "languages": [],
      "name": "Rdtools",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/rdtools",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "PeleC is an adaptive-mesh compressible hydrodynamics code for reacting flows. It solves the compressible Navier-Stokes with multispecies transport in a block structured framework. The resulting algorithm is well suited for flows with localized resolution requirements and robust to discontinuities. User controllable refinement crieteria has the potential to result in extremely small numerical dissipation and dispersion, making this code appropriate for both research and applied usage. The code is built on the AMReX library which facilitates hierarchical parallelism and manages distributed memory parallism. PeleC algorithms are implemented to express shared memory parallelism.",
      "laborHours": 0,
      "languages": [],
      "name": "PELEC",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/jrood-nrel/PeleStuff/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jrood-nrel/PeleStuff",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "PelePhysics is a suite of physics packages that provides functionality of use to reacting hydrodynamics CFD codes. The initial release includes an interface to reaction rate mechanism evaluation, transport coefficient evaluation, and a generalized equation of state (EOS) facility. Both generic evaluators and interfaces to code from externally available tools (Fuego for chemical rates, EGLib for transport coefficients) are provided.",
      "laborHours": 0,
      "languages": [],
      "name": "PelePhysics",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/jrood-nrel/PeleStuff",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/jrood-nrel/PeleStuff",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Pacifica is a data management system developed for use at the Environmental and Molecular Sciences Laboratory (EMSL) used to collect, analyze, search and track data from instruments.",
      "laborHours": 0,
      "languages": [],
      "name": "Pacifica",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pacifica/pacifica",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A Python direct-mode interface to OpenDSS, a distribution system simulator for electric power systems.",
      "laborHours": 0,
      "languages": [],
      "name": "OpenDSSDirect.py",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/OpenDSSDirect.py/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/OpenDSSDirect.py",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Standard Energy Efficiency Data Platform® (SEED Platform) provides public agencies and other organizations with a standardized but flexible, cost-effective, secure, enterprise data platform to manage portfolio scale building performance data from a variety of sources. The SEED Platform streamlines the administrative effort required by public agencies implementing building performance and transparency programs.",
      "laborHours": 0,
      "languages": [],
      "name": "Standard Energy Efficiency Data Platform®",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/SEED-platform/seed/blob/develop/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/SEED-platform/seed",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The LK scripting language is a simple and fast computer programming language designed for easy integration with existing software to enable automation of tasks. The LK language is used by NREL’s System Advisor Model (SAM), the SAM Software Development Kit (SDK), and SolTrace products. LK is easy extensible and adaptable to new software due to its small footprint and is designed to be statically linked into other software. It is written in standard C++, is cross-platform (Windows, Linux, and OSX), and includes optional portions that enable direct integration with graphical user interfaces written in the open source C++ wxWidgets Version 3.0+ toolkit.",
      "laborHours": 0,
      "languages": [],
      "name": "LK Scripting Language",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/lk/blob/develop/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/lk",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Quantized State Systems (QSS) Solver with Functional Mock-Up Units (FMU) Support",
      "laborHours": 0,
      "languages": [],
      "name": "Quantized State Systems (QSS) Solver with Functional Mock-Up Units (FMU) Support",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/SOEP-QSS/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/SOEP-QSS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "BSF is a highly efficient pairwise similarity algorithm enabling extensive data mining.",
      "laborHours": 0,
      "languages": [],
      "name": "Blazing Signature Filter",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/bsf-core",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "The PLEXOS Input Data Generator (PIDG) is a tool that enables PLEXOS users to better version their data, automate data processing, collaborate in developing inputs, and transfer data between different production cost modeling and other power systems analysis software. PIDG can process data that is in a generalized format from multiple input sources, including CSV files, PostgreSQL databases, and PSS/E .raw files and write it to an Excel file that can be imported into PLEXOS with only limited manual intervention.",
      "laborHours": 0,
      "languages": [],
      "name": "PLEXOS Input Data Generator",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/PIDG/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/PIDG",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "LEAF Version 2.0 is a framework comprising of three models RUSLE2, WEPS, and AGNPS. The framework can predict row crop, crop residue, and energy crop yields at a sub-field resolutions for various combinations of soil, climate and crop management and residue harvesting practices. It estimates the loss of soil, carbon, and nutrients to the atmosphere, to the groundwater, and to runoff. It also models the overland flow of water and washed-off sediments, nutrients and other chemicals to provide estimates of sediment, nutrient, and chemical loadings to water bodies within a watershed. AGNPS model and wash-off calculations are the new additions to this version of LEAF. Development of LEAF software is supported by DOE's BETO program.",
      "laborHours": 0,
      "languages": [],
      "name": "Landscape Environmental Assessment Framework",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/IdahoLabCuttingBoard/LEAF",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SIEVAS provides an immersive visualization framework for connecting multiple systems in real time for data science. SIEVAS provides the ability to connect multiple COTS and GOTS products in a seamless fashion for data fusion, data analysis, and viewing. It provides this capability by using a combination of micro services, real time messaging, and web service compliant back-end system.",
      "laborHours": 0,
      "languages": [],
      "name": "Scientific & Intelligence Exascale Visualization Analysis System",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/SIEVAS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "LUNUS software for generating 3D maps of diffuse scattering from macromolecular X-ray crystallography diffraction images. A set of tools needed for advanced refinement of crystal structures and crystallographic charge density models. Includes tools for processing X--ray diffraction images, charge density maps, and structure factors for analysis of diffuse X-ray scattering and charge density variations in crystallography. Specific methods include: elementary algebraic operations on images and 3D lattices; fourier transform of images and 3D lattices; image processing to measure diffuse intensity; crystallographic refinement; and 3D integration of diffuse intensity.",
      "laborHours": 0,
      "languages": [],
      "name": "LUNUS, Version 0.1a",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/mewall/lunus/blob/master/00LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/mewall/lunus",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software implements a heterogeneous multiscale method (HMM), which involves solving a classical molecular dynamics (MD) problem and then computes the entropy production in order to compute the relaxation times towards equilibrium for use in a Bhatnagar-Gross-Krook (BGK) solver.",
      "laborHours": 0,
      "languages": [],
      "name": "BGK-MD, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/gilshohet/plasma-bgkmd/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gilshohet/plasma-bgkmd",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Building on the existing Multiplicative Attribute Graph (MAG) model, the software relaxes the assumptions of the MAG model allowing dataset expansion while replicating statistical properties.",
      "laborHours": 0,
      "languages": [],
      "name": "Realistic Simulation of Property Graphs",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/propgraph/pgm/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/propgraph/pgm",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Nmrfit reads the output from a nuclear magnetic resonance (NMR) experiment and, through a number of intuitive API calls, produces a least-squares fit of Voigt-function approximations via particle swarm optimization.",
      "laborHours": 0,
      "languages": [],
      "name": "nmrfit",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/nmrfit/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/nmrfit",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PolyPole is a numerical algorithm for the calculation of intra-granular fission gas release. In particular, the algorithm solves the gas diffusion problem in a fuel grain in time-varying conditions. The program has been extensively tested. PolyPole combines a high accuracy with a high computational efficiency and is ideally suited for application in fuel performance codes.",
      "laborHours": 0,
      "languages": [],
      "name": "Polypole Program For The Calculation Of Intra-granular Fission Gas Release",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mpl-2.0",
            "name": "MPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/IdahoLabCuttingBoard/PolyPole",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Idaho National Laboratory (INL) has teamed with University of Idaho and Boise State University to make the use of ADs more attractive by implementing a two-stage AD and coupling additional processes to the system. The addition of a polyhydroxyalkanoate (PHA) reactor, algae cultivation system, and a biomass treatment system such as fast-pyrolysis or hydrothermal liquefaction (HTL) would further sequester carbon and nutrients, as well as add valuable products that can be sold or used on-site to mitigate costs. The Decision-support for Digester-Algae IntegRation for Improved Environmental and Economic Sustainability (DAIRIEES) technoeconomic model will play a key role in evaluating the effectiveness and viability of this system to achieve economic and environmental sustainability by the dairy industry.",
      "laborHours": 0,
      "languages": [],
      "name": "Decision Support For Digester Algae Integration For Improved Environmental And Economic Sustainability",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mpl-2.0",
            "name": "MPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/IdahoLabCuttingBoard/DAIRIEES",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Water-Energy Simulation Toolset (WEST) is an interactive simulation model that helps visualize impacts of different stakeholders on water quantity and quality of a watershed. The case study is applied for the Snake River Basin with the fictional name Cutthroat River Basin. There are four groups of stakeholders of interest: hydropower, agriculture, flood control, and environmental protection. Currently, the quality component depicts nitrogen-nitrate contaminant. Users can easily interact with the model by changing certain inputs (climate change, fertilizer inputs, etc.) to observe the change over the entire system. Users can also change certain parameters to test their management policy.",
      "laborHours": 0,
      "languages": [],
      "name": "Water Energy Simulation Toolset",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/IdahoLabCuttingBoard/WEST",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This program has been designed to assist with the tracking of a sample from one analytical instrument to another such as SEM, microscopes, micro x-ray diffraction and other instruments where particular positions/locations on the sample are examined, photographed, etc. The software is designed to easily enter the position of fiducials and locations of interest such that in a future session in the same of different instrument the positions of interest can be re-found through using the known location fiducials in the current and reference session to transform the point into the current sessions coordinate system. The software is dialog box driven guiding the user through the necessary data entry and program choices. Information is stored in a series of text based extensible markup language (XML) files.",
      "laborHours": 0,
      "languages": [],
      "name": "Cross-instrument Analysis Correlation Software",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mpl-2.0",
            "name": "MPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/IdahoLabResearch/CIACS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "AMG is a parallel algebraic multigrid solver for linear systems arising from problems on unstructured grids. It has been derived directly from the BoomerAMG solver in the hypre library, a large linear solvers library that is being developed in the Center for Applied Scientific Computing (CASC) at LLNL and is very similar to the AMG2013 benchmark with additional optimizations. The driver provided in the benchmark can build various test problems. The default problem is a Laplace type problem with a 27-point stencil, which can be scaled up and is designed to solve a very large problem. A second problem simulates a time dependent problem, in which successively various smnllcr systems are solved.",
      "laborHours": 0,
      "languages": [],
      "name": "Algebraic Multigrid Benchmark",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/AMG",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The ProvEn Software is designed to analyze and monitor distributed scientific workflow application behavior in the context of its environment.",
      "laborHours": 0,
      "languages": [],
      "name": "Provenance Environment Services Software",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/ProvenanceEnvironment",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This is the repository for Building Energy Management Open Source Software (BEMOSS), which is an open source operating system that is engineered to improve sensing and control of equipment in small- and medium-sized commercial buildings. BEMOSS offers the following key features: (1) Open source, open architecture – BEMOSS is an open source operating system that is built upon VOLTTRON – a distributed agent platform developed by Pacific Northwest National Laboratory (PNNL). BEMOSS was designed to make it easy for hardware manufacturers to seamlessly interface their devices with BEMOSS. Software developers can also contribute to adding additional BEMOSS functionalities and applications. (2) Plug & play – BEMOSS was designed to automatically discover supported load controllers (including smart thermostats, VAV/RTUs, lighting load controllers and plug load controllers) in commercial buildings. (3) Interoperability – BEMOSS was designed to work with load control devices form different manufacturers that operate on different communication technologies and data exchange protocols. (4) Cost effectiveness – Implementation of BEMOSS deemed to be cost-effective as it was built upon a robust open source platform that can operate on a low-cost single-board computer, such as Odroid. This feature could contribute to its rapid deployment in small- or medium-sized commercial buildings. (5) Scalability and ease of deployment – With its multi-node architecture, BEMOSS provides a distributed architecture where load controllers in a multi-floor and high occupancy building could be monitored and controlled by multiple single-board computers hosting BEMOSS. This makes it possible for a building engineer to deploy BEMOSS in one zone of a building, be comfortable with its operation, and later on expand the deployment to the entire building to make it more energy efficient. (6) Ability to provide local and remote monitoring – BEMOSS provides both local and remote monitoring ability with role-based access control. (7) Security – In addition to built-in security features provided by VOLTTRON, BEMOSS provides enhanced security features, including BEMOSS discovery approval process, encrypted core-to-node communication, thermostat anti-tampering feature and many more. (8) Support from the Advisory Committee – BEMOSS was developed in consultation with an advisory committee from the beginning of the project. BEMOSS advisory committee comprises representatives from 22 organizations from government and industry.",
      "laborHours": 0,
      "languages": [],
      "name": "Building Energy Management Open Source Software",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/bemoss/BEMOSS3.5",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software is an application for Oelta3D, QT and OpenSceneGraph, all of which are extemal open source software.",
      "laborHours": 0,
      "languages": [],
      "name": "Open Facility Viewer",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/Open-Facility-Viewer",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "OpenEIS was created to provide standard methods for authoring, sharing, testing, using, and improving algorithms for operational building energy efficiency with building managers and building owners. OpenEIS is designed as a no-cost/low-cost solution that will propagate the fault detection and diagnostic (FDD) solutions into the marketplace by providing state- of- the-art analytical and diagnostic algorithms. As OpenEIS penetrates the market, demand by control system manufacturers and integrators serving small and medium commercial customers will help push these types of commercial software tool offerings into the broader marketplace.",
      "laborHours": 0,
      "languages": [],
      "name": "Open Energy Information System version 2.0",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/VOLTTRON/openeis/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/VOLTTRON/openeis",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The paramutate software package Is a tool to calculate the genotyplc and phenotyplc propagation of a gene drive that can be silenced with a homologuus trans-Inactivating panmutatlon, ln dlptera or other species with a slmUar-acttng pl RNA system/Plwi pathway. Method of SolaUon: paramutate uses rults of Mendelian, gene drive (I.e.. stimulated conversion), and maternal Inheritance to compute the propaptlon of a notional gene drive construct and Its trans-lnactlvat1n1 paramutatlon, throu1b a panmlctlc, fixed-size population reproducing In synchronous generations.",
      "laborHours": 0,
      "languages": [],
      "name": "Reversible Gene Drive Mechanism Utilizing Trana Inactivating Paramutatlons In Insects (paramutale 0.9)",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/RAJAPerf/blob/develop/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/RAJAPerf",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "The Hybrid Toolkit facilitates moving research algorithms into a production environment by creating useful abstractions that separate analytics developers from the intricacies of the production data formats, data flows, and result representations. The toolkit also assists developers with activities such as creating analysis feature vectors, converting between data structures, and creating data pipelines.",
      "laborHours": 0,
      "languages": [],
      "name": "The Hybrid Toolkit",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/sandialabs/The-Hybrid-Toolkit/tree/master/docs",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/The-Hybrid-Toolkit",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Demeter-W, an open-access software written in Python, consists of extensible module packages. It is developed with statistical downscaling algorithms, to spatially and temporally downscale water demand data into finer scale. The spatial resolution will be downscaled from region/basin scale to grid (0.5 geographic degree) scale and the temporal resolution will be downscaled from year to month. For better understanding of the driving forces and patterns for global water withdrawal, the researchers is able to utilize Demeter-W to reconstruct the data sets to examine the issues related to water withdrawals at fine spatial and temporal scales.",
      "laborHours": 0,
      "languages": [],
      "name": "Demeter-W",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/JGCRI/demeter-w",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "EnergyPlus(TM) is a whole building energy simulation program that engineers, architects, and researchers use to model both energy consumption - for heating, cooling, ventilation, lighting and plus and process loads - and water use in buildings.",
      "laborHours": 0,
      "languages": [],
      "name": "EnergyPlus",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/EnergyPlus/blob/develop/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/EnergyPlus",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Existing development tools for early stage design and scoping of energy systems are often time consuming to use, proprietary, and do not contain the necessary function to model complete systems (i.e., controls, primary, and secondary systems) in a common platform. The Modelica programming language based TRANSFORM tool (1) provides a standardized, common simulation environment for early design of energy systems (i.e., power plants), (2) provides a library of baseline component modules to be assembled into full plant models using available geometry, design, and thermal-hydraulic data, (3) defines modeling conventions for interconnecting component models, and (4) establishes user interfaces and support tools to facilitate simulation development (i.e., configuration and parameterization), execution, and results display and capture.",
      "laborHours": 0,
      "languages": [],
      "name": "TRANSFORM - TRANsient Simulation Framework of Reconfigurable Models",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL-TRANSFORM/TRANSFORM-Library/blob/master/LICENSE.pdf",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-TRANSFORM/TRANSFORM-Library",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The gr-uaslink software is an out of tree (OOT) module for GNU Radio. It provides a wrapper around pymavlink to allow MAVlink messages to be sent with GNU Radio.",
      "laborHours": 0,
      "languages": [],
      "name": "gr-uaslink",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/deptofdefense/gr-uaslink",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "HELICS ls a new open-source, cyber-physlcal-energy co-simulation framework for electric power systems. HELICS Is designed to support very-large-scale (100,000+ federates) co­simulations with off-the-shelf power-system, communication, market, and end-use tools. Other key features Include cross platform operating system support, the integration of both eventdrlven (e.g., packetlzed communication) and time-series (e.g.,power flow) simulations, and the ability to co-Iterate among federates to ensure physical model convergence at each time step.",
      "laborHours": 0,
      "languages": [],
      "name": "Hiearchical Engine for Large Scale Infrastructure Simulation",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/GMLC-TDC/HELICS-src/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/GMLC-Tdc/HELICS-src",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "VOLTTRON is an agent execution platform providing services to its agents that allow them to easily communicate with physical devices and other resources. VOLTTRON delivers an innovative distributed control and sensing software platform that supports modern control strategies, including agent-based and transaction-based controls. It enables mobile and stationary software agents to perform information gathering, processing, and control actions. VOLTTRON can independently manage a wide range of applications, such as HVAC systems, electric vehicles, distributed energy or entire building loads, leading to improved operational efficiency.",
      "laborHours": 0,
      "languages": [],
      "name": "Volttron version 5.0",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/VOLTTRON/volttron/blob/master/TERMS.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/VOLTTRON/volttron",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Originally developed in 1999, an updated version 8.8.0 with bug fixes was released on September 30th, 2017. EnergyPlus™ is a whole building energy simulation program that engineers, architects, and researchers use to model both energy consumption—for heating, cooling, ventilation, lighting and plug and process loads—and water use in buildings. EnergyPlus is a console-based program that reads input and writes output to text files. It ships with a number of utilities including IDF-Editor for creating input files using a simple spreadsheet-like interface, EP-Launch for managing input and output files and performing batch simulations, and EP-Compare for graphically comparing the results of two or more simulations. Several comprehensive graphical interfaces for EnergyPlus are also available. DOE does most of its work with EnergyPlus using the OpenStudio® software development kit and suite of applications. DOE releases major updates to EnergyPlus twice annually.",
      "laborHours": 0,
      "languages": [],
      "name": "EnergyPlus™",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/EnergyPlus/blob/develop/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/EnergyPlus",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "ExaMPM is a mini-application for the Material Point Method (MPM) for studying the application of MPM to future exascale computing systems. MPM is a general method for computational mechanics and fluids and is used in a wide variety of science and engineering disciplines to study problems with large deformations, phase change, fracture, and other phenomena. ExaMPM provides a reference implementation of MPM as described in the 1994 work of Sulsky et.al. (Sulsky, Deborah, Zhen Chen, and Howard L. Schreyer. \"A particle method for history-dependent materials.\" Computer methods in applied mechanics and engineering 118.1-2 (1994): 179-196.). The software can solve basic MPM problems in solid mechanics using the original algorithm of Sulsky with explicit time integration, basic geometries, and free-slip and no-slip boundary conditions as described in the reference. ExaMPM is intended to be used as a starting point to design new parallel algorithms for the next generation of DOE supercomputers.",
      "laborHours": 0,
      "languages": [],
      "name": "ExaMPM",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ECP-copa/ExaMPM",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ECP-copa/ExaMPM",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ProRad is a computer program that is used to generate synthetic images of proton (or other charged particles) radiographs. The proton radiographs arc images that arc obtained by sending energetic protons (or electrons or positrons, for example) through 11 plasma where electric and/or magnetic fields alter the particles trajectory, Dnd the variations me imaged on RC film, image plate, or equivalent",
      "laborHours": 0,
      "languages": [],
      "name": "Proton Radiography Imager:Generates Synthetic Proton Radiographs",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/prorad/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/prorad",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Sandia Engineering Analysis Code Access System (SEACAS) is a suite of preprocessing, post processing, translation, visualization, and utility applications supporting finite element analysis software using the Exodus database file format.",
      "laborHours": 0,
      "languages": [],
      "name": "Sandia Engineering Analysis Code Access System v. 2.0.1",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/gsjaardema/seacas/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/gsjaardema/seacas",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Python script for querying a list of web sites and their details from Splunk and dynamically creating tests for monitoring uptime. The data generated from this script is then sent back to Splunk for creating reports and alerts.",
      "laborHours": 0,
      "languages": [],
      "name": "Synthetic Transaction Test Generator for Websites",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/justinatpnnl/splunk_web_transactions_generator",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/justinatpnnl/splunk_web_transactions_generator",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Password management solutions exist, but few are designed for enterprise systems administrators sharing oncall rotations. Due to the Multi-Factor Level of Assurance 4 effort, DOE is now distributing PIV cards with cryptographically signed certificate and private key pairs to administrators and other security-significant users. We utilize this public key infrastructure (PKI) to encrypt passwords for other recipients in a secure way. This is cross platform (works on OSX and Linux systems), and has already been adopted internally by the NCCS systems administration staff to replace their old password book system.",
      "laborHours": 0,
      "languages": [],
      "name": "PKPass",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/olcf/pkpass",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/olcf/pkpass",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A pipeline for scanning domains to measure things like speed, accessibility, and HTTPS.",
      "laborHours": 0,
      "languages": [],
      "name": "domain-scan",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/18F/domain-scan/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/18F/domain-scan",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "libristra is a mathematical and computational utility and support library for codes. It includes utilities such as input parsing, commonly used mathematical routines, scientific units, etc.",
      "laborHours": 0,
      "languages": [],
      "name": "libristra",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/laristra/libristra",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Canary is an extensible water-quality change-detection tool for algorithm development. It has been developed in MATLAB and was developed as part of an IAG with the US EPA NHSRC.",
      "homepageURL": "https://software.sandia.gov/trac/canary",
      "laborHours": 0,
      "languages": [],
      "name": "CANARYV1.5",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/canary",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "YADAS is a software system for statistical analysis, using Markov chain Monte carlo (MCMC). As such, it performs Monte Carlo integration of probability distributions and generates estimates of unknown quantities based on data and expert opinion if available. Its architecture makes it extensible enought to be helpful in the analysis of any statistical model, so it is particularly useful for statistic researchers. YADAS features a versatile scheme for defining models, and another versatile scheme for defining sampling algorithms that includes a default starting place for most analyses. Models are specified using bonds, which relate unknown parameters using a probability density function through functions that convert the parameters into arguments of the probability density. This structure appears to be versatile enough to be useful for virtually all statistical models. The updating algorighms emphasize componentwise random walk Metropolis algorighm updates, but YADAS also contains a framework for updating correlated parameters together. Reversible jump updates are also supported.",
      "homepageURL": "http://yadas.lanl.gov/index.html",
      "laborHours": 0,
      "languages": [],
      "name": "YADAS",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://yadas.lanl.gov/node34.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://yadas.lanl.gov/index.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software, a library, contains FORTRAN77 subroutines to calculate first and second derivatives up to 8th order, interpolations (1D and 2D) up to 10th order and filters up to 14th order. Only even orders are addressed and finite-difference stencils are implemented on a vertex-centered mesh. The primary aim of this library is to be used in block-structured adaptive mesh simulations where high order is desired. The interpolants in this library are essentially designed to do prolongations and restrictions between levels of rfinement - however, they assume that the refinement ratio is 2. The filters are provided to remove high wavenumber content from solutions in case Runge phenomenon occurs - a common occurrence in case of marginal resolution of the solution. Details of the derivation and use are to be found in \"Using high-order methods on adaptively refined block-structured meshes - discretizations, interpolations and filters\", by J. Ray, C.A. Kennedy, S. Lefantzi and H.N. Najm, Sandia Technical Report, SAND2005-7981. The software comes with a User's Guide and examples how to use it.",
      "homepageURL": "http://www.sandia.gov/~jairay/HighOrder/SISC06.html",
      "laborHours": 0,
      "languages": [],
      "name": "HODIF:High-Order Discretizations, Interpolations and",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.sandia.gov/~jairay/HighOrder/SISC06.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/~jairay/HighOrder/SISC06.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Our work is aimed at providing a data store for system-level events and presenting a flexible query interface to those events. The work extends the functinality provided by the open source Request Tracker (RT) (http://www.bestpractical.com/rt) project witht the Asset Tracker (AT) addon (http://atwiki.chaka.net). We have developed an Event Tracker add-on to RT and an interface for gathering, dispatching, and inserting system events into Event Tracker. Data sources include data from all components of the system. Data is initially sent to a defined set of data filters. The data filters are capable of discarding specified data, throttling input, handling context-sensitive input, passing data through an external shell pipe command, and compressing multiple data enteries into a single event. The filters then pass the data on to an event dispatch engine. The dispatcher can print events to the screen as they happen, track them in the database, forward them on, or pass them on to an external command. By collecting all of the data into a single database, we are able to leverage the Query Builder interface supplied by RT to create, save, and restore almost any kind of query imaginable.",
      "homepageURL": "https://sourceforge.net/projects/rasilience/",
      "laborHours": 0,
      "languages": [],
      "name": "Reliability Availability Serviceability",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/rasilience/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "P-STET assists in the security technology decision making process from a costlbeneflt perspective. It aids in addressing such questions as whether to acquire and deploy new security technology, to re-configure an existing product or system, or to maintain status quo. P-STET offers both a qualitative and quantitative option. P-STET is most efficient when tailored to an organization's security cost/benefit environment. It then serves as both a guide to show what types of security questions should be addressed and as a means to analyze the data gathered from the questions to make an informed decision. The quantitative option provides a straightforward way to express costs/benefits in terms of dollars. It relies on the organization to quantify benefits or cost avoidances, and, therefore, best serves as a guide to ensure various cost and benefit angles are evaluated. The qualitative option allows the organization to assess costs by levels with respect to security and PCS budgets, operational impacts, and opportunity costs. Benefits are represented in terms of improvements to the organization's operations and are also assessed by levels with respect to some benchmark such as compliance with best practices. Results are displayed graphically using radar charts, allowing the user to make a more intuitive decision. The shaded area of each chart represents the overall cost and benefit of the security investment. A good investment is denoted when the ratio of benefit shaded area to cost shaded area is large.",
      "homepageURL": "https://sourceforge.net/projects/i3p-pstet/",
      "laborHours": 0,
      "languages": [],
      "name": "PCS Security Technology Evaluation Tool",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://sourceforge.net/projects/i3p-pstet/files/i3p-pstet/1.0/pstet_license.txt/download",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/i3p-pstet/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "IBSimu(Ion Beam Simulator) is a computer program for making two and three dimensional ion optical simulations. The program can solve electrostatic field in a rectangular mesh using Poisson equation using Finite Difference method (FDM). The mesh can consist of a coarse and a fine part so that the calculation accuracy can be increased in critical areas of the geometry, while most of the calculation is done quickly using the coarse mesh. IBSimu can launch ion beam trajectories into the simulation from an injection surface or fomo plasma. Ion beam space charge of time independent simulations can be taken in account using Viasov iteration. Plasma is calculated by compensating space charge with electrons having Boltzmann energy distribution. The simulation software can also be used to calculate time dependent cases if the space charge is not calculated. Software includes diagnostic tools for plotting the geometry, electric field, space charge map, ion beam trajectories, emittance data and beam profiles.",
      "homepageURL": "https://sourceforge.net/projects/ibsimu/",
      "laborHours": 0,
      "languages": [],
      "name": "Ion Beam Simulator",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/ibsimu/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MpiGraph consists of an MPI application called mpiGraph written in C to measure message bandwidth and an associated crunch_mpiGraph script written in Perl to process the application output into an HTMO report. The mpiGraph application is designed to inspect the health and scalability of a high-performance interconnect while under heavy load. This is useful to detect hardware and software problems in a system, such as slow nodes, links, switches, or contention in switch routing. It is also useful to characterize how interconnect performance changes with different settings or how one interconnect type compares to another.",
      "homepageURL": "https://sourceforge.net/projects/mpigraph/",
      "laborHours": 0,
      "languages": [],
      "name": "mpiGraph",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/mpigraph/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "EPANET-BAM 1.0 is an augmented version of EPANET 2.00.10, open-source software distributed by the US Environmental Protection Agency that models flow and contaminant transport through water distribution pipe networks. EPANET-BAM uses a new Bulk advective Mixing (BAM) model to predict concentrations of an aqueous solute at the outlets of cross junctions in a water quality simulation.",
      "homepageURL": "http://www.sandia.gov/epanet-bam/",
      "laborHours": 0,
      "languages": [],
      "name": "EPANET-BAM",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/epanet-bam/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Provides the shell of a plugin based application environment that builds on MVC Framework to allow one to rapidly construct an application by using a collection of plugins. The MVC Shell is implemented in C# as a .NET 2.0 application that can then be used as a shell for building a plugin based application. The infrastructure allows for dynamically processing a specified collection of plugins in order to determine the functionality of the application, where all plugins operate within the context of the underlying MVC Framework environment.",
      "homepageURL": "http://www.codeplex.com/mvcshell",
      "laborHours": 0,
      "languages": [],
      "name": "MVC Shell",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.codeplex.com/mvcshell",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The TEVA-SPOT Toolkit (SPOT) supports the design of contaminant warning systems (CWSs) that use real-time sensors to detect contaminants in municipal water distribution networks. Specifically, SPOT provides the capability to select the locations for installing sensors in order to maximize the utility and effectiveness of the CWS. SPOT models the sensor placement process as an optimization problem, and the user can specify a wide range of performance objectives for contaminant warning system design, including population health effects, time to detection, extent of contamination, volume consumed and number of failed detections. For example, a SPOT user can integrate expert knowledge during the design process by specigying required sensor placements or designating network locations as forbidden. Further, cost considerations can be integrated by limiting the design with user-specified installation costs at each location.",
      "homepageURL": "https://software.sandia.gov/trac/spot/downloader",
      "laborHours": 0,
      "languages": [],
      "name": "TEVA-SPOT Toolkit 1.2",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/spot/downloader",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PSUADE is an software system that is used to study the relationships between the inputs and outputs of general simulation models for the purpose of performing uncertainty and sensitivity analyses on simulation models.",
      "homepageURL": "https://computation.llnl.gov/projects/psuade-uncertainty-quantification",
      "laborHours": 0,
      "languages": [],
      "name": "Problem Solving Environment for Uncertainty Analysis and Design Exploration",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://computation.llnl.gov/projects/psuade-uncertainty-quantification",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "TaqSim simulates various types of PRC reactions, including multiplex reactions. Given a set of primers and dearch databases, TaqSim identifies amplicons that match user defined criteria and can generate output files in a number of formats allowing it to serve as a front-end or back-end for other software.",
      "homepageURL": "http://staff.vbi.vt.edu/dyermd/publications/taqsim.html",
      "laborHours": 0,
      "languages": [],
      "name": "TaqMan PCR Simulator",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://staff.vbi.vt.edu/dyermd/publications/taqsim.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "STRIDE is a suite of benchmarks, 8 in total, which access a computers low level caches and memory in a variety of patterns. The resulting performance of the kernels provides significant insight into the performance that a real application may incur and dictate how certain algorithmic choices should be made.",
      "homepageURL": "https://asc.llnl.gov/sequoia/benchmarks/",
      "laborHours": 0,
      "languages": [],
      "name": "Stride Version 1.0",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://asc.llnl.gov/sequoia/benchmarks/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "iScore measures the interestingness of news article in a limited user environment. it is an online learning algorithm that combines a large set of disparate features to classify documents.",
      "homepageURL": "https://sourceforge.net/projects/iscore/",
      "laborHours": 0,
      "languages": [],
      "name": "iScore: news filtering software",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/iscore/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "VisIt is an interactive parallel visualization and graphical analysis tool for viewing scientific date on UNIX and PC platforms. Users can quickly generate visualizations from their data, animate them through time, manipulate them, and save the resulting images for presentations. VisIt contains a rich set of visualization features so that you can view your data in a variety of ways. It can be used to visualize scalar and vector fields defined on two- and three- dimensional (2D and 3D) structured and unstructured meshes. VisIt was designed to handle very large data set sizes in the terascale range and yet can also handle small data sets in the kilobyte range.",
      "homepageURL": "https://visit.llnl.gov",
      "laborHours": 0,
      "languages": [],
      "name": "A Distributed, Parallel Visualization and Analysis Tool",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://wci.llnl.gov/simulation/computer-codes/visit/license",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://visit.llnl.gov",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Pianola is a software benchmark for measuring the performance of input/output (I/O) hardware and software. It works by monitoring the I/O activity of an existing application and storing the sequence of events, along with their timing, in a script. After some additional processing, a separate piece of software in this package can replay these I/) events and replicate their timing without reference to the original application. Therefore, Pianola allows users to create standalone I/O benchmarks that mimic the behavior of applications that either cannot be released or that are difficult for nonspecialists to configure, build or run.",
      "homepageURL": "https://computation.llnl.gov/software-catalog",
      "laborHours": 0,
      "languages": [],
      "name": "Pianola Version 1.0",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://computation.llnl.gov/software-catalog",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The MDEF package contains capabilities ofr modeling the deformation of materials at the crystal scale. Primary code capabilities are: xoth \"strength\" and \"equation of state\" aspects of material response, post-processing utilities, utilities for comparing results with data from diffraction experiments.",
      "homepageURL": "https://anisotropy.mae.cornell.edu/dplab/mdef",
      "laborHours": 0,
      "languages": [],
      "name": "Multi-scale and Multi-phase deformation of crystalline materials",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://anisotropy.mae.cornell.edu/dplab/mdef",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "dkrakowski@anl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Embody (Environment Modules Build) is a software build tool with integrated support for the environment-modules package. The tool eases and automates the task of building and installing software packages from source or binary distributions, as well as the management of associated modulefiles. An administrator or software pool maintainer has to write a brief script for the installation process. These steps are usually described for manual execution, in a package's README or INSTALL file. It would be up to the site administrator to work out a procedure to capture the steps taken. This tool: streamlines and codifies the installation tasks in a common framework; it provides a self-documenting and unified way for maintaining package installations; uses bash shell variables and functions for portability; keeps log files of the proceedings. It is similar in intent and function to other existing tools, such as RPM, but has several novel features tailored for High Performance Computing (HPC) software deployments. The design goal is simplicity and decoupling from RPM's dependencies and its database, which enables coexistence of several builds. Useful on HPC systems, new builds can be deployed centrally to shared file systems and without affecting running jobs.",
      "homepageURL": "https://trac.anl.gov/embody/",
      "laborHours": 0,
      "languages": [],
      "name": "EMBODY(Environmental Modules Build System Software)",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://trac.anl.gov/embody/browser/trunk/COPYRIGHT",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://trac.anl.gov/embody/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ]
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MeDICi is an evolving middleware platform for building complex, high performance analytical applications. These applications typically comprise a pipeline of software components, each of which performs some analysis on incoming data and passes on its results to the next step in the pipeline.",
      "homepageURL": "http://medici.pnl.gov/download_mif",
      "laborHours": 0,
      "languages": [],
      "name": "Middleware for Data Intensive Computing",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://medici.pnl.gov/standard_pnnl_oss_liscense",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://medici.pnl.gov/download_mif",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The MapReduce MPI library is a software tool for performing MapReduce operations on a distributed memory parallel computer via message passing (MPI). These are data-processing or computational operations which achieve parallelism by breaking a large task into two stages, a map and a reduce . Each of these are formulated as simple on-processor functions which the user can easily write. The library assigns independent tasks to processors and performs the parallel data movement and transformations behind the scenes.",
      "homepageURL": "http://mapreduce.sandia.gov/",
      "laborHours": 0,
      "languages": [],
      "name": "MapReduce MPI library (MR-MPI) v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://mapreduce.sandia.gov/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The FAST software package contains a variety of Python packages for applying and managing software tests. In version 2.0, FAST includes (1) the EXACT package, which supports the definition and execution of computational experiments, (2) the FAST package, which manages the distributed execution of software builds, and (3) general tools related to the PyUnit testing framework.",
      "homepageURL": "https://software.sandia.gov/trac/fast",
      "laborHours": 0,
      "languages": [],
      "name": "FAST - A Framework for Agile Software Testing v. 2.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://software.sandia.gov/trac/fast/wiki/Licensing",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/fast",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "SOLERGY simulates the operation and power output of a user-defined solar central receiver power plant for a time period of up to one year. SOLERGY utilizes recorded or simulated weather data and plant component performance models to calculate the power flowing through each part of the solar plant. A plant control subroutine monitors these powers and determines when to operate the various plant subsystems. The original version of the code was released in May 1987, within SAND86-8060 and was widely distributed. The Beta Version 1 to be released in 2009, includes some relatively small modifications to the original code.",
      "homepageURL": "http://energy.sandia.gov/energy/renewable-energy/solar-energy/csp-2/csp-codes-and-tools/",
      "laborHours": 0,
      "languages": [],
      "name": "Solergy (Beta Version 1)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://energy.sandia.gov/energy/renewable-energy/solar-energy/csp-2/csp-codes-and-tools/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://energy.sandia.gov/energy/renewable-energy/solar-energy/csp-2/csp-codes-and-tools/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Dimensionality Reduction Library is a C++ library for dimensionality reduction. In the context of this library, dimensionality reduction is considered to consist of 1)estimation of the intrinsic dimensionality using sampled data, 2) Finding maps that reduce the diemsionality of data (forward map) or increase the dimensionality of data (reverse map) and 3) mapping arbitray coordiantes to high and low dimensionalities. The library is intended toprovide a consistent interface to multiple dimensionality reduction algorithms with an efficient C++ interface that runs efficiently on multicore architectures. A few routines have been optimized with an option for GPU acceleration or distributed computation. Currently the library offers intrinsic dimensionality estimation using point-PCA reconstruction error and/ residual variance. The following dimensionality reduction methods have been implemented: Principal Component Analysis Multidimensional Scaling Locally Linear Embedding IsoMap Autoencoder Neutral Networks An executable is also supplied that can be built to allow for command-line access to the library routines. A description for an applciation of the library for molecular structure analysis has been published.",
      "homepageURL": "http://www.sandia.gov/~smartin/software.html",
      "laborHours": 0,
      "languages": [],
      "name": "Dimensionality Reduction Library v 0.2",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/~smartin/software.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "DELSOL calculates collector field performance and layout and optimal system design for solar thermal central receiver plants. The code consists of a detailed model of the optical performance, a simpler model of the non-optical performance, an algorithm for field layout, and a searching algorithm to find the best system design based on energy cost. The latter two features are coupled to a cost model of central receiver components and an economic model for calculating energy costs. The program optimizes the tower height, receiver size, field layout, heliostat spacings, and tower position at user specified power levels.",
      "homepageURL": "http://energy.sandia.gov/energy/renewable-energy/solar-energy/csp-2/csp-codes-and-tools/",
      "laborHours": 0,
      "languages": [],
      "name": "DELSOL v. 3",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://energy.sandia.gov/energy/renewable-energy/solar-energy/csp-2/csp-codes-and-tools/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://energy.sandia.gov/energy/renewable-energy/solar-energy/csp-2/csp-codes-and-tools/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The RSTT software computes predictions of the travel time of seismic energy traveling from a source to a receiver through 2.5D models of the seismic velocity distribution within the Earth. The two primary applications for the RSTT library are tomographic inversion studies and seismic event location calculations. In tomographic inversions studies, a seismologist begins with number of source-receiver travel time observations and an initial starting model of the velocity distribution within the Earth. A forward travel time calculator, such as the RSTT library, is used to compute predictions of each observed travel time and all of the residuals (observed minus predicted travel time) are calculated. The Earth model is then modified in some systematic way with the goal of minimizing the residuals. The Earth model obtained in this way is assumed to be a better model than the starting model if it has lower residuals. The other major application for the RSTT library is seismic event location. Given an Earth model, an initial estimate of the location of a seismic event, and some number of observations of seismic travel time thought to have originated from that event, location codes systematically modify the estimate of the location of the event with the goal of minimizing the difference between the observed and predicted travel times. The second application, seismic event location, is routinely implemented by the military as part of its effort to monitor the Earth for nuclear tests conducted by foreign countries.",
      "homepageURL": "http://www.sandia.gov/rstt/RSTT%20Download.html",
      "laborHours": 0,
      "languages": [],
      "name": "Code for Calculating Regional Seismic Travel Time",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/rstt/RSTT%20Download.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A library of utility classes for computer vision. Contains implementations of various well-known image processing techniques, such as interest point operators and region descriptors. Includes interfaces to various libraries for image and video I/O, as well as an interface to LAPACK/BLAS. FL was developed at the University of Illinois, Urbana-Champaign (UIUC) and released under an open source license. Version 1.2 was a maintenance release provided by SNL under the LGPL license. Version 1.3 is a maintenance release, containing the following changes: - Improved image format handling. Now handles strided and planar memory layouts and a wider range of pixel formats. - Improved image file I/O, including better support for metadata, a wider range of stored pixel types, and a couple of new file formats. - Improvements to DOG and SIFT, and efficiency improvements in low-level convolution. - Improvements to networking, including a generic TCP listener. - Various improvements to numerical processing. The HISTORY file included in the distribution contains a more detailed description of the changes.",
      "homepageURL": "http://www-cvr.ai.uiuc.edu/ponce_grp/software/",
      "laborHours": 0,
      "languages": [],
      "name": "FL V1.3",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www-cvr.ai.uiuc.edu/ponce_grp/software/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www-cvr.ai.uiuc.edu/ponce_grp/software/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PSUDE is an software system that is used to study the relationships between the inputs and outputs of general simulation models for the purpose of performaing uncertainty and sensitivity analyses on simulation models.",
      "homepageURL": "https://computation.llnl.gov/projects/psuade-uncertainty-quantification",
      "laborHours": 0,
      "languages": [],
      "name": "Problem Solving Environment for Uncertainty Analysis and Design Exploration",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://computation.llnl.gov/projects/psuade-uncertainty-quantification",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "HOPSPACK is open source software for solving optimization problems without derivatives. Application problems may have a fully nonlinear objective function, bound constraints, and linear and nonlinear constraints. Problem variables may be continuous, integer-valued, or a mixture of both. The software provides a framework that supports any derivative-free type of solver algorithm. Through the framework, solvers request parallel function evaluation, which may use MPI (multiple machines) or multithreading (multiple processors/cores on one machine). The framework provides a Cache and Pending Cache of saved evaluations that reduces execution time and facilitates restarts. Solvers can dynamically create other algorithms to solve subproblems, a useful technique for handling multiple start points and integer-valued variables. HOPSPACK ships with the Generating Set Search (GSS) algorithm, developed at Sandia as part of the APPSPACK open source software project.",
      "homepageURL": "http://www.sandia.gov/hopspack/index.shtml",
      "laborHours": 0,
      "languages": [],
      "name": "Hybrid Optimization Parallel Search PACKage",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/hopspack/index.shtml",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "This OpenFabrics Alliance (OFA) OpenSM routing engine module provides credit-loop-free routing while supporting two quality of service (QoS) levels for an InfiniBand fabric with a 3D torus topology. In addition it is able to route around multiple failed fabric links or a single failed fabric switch without introducing credit loops, and without changing path Service Level (SL) values granted before the failure.This OFA OpenSM routing engine module improves the operational characteristics of a parallel computer built using an InfiniBand fabric with a 3D torus topology. By providing two QoS levels, it allows system administrators to prevent application interprocess communication and file system communication from impacting each other. By providing the capability to route traffic around failed fabric components, it enables repair of failed components without impacting jobs running on the computer system.",
      "homepageURL": "http://downloads.openfabrics.org/OFED/",
      "laborHours": 0,
      "languages": [],
      "name": "3D Torus Routing Engine Module for OFA OpenSM v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://downloads.openfabrics.org/OFED/README.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://downloads.openfabrics.org/OFED/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The MEGRAPHS software package provides a front-end to graphs and vectors residing on special-purpose computing resources. It allows these data objects to be instantiated, destroyed, and manipulated. A variety of primitives needed for typical graph analyses are provided. An example program illustrating how MEGRAPHS can be used to implement a PageRank computation is included in the distribution.The MEGRAPHS software package is targeted towards developers of graph algorithms. Programmers using MEGRAPHS would write graph analysis programs in terms of high-level graph and vector operations. These computations are transparently executed on the Cray XMT compute nodes.",
      "homepageURL": "https://software.sandia.gov/trac/MEGRAPHS/browser",
      "laborHours": 0,
      "languages": [],
      "name": "Modular Environment for Graph Research and Analysis with a Persistent",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/MEGRAPHS/browser",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The MultiThreaded Graph Library (MTGL) is a set of header files that implement graph algorithm in such a way that they can run on massively multithreaded architectures. It is based upon the Boost Graph Library, but doesn't use Boost since the latter doesn't run well on these architectures.",
      "homepageURL": "https://software.sandia.gov/trac/mtgl/downloader",
      "laborHours": 0,
      "languages": [],
      "name": "The MultiThreaded Graph Library (MTGL)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/mtgl/downloader",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The MapReduceXMT library ports the MapReduce framework onto the Cray XMT. MapReduce is a programming paradigm and an approach to data management for unstructured problems. It has gained relevance due to its ability to map serial operations onto parallel distributed architectures, significantly improving developer/analyst productivity. The MapReduceXMT implements the key aspects of MapReduce for the Cray XMT, a massively threaded system that is inherently difficult to program. MapReduceXMT allows users to utilize the machine effectively and efficiently without extensive training in multi-threaded programming. The MapReduceXMT library ports the MapReduce framework onto the Cray XMT. MapReduce is a programming paradigm and an approach to data management for unstructured problems. It has gained relevance due to its ability to map serial operations onto parallel distributed architectures, significantly improving developer/analyst productivity. The MapReduceXMT implements the key aspects of MapReduce for the Cray XMT, a massively threaded system that is inherently difficult to program. MapReduceXMT allows users to utilize the machine effectively and efficiently without extensive training in multi-threaded programming.",
      "homepageURL": "https://software.sandia.gov/trac/MapReduceXMT/browser/tags/SNAP_SHOT_2012_02_21#MapReduceXMT",
      "laborHours": 0,
      "languages": [],
      "name": "MapReduceXMT v. Beta 0.1",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://software.sandia.gov/trac/MapReduceXMT/browser/trunk/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/MapReduceXMT/browser/tags/SNAP_SHOT_2012_02_21#MapReduceXMT",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This revision corrects some errors in SPRNG 1. Users of newer SPRNG versions can obtain the corrected files and build their version with it. This version also improves the scalability of some of the application-based tests in the SPRNG test suite. It also includes an interface to a parallel Mersenne Twister, so that if users install the Mersenne Twister, then they can test this generator with the SPRNG test suite and also use some SPRNG features with that generator.",
      "homepageURL": "http://www.sprng.org/",
      "laborHours": 0,
      "languages": [],
      "name": "SPRNG Scalable Parallel Random Number Generator LIbrary",
      "organization": "Office of Scientific and Technical Information (OSTI)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://creativecommons.org/licenses/by-nc-sa/4.0/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sprng.org/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Office of Scientific and Technical Information (OSTI)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Extensions to the AMPL/solver interface library (http://netlib.sandia.gov/ampl/solvers) to compute bounds on algebraic expressions, plus a test program. use in uncertainty quantification and global optimization algorithms. This software is not primarily for military applications.",
      "homepageURL": "http://netlib.sandia.gov/ampl/solvers",
      "laborHours": 0,
      "languages": [],
      "name": "Slope Extensions to ASL Library",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://netlib.sandia.gov/ampl/solvers/README",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://netlib.sandia.gov/ampl/solvers",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "partially completed extensions for stochastic programming to the AMPL/solver interface library (ASL).modeling and experimenting with stochastic recourse problems. This software is not primarily for military applications",
      "homepageURL": "http://www.netlib.org/ampl/solvers",
      "laborHours": 0,
      "languages": [],
      "name": "Partial ASL extensions for stochastic programming.",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.netlib.org/ampl/solvers/README",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.netlib.org/ampl/solvers",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Foobug is an application to assist a group of developers in keeping track of issues relevant to their shared interests. These are sometimes called \"bug-tracking\" or \"ticket-tracking\" systems.",
      "homepageURL": "http://sourceforge.net/projects/foobug/",
      "laborHours": 0,
      "languages": [],
      "name": "Foobug",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://sourceforge.net/projects/foobug/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Inline_System replaces a small subset of file query and manipulation commands, on computing platforms that do not offer a complete standard POSIX environment.",
      "homepageURL": "https://sourceforge.net/projects/inlinesystem/",
      "laborHours": 0,
      "languages": [],
      "name": "Inline_System",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/inlinesystem/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A C++ utility library that provides abstractions for common data types with debugging features, support for I/O redirection and support for portability.",
      "homepageURL": "http://software.sandia.gov/trac/utilib",
      "laborHours": 0,
      "languages": [],
      "name": "C++ Utility Library V4.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://software.sandia.gov/trac/utilib",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Acro provides a software infrastructure that integrates a variety of optimization software libraries, as well as general-purpose libraries like UTILIB that support the development of parallel optimizers.",
      "homepageURL": "https://software.sandia.gov/trac/acro",
      "laborHours": 0,
      "languages": [],
      "name": "Acro (A Common Repository for Optimizers) v. 2.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/acro",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Cognitive Foundry is a unified collection of tools designed for research and applications that use cognitive modeling, machine learning, or pattern recognition. The software library contains design patterns, interface definitions, and default implementations of reusable software components and algorithms designed to support a wide variety of research and development needs. The library contains three main software packages: the Common package that contains basic utilities and linear algebraic methods, the Cognitive Framework package that contains tools to assist in implementing and analyzing theories of cognition, and the Machine Learning package that provides general algorithms and methods for populating Cognitive Framework components from domain-relevant data.",
      "homepageURL": "http://foundry.sandia.gov",
      "laborHours": 0,
      "languages": [],
      "name": "Cognitive Foundry v. 3.0 (OSS)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://foundry.sandia.gov",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PSUADE is an software system that is used to study the relationships between the inputs and outputs of general simulation models for the purpose of performing uncertainty and sensitivity analyses on simulation models.",
      "homepageURL": "https://computation.llnl.gov/projects/psuade-uncertainty-quantification",
      "laborHours": 0,
      "languages": [],
      "name": "Problem Solving Environment for Uncertainty Analysis and Design Exploration",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://computation.llnl.gov/projects/psuade-uncertainty-quantification",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "This code consists of Matlab routines which enable the user to perform non-manifold surface reconstruction via triangulation from high dimensional point cloud data. The code was based on an algorithm originally developed in [Freedman (2007), An Incremental Algorithm for Reconstruction of Surfaces of Arbitrary Codimension Computational Geometry: Theory and Applications, 36(2):106-116]. This algorithm has been modified to accommodate non-manifold surface according to the work described in [S. Martin and J.-P. Watson (2009), Non-Manifold Surface Reconstruction from High Dimensional Point Cloud DataSAND #5272610].The motivation for developing the code was a point cloud describing the molecular conformation space of cyclooctane (C8H16). Cyclooctane conformation space was represented using points in 72 dimensions (3 coordinates for each molecule). The code was used to triangulate the point cloud and thereby study the geometry and topology of cyclooctane. Futures applications are envisioned for peptides and proteins.",
      "homepageURL": "http://www.sandia.gov/~smartin/software.html",
      "laborHours": 0,
      "languages": [],
      "name": "NMTRI v 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.sandia.gov/~smartin/software.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/~smartin/software.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "BUHFS is a fuse-based POSIX compliant filesystem interface for HPSS. BUHFS was written to provide users with a stable, POSIX compliant interface to EMSL new HPSS based Scientific Data Archive, Aurora.",
      "homepageURL": "https://svn.pnl.gov/esp/wiki/ReleasePage",
      "laborHours": 0,
      "languages": [],
      "name": "Better Userspace HPSS File System",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://svn.pnl.gov/esp/wiki/ReleasePage",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://svn.pnl.gov/esp/wiki/ReleasePage",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PriMux is used to compute sets of compatible Polymerase Chain Reaction (PCR)signatures that can be used for detecting the presence of biological species in a small sample of material. Before use, the computed signatures must be empirically tested in a wet lab.",
      "homepageURL": "https://sourceforge.net/projects/primux",
      "laborHours": 0,
      "languages": [],
      "name": "PriMux",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/primux",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Provides python rountines to convert ENDF-6 formatted nuclear data (4) into the new GND structure. Includes sample published ENDF-6 formatted data as well as published ENSL (5) and HDF5 file.",
      "homepageURL": "https://ndclx4.bnl.gov/gf/project/gnd/frs/?action=FrsReleaseBrowse&frs_package_id=26",
      "laborHours": 0,
      "languages": [],
      "name": "General Nuclear Date",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://ndclx4.bnl.gov/gf/project/gnd/frs/?action=FrsReleaseBrowse&frs_package_id=26",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "The Source Water Quality Modeling software (SWQM) simulates the water quality conditions that reflect properties of water generated by water treatment facilities. SWQM consists of a set of Matlab scripts that model the statistical variation that is expected in a water treatment facility's water, such as pH and chlorine levels.",
      "homepageURL": "https://software.sandia.gov/trac/canary/downloader/download/category/10",
      "laborHours": 0,
      "languages": [],
      "name": "SWQM: Source Water Quality Modeling Software",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://software.sandia.gov/trac/canary/downloader/download/category/10",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/canary/downloader/download/category/10",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "G4beamline is a single-particle-tracking simulation code based on the Geant4 toolkit. It is specifically optimized for the realistic evaluation of beam lines. It is especially useful for evaluating future muon facilities.",
      "homepageURL": "http://g4beamline.muonsinc.com",
      "laborHours": 0,
      "languages": [],
      "name": "G4beamline",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://g4beamline.muonsinc.com",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ]
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "THYME is an object oriented library for building models of wide area control and communications in electric power systems. This software is designed as a module to be used with existing open source simulators for discrete event systems in general and communication systems in particular. THYME consists of a typical model for simulating electro-mechanical transients (e.g., as are used in dynamic stability studies), data handling objects to work with CDF and PTI formatted power flow data, and sample models of discrete sensors and controllers.",
      "homepageURL": "http://www.ornl.gov/~1qn/thyme/docs/",
      "laborHours": 0,
      "languages": [],
      "name": "THYME: Toolkit for Hybrid Modeling of Electric Power Systems",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://web.ornl.gov/~nutarojj/thyme/docs/license.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.ornl.gov/~1qn/thyme/docs/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Bayesloc is a statistical model of the multiple seismic location system, including event hypocenters, corrections to model-based travel time predictions, assessments precision for measurement phase arrival times, and phase lavels which indicate phase ray path.",
      "homepageURL": "https://www-gs.llnl.gov/nuclear-threat-reduction/nuclear-explosion-monitoring/bayesloc",
      "laborHours": 0,
      "languages": [],
      "name": "Bayesian Mulitple-Event Location",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://www-gs.llnl.gov/nuclear-threat-reduction/nuclear-explosion-monitoring/bayesloc",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "CANARY -EDS provides probabilistic event detection based on analysis of time-series data from water quality or other sensors. CANARY also can compare patterns against a library of previously seen data to indicate that a certain pattern has reoccurred, suppressing what would otherwise be considered an event. CANARY can be configured to analyze previously recorded data from files or databases, or it can be configured to run in real-time mode directory from a database, or through the US EPA EDDIES software.",
      "homepageURL": "https://software.sandia.gov/trac/canary/",
      "laborHours": 0,
      "languages": [],
      "name": "Characterization and Analysis of Networked Array of Sensors for Event Detection (CANARY-EDS)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/canary/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The TChem toolkit is a software library that enables numerical simulations using complex chemistry and facilitates the analysis of detailed kinetic models. The toolkit provide capabilities for thermodynamic properties based on NASA polynomials and species production and consumption rates. It incorporates methods that can selectively modify reaction parameters for sensitivity analysis and uncertainty quantification. The library also contains several functions that provide analytically computed Jacobian matrices necessary for the efficient time advancement and analysis of detailed kinetic models.",
      "homepageURL": "http://www.sandia.gov/tchem/",
      "laborHours": 0,
      "languages": [],
      "name": "TChem",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/tchem/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "LIME 0.5 is an initial version of a Lightweight Integrating Multi-physics Environment for coupling codes. LIME by itself is not a code for doing multiphysics simulations. Instead, LIME provides the key high-level software, a flexible but defined approach, and interface requirements for a collection of (potentially disparate) physics codes to be combined with strong coupling (when needed) though non-linear solution methods (e.g. JFNK, fixed point), thus creating a new multi-physics simulation capability customized for a particular need. The approach taken is designed to; preserve and leverage any important specialized algorithms and/or functionality an existing application may provide; minimize the requirements barrier for an application to participate; and work within advanced solver frameworks (e.g. as extensions to the Trilinos/NOX nonlinear solver libraries, PETSc, . . .). Of note is that components/physics codes that can be coupled within LIME are NOT limited to: components written in one particular language; a particular numerical discretization approach ( e.g. Finite Element); or physical models expressed as PDE's.",
      "homepageURL": "https://sourceforge.net/projects/lime1/",
      "laborHours": 0,
      "languages": [],
      "name": "LIME 0.5",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/lime1/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PSUADE is an software system that is used to study the releationships between the inputs and outputs of gerneral simulation models for the purpose of performing uncertainty and sensitivity analyses on simulation models.",
      "homepageURL": "https://computation.llnl.gov/projects/psuade-uncertainty-quantification",
      "laborHours": 0,
      "languages": [],
      "name": "Problem Solving Environment for Uncertainty Analysis and Design Exploration",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://computation.llnl.gov/projects/psuade-uncertainty-quantification",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The All People's Simulator is a software package which can simulate a large number of people wandering randomly through a real city. It utilizes freely-available map data from the OpenStreetMaps project to create a map of city streets, then simulates people wandering through those streets. APS was designed to integrate with other work being done in the \"Megadroid\" LDRD, but is capable of functioning and providing value completely on its own.",
      "homepageURL": "https://bitbucket.org/floren/gosim/",
      "laborHours": 0,
      "languages": [],
      "name": "All People's Simulator",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://bitbucket.org/floren/gosim/src/9355d3bf524dbebc5bb084179a3d78476ebee8d3/LICENSE?at=default&fileviewer=file-view-default",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/floren/gosim/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Interatomic force and energy calculation subroutine tobe used with the molecular dynamics simulation code LAMMPS (Ref a.). The code evaluates the total energy and atomic forces (energy gradient) according to cubic spine-based variant (Ref b.) of the Modified Embedded Atom Method (MEAM).",
      "homepageURL": "http://lammps.sandia.gov/download.html",
      "laborHours": 0,
      "languages": [],
      "name": "MEAM interatomic force calculation subroutine for LAMMPS",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://lammps.sandia.gov/download.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Water Security Toolkit (WST) provides software for modeling and analyzing water distribution systems to minimize the potential impact of contamination incidents. WST wraps capabilities for contaminant transport, impact assessment, and sensor network design with response action plans, including source identification, rerouting, and decontamination, to provide a range of water security planning and real-time applications.",
      "homepageURL": "https://software.sandia.gov/trac/wst/wiki",
      "laborHours": 0,
      "languages": [],
      "name": "Water Security Toolkit",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://software.sandia.gov/trac/wst/wiki/Licensing",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://software.sandia.gov/trac/wst/wiki",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PHISH is a lightweight framework which a set of independent processes can use to exchange data as they run on the same desktop machine, on processors of a parallel machine, or on different machines across a network. This enables them to work in a coordinated parallel fashion to perform computations on either streaming, archived, or self-generated data. The PHISH distribution includes a simple, portable library for performing data exchanges in useful patterns either via MPI message-passing or ZMQ sockets. PHISH input scripts are used to describe a data-processing algorithm, and additional tools provided in the PHISH distribution convert the script into a form that can be launched as a parallel job.",
      "homepageURL": "http://www.sandia.gov/~sjplimp/download.html",
      "laborHours": 0,
      "languages": [],
      "name": "Parallel Harness for Informatic Stream Hashing",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/~sjplimp/download.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This application simulates microstructural and compositional evolution in two-phase, two-component systems. It is designed to run within the SPPARKS solver and combines the kMC with solution to the Cahn-Hilliard Eq. for phase field.",
      "homepageURL": "http://spparks.sandia.gov/",
      "laborHours": 0,
      "languages": [],
      "name": "app_hybridPotts-phasefield.cpp",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://spparks.sandia.gov/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This application simulates simple solid state sintering by incorporating all the active mechanisms, namely, curvature-driven gain growth, pore shaping and migration by surface diffusion, and creation, diffusion and annihilation of vacancies. It is an application developed for SPPARKS and has to be run within this framework.",
      "homepageURL": "http://spparks.sandia.gov/",
      "laborHours": 0,
      "languages": [],
      "name": "app_sintering.cpp",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://spparks.sandia.gov/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The plpdfa software is a product of an LDRD project at LLNL entitked \"Adaptive Sampling for Very High Throughput Data Streams\" (tracking number 11-ERD-035). This software was developed by a graduate student summer intern, Chris Challis, who worked under project PI Dan Merl furing the summer of 2011. The software the source code is implementing is a statistical analysis technique for clustering and classification of text-valued data. The method had been previously published by the PI in the open literature.",
      "homepageURL": "http://cran.r-project.org",
      "laborHours": 0,
      "languages": [],
      "name": "Particle learning for probabilistic deterministic finite automata",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://cran.r-project.org",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "pgarvey@bnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "DAQMAN is a flexible configurable interface that allows the user to build and operate a VME-based data acquisition system on a Linux workstation. It consists of two parts: a Java-based Graphical User Interface to configure the system, and a C-based utility that reads out the data and creates the output ASCII data file, with two levels of diagnostic tools. The data acquisition system requires a CAEN CONET-VME Bridge to communicate between the hardware in the VME crate and the Linux workstation. Data acquisition modules, such as ADCs, TDC, Scalers, can be loaded into the system, or removed easily. The GUI allows users to activate modules, and channels within modules by clicking on icons. Running configurations are stored; data are collected and can be viewed either as raw numbers, or by charts and histograms that update as the data are accumulated. Data files are written to disk in ASCII format, with a date and time stamp.",
      "homepageURL": "https://www.bnl.gov/nsrl/userguide/data-aquisition.php",
      "laborHours": 0,
      "languages": [],
      "name": "DAQMAN - A flexible configurable data acquisition system",
      "organization": "Brookhaven National Laboratory (BNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://www.bnl.gov/nsrl/userguide/data-aquisition.php",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://www.bnl.gov/nsrl/userguide/data-aquisition.php",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Brookhaven National Laboratory (BNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "HFBRHO is a physics computer code that is used to model the structure of the nucleus. It is an implementation of the nuclear energy Density Functional Theory (DFT), where the energy of the nucleus is obtained by integration over space of some phenomenological energy density, which is itself a functional of the neutron and proton densities. In HFBTHO, the energy density derives from the Skyrme effective two-body interaction between nucleons, nuclear superfluidity is treated at the Hartree-Fock-Bogoliubov (HFB) approximation, and axial-symmetry of the nuclear shape is assumed This version is the 2nd release of the program; the previous version has been published in Computer Physics Communications (1). It is the first version that has been partly developed at Lawrence Livermore National Laboratory.",
      "homepageURL": "http://cpc.cs.qub.ac.uk/summaries/ADUI_v2_0.html",
      "laborHours": 0,
      "languages": [],
      "name": "HFBTHO",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://cpc.cs.qub.ac.uk/summaries/ADUI_v2_0.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "LMAT is designed to take as input a collection of raw metagenomic sequencer reads, and search each read against a reference genome database and assign a taxonomic label and confidence value to each read and report a summary of the predicted taxonomic contents of the metagenomic sample.",
      "homepageURL": "https://sourceforge.net/projects/lmat/",
      "laborHours": 0,
      "languages": [],
      "name": "Livermore Metagenomics Analysis Toolkit",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/lmat/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PERM is a C library for persistent heap management and is intended for use with a dynamic-memory allocator (e.g. malloc, free). The PERM memory allocator replaces the standard C dynamic memory allocation functions with compatible versions that provide persistent memory to application programs. Memory allocated with the PERM allocatory will persist between program invocations after a call to a checkpoint function. This function essentially saves the state of the heap and registered global variables to a file which may reside in flash memory or other node local storage. A few other functions are also provided by the library to manage checkpoint files. Global variables in an application can be marked persistent and be included in a checkpoint by using a compiler attribute defined as PERM. The PERM checkpoint methof is not dependent on the programming model ans works with distributed memory or shared memory programs.",
      "homepageURL": "https://computation.llnl.gov/projects/memory-centric-architectures/download/perm-je-0.9.7.tgz",
      "laborHours": 0,
      "languages": [],
      "name": "Persistent heap Management library",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://computation.llnl.gov/projects/memory-centric-architectures/download/perm-je-0.9.7.tgz",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MMA is a stand-alone memory management system for MPI clusters. It implements a shared Partitioned Global Address Space, where multiple MPI processes request objects from the allocator and the latter provides them with system-wide unique memory addresses for each object. It provides applications with an intuitive way of managing the memory system in a unified way, thus enabling easier writing of irregular application code.",
      "homepageURL": "http://myrmics.com/download.php",
      "laborHours": 0,
      "languages": [],
      "name": "Myrmics Memory Allocator",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://myrmics.com/downloads/mma_license.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://myrmics.com/download.php",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "GeoTess facilitates access to a multi-level triangular tessellation of a unit sphere, including find the index of the triangle in which an arbitrary position on the sphere resides and computing the interpolation coefficients that should be applied to data stored on the nodes of the tessellation that defines the triangle. It is very common for Earth scientists to store values of various Earth properties on a grid that spans the globe. For convenience, they almost always choose a grid which is evenly spaced in both latitude and longitude over the surface of the globe. While these grids are evenly spaced in latitude-longitude coordinates, they are in reality very unevenly spaced when cell size is evaluated in square km since lines of longitude converge at the poles. Tessellations consisting of a set of approximately equal area triangles that span the globe are much more efficient way to impose a grid onto the surface of a sphere. The GeoTess software facilitates interacting with a triangular tessellation of a sphere and could significantly increase the efficiency of Earth science software codes. The code can construct variable resolution triangular tessellations. It can also load a previously constructed tessellation from an input file and implements a \"walking triangle\" search algorithm to find the index of the triangle on the tessellation that contains a user specified point of interest. It also computes the interpolation coefficients that should be applied to data stored on the nodes of the containing triangle",
      "homepageURL": "http://www.sandia.gov/geotess",
      "laborHours": 0,
      "languages": [],
      "name": "GeoTess v. 2.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/geotess",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "SHOE is research code for characterizing and visualizing higher-order finite elements; it contains a framework for defining classes of interpolation techniques and element shapes; methods for interpolating triangular, quadrilateral, tetrahedral, and hexahedral cells using Lagrange and Legendre polynomial bases of arbitrary order; methods to decompose each element into domains of constant gradient flow (using a polynomial solver to identify critical points); and an isocontouring technique that uses this decomposition to guarantee topological correctness. Please note that this is an alpha release of research software and that some time has passed since it was actively developed; build- and run-time issues likely exist.",
      "homepageURL": "https://midas3.kitware.com/midas/folder/10328",
      "laborHours": 0,
      "languages": [],
      "name": "Sandia Higher Order Elements (SHOE) v 0.5 alpha",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://midas3.kitware.com/midas/folder/10328",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://midas3.kitware.com/midas/folder/10328",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Uncertainty Quantification (UQ) Toolkit is a software library for the characterizaton and propagation of uncertainties in computational models. For the characterization of uncertainties, Bayesian inference tools are provided to infer uncertain model parameters, as well as Bayesian compressive sensing methods for discovering sparse representations of high-dimensional input-output response surfaces, and also Karhunen-Loève expansions for representing stochastic processes. Uncertain parameters are treated as random variables and represented with Polynomial Chaos expansions (PCEs). The library implements several spectral basis function types (e.g. Hermite basis functions in terms of Gaussian random variables or Legendre basis functions in terms of uniform random variables) that can be used to represent random variables with PCEs. For propagation of uncertainty, tools are provided to propagate PCEs that describe the input uncertainty through the computational model using either intrusive methods (Galerkin projection of equations onto basis functions) or non-intrusive methods (perform deterministic operation at sampled values of the random values and project the obtained results onto basis functions).",
      "homepageURL": "http://www.sandia.gov/UQToolkit/",
      "laborHours": 0,
      "languages": [],
      "name": "UQ Toolkit v 2.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/UQToolkit/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "CACTUS is a code that calculates the performance and aero/hydrodynamic loads of a wind or water turbine. The turbine may be either a vertical-axis or a horizontal-axis machine, and may consist of one or more blade curved or straight blades. The performance model is based on a lifting-line free wake formulation that calculates rotor power and blade loads in the time domain. The rotor is treated as a rotating rigid body, such that structural dynamical motions are not modeled. The turbine is assumed to operate within a steady, but possibly sheared, wind or current velocity. For marine hydrokinetic energy applications, the presence of a river/tidal channel bed and water surface boundaries may be modeled.",
      "homepageURL": "http://energy.sandia.gov/energy/renewable-energy/wind-power/wind-resources/wind-software-downloads/cactus-software-download/",
      "laborHours": 0,
      "languages": [],
      "name": "Code for Axial and Crossflow Turbine Simulation",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://energy.sandia.gov/energy/renewable-energy/wind-power/wind-resources/wind-software-downloads/cactus-software-download/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://energy.sandia.gov/energy/renewable-energy/wind-power/wind-resources/wind-software-downloads/cactus-software-download/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Our application, the Omics Metadata Management Software (OMMS), answers both needs, empowering experimentalists to generate intuitive, consistent metadata, and to perform bioinformatics analyses and information management tasks via a simple and intuitive web-based interface. Several use cases with short-read sequence datasets are provided to showcase the full functionality of the OMMS, from metadata curation tasks, to bioinformatics analyses and results management and downloading. The OMMS can be implemented as a stand alone-package for individual laboratories, or can be configured for web-based deployment supporting geographically dispersed research teams. Our software was developed with open-source bundles, is flexible, extensible and easily installed and run by operators with general system administration and scripting language literacy.",
      "homepageURL": "http://omms.sandia.gov/",
      "laborHours": 0,
      "languages": [],
      "name": "Omics Metadata Management Software v. 1 (OMMS)",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://omms.sandia.gov/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "The RAPTOR computational pipeline identifies microbial nucleic acid sequences present in sequence data from clinical samples. It takes as input raw short-read genomic sequence data (in particular, the type generated by the Illumina sequencing platforms) and outputs taxonomic evaluation of detected microbes in various human-readable formats. This software was designed to assist in the diagnosis or characterization of infectious disease, by detecting pathogen sequences in nucleic acid sequence data from clinical samples. It has also been applied in the detection of algal pathogens, when algal biofuel ponds became unproductive. RAPTOR first trims and filters genomic sequence reads based on quality and related considerations, then performs a quick alignment to the human (or other host) genome to filter out host sequences, then performs a deeper search against microbial genomes. Alignment to a protein sequence database is optional. Alignment results are summarized and placed in a taxonomic framework using the Lowest Common Ancestor algorithm.",
      "homepageURL": "http://bioinformatics.sandia.gov/software/",
      "laborHours": 0,
      "languages": [],
      "name": "Rapid Threat Organism Recognition Pipeline",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://bioinformatics.sandia.gov/software/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://bioinformatics.sandia.gov/software/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "NuMAD helps to enable efficient creation and use of high fidelity wind turbine blade models for structural and aerodynamic analysis. NuMAD is a GUI-based tool used to manage the specific geometry and materials inputs required to fully describe a wind turbine blade.",
      "homepageURL": "http://energy.sandia.gov/?page_id=2238",
      "laborHours": 0,
      "languages": [],
      "name": "Numerical Manufacturing And Design tool",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://energy.sandia.gov/energy/renewable-energy/wind-power/rotor-innovation/numerical-manufacturing-and-design-tool-numad/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://energy.sandia.gov/?page_id=2238",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "graphMC consists of an implementation of a set of statistical tests that ensure that a Markov chain in the space of graphs has converged to its stationary distribution. The tests are applicable when the graphs have labelled nodes. The tests are applied to the binary time-series traced out by an edge between two selected nodes. The software fits models of a first-order Markov process and an independent draws from a binary distribution to the time-series and selects one based on the BIC scores of the two models. The package consists of (1) an implementation of a Markov chain driving a graph rewiring process that preserves the joint degree distribution of the graph, (2) implementation of the statistical test mentioned above and (3) two examples that show how the Markov chain infrastructure and the statistical tests can be used.",
      "homepageURL": "http://www.sandia.gov/~jairay/graphMC/graphMC.html",
      "laborHours": 0,
      "languages": [],
      "name": "graphMC: A package for testing the independence of graphs",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.sandia.gov/~jairay/graphMC/graphMC.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/~jairay/graphMC/graphMC.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "NetMOD is a tool to model the performance of global ground-based explosion monitoring systems. The initial version of the software supports the simulation of seismic detection capability. The tool provides a user interface to execute simulations based upon a hypothetical definition of the monitoring system configuration, geophysical properties of the Earth, and detection analysis criteria.",
      "homepageURL": "http://www.sandia.gov/geotess/assets/documents/NetMOD/NetMOD.html",
      "laborHours": 0,
      "languages": [],
      "name": "NetMOD",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/geotess/assets/documents/NetMOD/NetMOD.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software implements the generative graph algorithm described in the following reference: T. G. Kolda, A. Pinar, T. Plantenga and C. Seshadhri. A Scalable Generative Graph Model with Community Structure, arXiv:1302.6636, March 2013, http:l/arxiv.org/abs/1302.6636. The software also implements the clustering coefficient algorithms described in C. Seshadhri, A. Pinar and T. G. Kolda. Triadic Measures on Graphs: The Power of Wedge Sampling, in Proc. 2013 SIAM International Conference on Data Mining {SDM), May 2013.",
      "homepageURL": "http://www.sandia.gov/~tgkolda/feastpack/",
      "laborHours": 0,
      "languages": [],
      "name": "FEASTPACK v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.sandia.gov/~tgkolda/feastpack/#2",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/~tgkolda/feastpack/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "pgarvey@bnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Software to manipulate and describe crystal and molecular structures and set up structural refinements from multiple experimental inputs. Calculation and simulation of structure derived physical quantities. Library for creating customized refinements of atomic structures from available experimental and theoretical inputs.",
      "homepageURL": "http://www.diffpy.org",
      "laborHours": 0,
      "languages": [],
      "name": "DiffPy-CMI-Python libraries for Complex Modeling Initiative",
      "organization": "Brookhaven National Laboratory (BNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.diffpy.org/products/diffpycmi/license.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.diffpy.org",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Brookhaven National Laboratory (BNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Polytope is a library that wraps several algorithms for generating the Voronoi diagram in both serial and distributed parallel.",
      "homepageURL": "https://bitbucket.org/jjphatt/polytope/",
      "laborHours": 0,
      "languages": [],
      "name": "Polytope",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://bitbucket.org/jjphatt/polytope/src/ef2ecd61b60b31a4b7ba95e88f893f2fd7382a80/LICENSE?at=default&fileviewer=file-view-default",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/jjphatt/polytope/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "SolidSpheral is an extension of the Spheral open source meshless hydrodynamics method. SolidSpheral adds the capability to model solid materials using analytic equations of state, and a simple damage model to allow for the modeled materials to undergo dynamic damage evolution. SolidSpheral is a distributed parallel code employing MPI for the parallel framework.",
      "homepageURL": "https://sourceforge.net/projects/spheral/",
      "laborHours": 0,
      "languages": [],
      "name": "SolidShperal",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://sourceforge.net/projects/spheral/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2018-02-28"
      },
      "description": "The Toolkit for Adaptive Stochastic Modeling and Non-Intrusive ApproximatioN is a collection of robust libraries for high dimensional integration and interpolation as well as parameter calibration. The code consists of several modules that can be used individually or conjointly.",
      "laborHours": 0,
      "languages": [],
      "name": "Tasmanian",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL/Tasmanian",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Code to support, enable, and expand monitoring of network devices, servers, and network services.",
      "homepageURL": "http://mathias-kettner.de/checkmk.html",
      "laborHours": 0,
      "languages": [],
      "name": "check_mkcheck_mk (ORNL expansions)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://mathias-kettner.de/checkmk.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This package implements an optimal-scaling multigrid solver for the (non) linear systems that arise from the discretization of problems with evolutionary behavior. Typically, solution algorithms for evolution equations are based on a time-marching approach, solving sequentially for one time step after the other. Parallelism in these traditional time-integrarion techniques is limited to spatial parallelism. However, current trends in computer architectures are leading twards system with more, but not faster. processors. Therefore, faster compute speeds must come from greater parallelism. One approach to achieve parallelism in time is with multigrid, but extending classical multigrid methods for elliptic poerators to this setting is a significant achievement. In this software, we implement a non-intrusive, optimal-scaling time-parallel method based on multigrid reduction techniques. The examples in the package demonstrate optimality of our multigrid-reduction-in-time algorithm (MGRIT) for solving a variety of parabolic equations in two and three sparial dimensions. These examples can also be used to show that MGRIT can achieve significant speedup in comparison to sequential time marching on modern architectures.",
      "homepageURL": "https://computation.llnl.gov/projects/parallel-time-integration-multigrid/software",
      "laborHours": 0,
      "languages": [],
      "name": "Parallel time integration software",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://computation.llnl.gov/projects/parallel-time-integration-multigrid/software",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "joiner@ameslab.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "ThermoPhonon is a stand-alone code, which can be integrated into other software packages. Typically, it is used together with a density functional theory (DFT) code (such as VASP, Wien2k, AbInit, SIESTA) and a phonon code (such as Phonopy or Phon). The workflow is the following. Molecular dynamics (MD) in a supercell at a given temperature T is performed using another code. After sufficient equilibration, the output in the form of atomic positions and forces for a large number of selected MD steps is recorded into a file. If needed, one can modify this file by applying additional constraints, such as enforced crystal symmetry or subtracted motion of the center of mass. ThermoPhonon reads the file with atomic positions and forces and writes a new file with the force constants. Force constants can be used by another code (such as Phonopy or Phon) to produce phonon spectrum for plotting, in the assumption of known equilibrium atomic positions provided in a separate file.",
      "homepageURL": "http://lib.dr.iastate.edu/ameslab_software/2/",
      "laborHours": 0,
      "languages": [],
      "name": "ThermoPhonon",
      "organization": "Ames Laboratory (AMES)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://lib.dr.iastate.edu/ameslab_software/2/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Ames Laboratory (AMES)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "ForQint is a Fortran software library to adaptively integrate multivariable functions versus well known probability distributions (e.g. normal, lognormal, etc.) using quadrature rules. Such integration is known to be more efficient and accurate especially when the function evaluation is expensive. The library also FQint enables the creation of both full and sparse anisotropic multi-dimensional quadrature rules. These latter encompass different such as Gauss-Hermite, Gauss-Legendre, etc. The functions Maher Salloum, Bert Debusschere, Kenny Chowdhary and subroutines rely on the C++ Stokhos package of Trilinos (trilinos.sandia.gov) where the appropriate classes were wrapped into Fortran.",
      "homepageURL": "http://www.sandia.gov/~mnsallo/software.html",
      "laborHours": 0,
      "languages": [],
      "name": "ForQint",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.sandia.gov/~mnsallo/software.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/~mnsallo/software.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The software is used to fit models of emission fields (e.g., fossil-fuel CO2 emissions) to sparse measurements of gaseous concentrations. Its primary aim is to provide an implementation and a demonstration for the algorithms and models developed in J. Ray, V. Yadav, A. M. Michalak, B. van Bloemen Waanders and S. A. McKenna, \"A multiresolution spatial parameterization for the estimation of fossil-fuel carbon dioxide emissions via atmospheric inversions\", accepted, Geoscientific Model Development, 2014. The software can be used to estimate emissions of non-reactive gases such as fossil-fuel CO2, methane etc. The software uses a proxy of the emission field being estimated (e.g., for fossil-fuel CO2, a population density map is a good proxy) to construct a wavelet model for the emission field. It then uses a shrinkage regression algorithm called Stagewise Orthogonal Matching Pursuit (StOMP) to fit the wavelet model to concentration measurements, using an atmospheric transport model to relate emission and concentration fields. Algorithmic novelties described in the paper above (1) ensure that the estimated emission fields are non-negative, (2) allow the use of guesses for emission fields to accelerate the estimation processes and (3) ensure that under/overestimates in the guesses do not skew the estimation.",
      "homepageURL": "http://www.sandia.gov/~jairay/kfcs/kfcs.html",
      "laborHours": 0,
      "languages": [],
      "name": "sparse-msrf:A package for sparse modeling and estimation of fossil-fuel CO2 emission fields",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.sandia.gov/~jairay/kfcs/kfcs.html",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/~jairay/kfcs/kfcs.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Genomic islands are key mobile DNA elements in bacterial evolution, that can distinguish pathogenic strains from each other, or distinguish pathogenic strains from non-pathogenic strains. Their detection in genomes is a challenging problem. We present 3 main software components that attack the island detection problem on two different bases: 1) the preference of islands to insert in chromosomal tRNA or tmRNA genes (islander.pl), and 2) islands' sporadic occurrence among closely related strains. The latter principle is employed in both an algorithm (learnedPhyloblocks.pl) and a visualization method (panGenome.pl). Component islander.pl finds islands based on their preference for a particular target gene type. We annotate each tRNA and tmRNA gene, find fragments of each such gene as candidates for the distal ends of islands, and filter candidates to remove false positives. Component learnedPhyloblocks.pl uses islands found by islander.pl and other methods as a training set to find new islands. Reference genomes are aligned using mugsy, then the \"phylotypes\" or patterns of occurrence in the reference set are determined for each position in the target genome, and those phylotypes most enriched in the training set of islands are followed to detect yet more islands. Component panGenome.pl produces a big-data visualization of the chromosomally-ordered \"pan-genome\", that includes every gene of every reference genome (x-axis, pan-genome order; y-axis, reference genomes; color-coding, gene presence/absence etc.), islands appearing as dark patches.",
      "homepageURL": "http://bioinformatics.sandia.gov/software/",
      "laborHours": 0,
      "languages": [],
      "name": "Genomic Island Identification Software v 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://bioinformatics.sandia.gov/software/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://bioinformatics.sandia.gov/software/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Matlab Toolbox for simulating the impact of solar energy on the distribution grid. The majority of the functions are useful for interfacing OpenDSS and MATLAB, and they are of generic use for commanding OpenDSS from MATLAB and retrieving GridPV Toolbox information from simulations. A set of functions is also included for modeling PV plant output and setting up the PV plant in the OpenDSS simulation. The toolbox contains functions for modeling the OpenDSS distribution feeder on satellite images with GPS coordinates. Finally, example simulations functions are included to show potential uses of the toolbox functions.",
      "homepageURL": "https://pvpmc.sandia.gov/applications/gridpv-toolbox/",
      "laborHours": 0,
      "languages": [],
      "name": "GridPV Toolbox",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://pvpmc.sandia.gov/applications/gridpv-toolbox/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://pvpmc.sandia.gov/applications/gridpv-toolbox/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The SPARTA package is software for simulating low-density fluids via the Direct Simulation Monte Carlo (DSMC) method, which is a particle-based method for tracking particle trajectories and collisions as a model of a multi-species gas. The main component of SPARTA is a simulation code which allows the user to specify a simulation domain, populate it with particles, embed triangulated surfaces as boundary conditions for the flow, overlay a grid for finding pairs of collision partners, and evolve the system in time via explicit timestepping. The package also includes various pre- and post-processing tools, useful for setting up simulations and analyzing the results. The simulation code runs either in serial on a single processor or desktop machine, or can be run in parallel using the MPI message-passing library, to enable faster performance on large problems.",
      "homepageURL": "http://sparta.sandia.gov",
      "laborHours": 0,
      "languages": [],
      "name": "Stochastic PArallel Rarefied-gas Time-accurate Analyzer",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://sparta.sandia.gov",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Performs a cross-correlation calculation to align images. This is particularly useful for aligning frames of a movie so that an object of interest does not spatially drift. For in situ microscopy experiments. Movies are collected where an object changes with time. At the same time, the object usually drifts too. This shifts the movie frames so that the object is aligned from frame to frame. Then it is easy to see the object changes without the added complication of it moving too.",
      "homepageURL": "http://freesourcecode.net/matlabprojects/57416/drifty-shifty-deluxe-in-matlab#.Wczt52hyKUk",
      "laborHours": 0,
      "languages": [],
      "name": "Drifty shifty deluxe.m",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://freesourcecode.net/matlabprojects/57416/drifty-shifty-deluxe-in-matlab#.Wczt52hyKUk",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "MGPT is an unclassified source code for the fast evaluation and application of quantum-based MGPT interatomic potentials for mrtals. The present version of MGPT has been developed entirely at LLNL, but is specifically designed for implementation in the open-source molecular0dynamics code LAMMPS maintained by Sandia National Laboratories. Using MGPT in LAMMPS, with separate input potential data, one can perform large-scale atomistic simulations of the structural, thermodynamic, defeat and mechanical properties of transition metals with quantum-mechanical realism.",
      "homepageURL": "http://lammps.sandia.gov/download.html",
      "laborHours": 0,
      "languages": [],
      "name": "Fast Model Generalized Pseudopotential Theory Interatomic Potential Routine",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://lammps.sandia.gov/download.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ]
    },
    {
      "contact": {
        "email": "joiner@ameslab.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "HostDesigner is a computer-aided molecular design code that enables the general application of de novo structure-based methods to problems in chemistry and material science. Its purpose is to identify organic molecules with 3D structures that match user-input specifications. To accomplish this, the code connects chemical fragments to build millions of potential molecules, evaluates the resulting structures based on geometric constraints, and outputs a rank-ordered list of candidates. Example applications include the design of metal ion sequestering agents for use in separations processes, molecules that form self-assembled nanoscale containers, and molecular building blocks for metal-organic frameworks.",
      "homepageURL": "http://sourceforge.net/projects/hostdesigner-v3-0/",
      "laborHours": 0,
      "languages": [],
      "name": "HostDesigner, Version 3",
      "organization": "Ames Laboratory (AMES)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://sourceforge.net/projects/hostdesigner-v3-0/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Ames Laboratory (AMES)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "This software generates environmental contours of extreme sea states using buoy observations of significant wave height and energy period or peak period. The code transforms these observations using principal component analysis (PCA) to create an uncorrelated representation of the data. The subsequent components are modeled using probability distributions and parameter fitting functions. The inverse first-order reliability method (I-FORM) is then applied to these models in order to generate an extreme event contour based on a given return period (i.e., 100 years).The subsequent contour is then transformed back into the original input space defined by the variables of interest in order to create an environmental contour of extreme sea states.",
      "homepageURL": "http://energy.sandia.gov/energy/renewable-energy/water-power/resource-characterization/extreme-sea-state-contour/",
      "laborHours": 0,
      "languages": [],
      "name": "Extreme_SeaState_Contour_v1",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://energy.sandia.gov/energy/renewable-energy/water-power/resource-characterization/extreme-sea-state-contour/",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://energy.sandia.gov/energy/renewable-energy/water-power/resource-characterization/extreme-sea-state-contour/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "LuaCLRBridge is a library which provides an interface for hosting Lua within .NET applications and facilitating interoperability between the two runtimes.",
      "homepageURL": "https://bitbucket.org/luaclrbridge/luaclrbridge/src",
      "laborHours": 0,
      "languages": [],
      "name": "Lua-CLR Bridge",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mpl-2.0",
            "name": "MPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.org/luaclrbridge/luaclrbridge/src",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Geospatial Toolkit is an NREL-developed map-based software application that integrates resource data and other geographic information systems (GIS) data for integrated resource assessment. The non-resource, country-specific data for each toolkit comes from a variety of agencies within each country as well as from global datasets. Originally developed in 2005, the Geospatial Toolkit was completely redesigned and re-released in November 2010 to provide a more modern, easier-to-use interface with considerably faster analytical querying capabilities. The revised version of the Geospatial Toolkit has been released for all original toolkit countries/regions and each software package is made available on NREL's website,",
      "homepageURL": "http://www.nrel.gov/international/geospatial_toolkits.html",
      "laborHours": 0,
      "languages": [],
      "name": "Geospatial Toolkit",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.nrel.gov/international/geospatial_toolkits.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This software contains a set of python modules – input, search, cluster, analysis; these modules read input files containing spatial coordinates and associated attributes which can be used to perform nearest neighbor search (spatial indexing via kdtree), cluster analysis/identification, and calculation of spatial statistics for analysis.",
      "homepageURL": "http://spparks.sandia.gov/",
      "laborHours": 0,
      "languages": [],
      "name": "cluster trials v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://spparks.sandia.gov/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Sandia SPT is designed as software to accompany a book chapter being published a methods chapter which provides an introduction on how to label and track individual proteins. The Sandia Simple Particle Tracking code uses techniques common to the image processing community, where its value is that it facilitates implementing the methods described in the book chapter by providing the necessary open-source code. The code performs single particle spot detection (or segmentation and localization) followed by tracking (or connecting the detected particles into trajectories). The book chapter, which along with the headers in each file, constitutes the documentation for the code is: Anthony, S.M.; Carroll-Portillo, A.; Timlon, J.A., Dynamics and Interactions of Individual Proteins in the Membrane of Living Cells. In Anup K. Singh (Ed.) Single Cell Protein Analysis Methods in Molecular Biology. Springer",
      "homepageURL": "http://www.sandia.gov/bioenergy-biodefense/software.html",
      "laborHours": 0,
      "languages": [],
      "name": "Sandia Simple Particle Tracking (Sandia SPT) v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.sandia.gov/bioenergy-biodefense/software.html",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The SDET Tool is used to create open-access power grid data sets and facilitate updates of these data sets by the community. Pacific Northwest National Laboratory (PNNL) and its power industry and software vendor partners are developing an innovative sustainable data evolution technology (SDET) to create open-access power grid datasets and facilitate updates to these datasets by the power grid community. The objective is to make this a sustained effort within and beyond the ARPA-E GRID DATA program so that the datasets can evolve over time and meet the current and future needs for power grid optimization and potentially other applications in power grid operation and planning.",
      "homepageURL": "https://egriddata.org/dataset/sdet-tool",
      "laborHours": 0,
      "languages": [],
      "name": "Sustainable Data Evolution Technology for Power Grid Optimization",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://egriddata.org/dataset/sdet-tool",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://egriddata.org/dataset/sdet-tool",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ]
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Socorro can be used to compute the ground-state electron density for a periodically repeated simulation cell in which the external potential is obtained from norm-conserving pseudopotentials or projector-augmented-wave functions. The ground-state electron density is computed by summation over one-electron orbitals which are obtained using the Kohn-Sham formulation of density-functional theory and which are expanded in a plane-wave basis. Various quantities can be computed from the ground-state solution, including atomic forces which can be used to optimize atom positions in the simulation cell and to perform molecular dynamics simulations.",
      "homepageURL": "http://dft.sandia.gov/socorro/",
      "laborHours": 0,
      "languages": [],
      "name": "Socorro Electronic Structure Software",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://dft.sandia.gov/socorro/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ]
    },
    {
      "contact": {
        "email": "kathleen_m@lanl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "A set of programs and utilities for generating and manipulating data files in TSV (tab-separated value) or JSON format.",
      "laborHours": 0,
      "languages": [],
      "name": "db, Version 0.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lanl-chash/db/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl-chash/db",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "dkrakowski@anl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Computing a Voronoi or Delaunay tessellation from a set of points is a core part of the analysis of many simulated and measured datasets. As the scale of simulations and observations surpasses billions of particles, a distributed-memory scalable parallel algorithm is the only feasible approach. The primary contribution of this software is a distributed-memory parallel Delaunay and Voronoi tessellation algorithm based on existing serial computational geometry libraries that automatically determines which neighbor points need to be exchanged among the subdomains of a spatial decomposition. Other contributions include the addition of periodic and wall boundary conditions.",
      "laborHours": 0,
      "languages": [],
      "name": "TESS",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/diatomic/tess2",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Ravel is a tool for analyzing and visualizing parallel execution traces. It deduces a logical structure of parallel program events from the trace records and calculates comparative metrics. It displays the results of this analysis using multiple views at varying levels of detail to allow interactive exploration of the trace.",
      "laborHours": 0,
      "languages": [],
      "name": "Ravel",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.1",
            "name": "GPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/scalability-llnl/Ravel",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "PIKA is a MOOSE-based application for modeling micro-structure evolution of seasonal snow. The model will be useful for environmental, atmospheric, and climate scientists. Possible applications include application to energy balance models, ice sheet modeling, and avalanche forecasting. The model implements physics from published, peer-reviewed articles. The main purpose is to foster university and laboratory collaboration to build a larger multi-scale snow model using MOOSE. The main feature of the code is that it is implemented using the MOOSE framework, thus making features such as multiphysics coupling, adaptive mesh refinement, and parallel scalability native to the application. PIKA implements three equations: the phase-field equation for tracking the evolution of the ice-air interface within seasonal snow at the grain-scale; the heat equation for computing the temperature of both the ice and air within the snow; and the mass transport equation for monitoring the diffusion of water vapor in the pore space of the snow.",
      "laborHours": 0,
      "languages": [],
      "name": "Snow Micro-Structure Model",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/pika",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Lestre performs a high-speed scan of the Lustre metadata target, and provides a listing of files that match a user-specified criteria, such as modification time, inode number, or if its data resides on specific OSTs. The output format is configurable, as is the parameters it uses to perform IO.",
      "laborHours": 0,
      "languages": [],
      "name": "Lester, the Lustre Lister",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-TechInt/lester",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "This site allows state data contributors to validate their WFS services against a specified schema for tier 3 data. The application uses the USGIN models API at https://github.com/usgin/usginmodels.",
      "laborHours": 0,
      "languages": [],
      "name": "Web Feature Service Validator",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/usgin/ContentModelCMS/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/ContentModelCMS",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Django site used to manage the approved information exchanges (content models) after creation and public comment at https://github.com/usgin-models.",
      "laborHours": 0,
      "languages": [],
      "name": "Information Exchange management site",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/modelmanager",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "THE NGDS IS A USER-FRIENDLY, WEB-BASED APPLICATION TO SUPPORT FINDING, VISUALIZING, MAPPING, AND ACQUISITION OF DATA BY END-USERS. THIS APPLICATION ALLOWS USERS TO DISCOVER AND ACCESS RESOURCES MADE AVAILABLE ACROSS ALL NGDS NODES, AND TO SEARCH FOR DATA ACROSS THE SYSTEM BASED ON TOPIC, LOCATION, AND OR OTHER CRITERIA. STANDARDIZED METADATA DESCRIBING EACH DATASET PROVIDES THE USER WITH THE INFORMATION NECESSARY TO DETERMINE THE UTILITY OF THAT DATASET FOR THEIR PURPOSES. GEOGRAPHIC DATASETS CAN BE VISUALIZED THROUGH A MAP INTERFACE THAT ALLOWS USERS TO INSPECT THE DETAILS OF INDIVIDUAL DATA POINTS (E.G. WELLS, TEMPERATURE MEASUREMENTS, ETC.) FROM PROPERLY FORMATTED DATASETS. IN ADDITION TO VISUALIZATION WITHIN THE APPLICATION, THE INTERFACE PROVIDES THE INFORMATION NECESSARY FOR USERS TO ACCESS THE DATA FROM OTHER APPLICATIONS.",
      "laborHours": 0,
      "languages": [],
      "name": "National Geothermal Database",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ngds/documents",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Django app for converting CSV records to XML metadata documents. This transformation from the metadata content model to parsed ISO XML documents allows for metadata integration into NGDS.",
      "laborHours": 0,
      "languages": [],
      "name": "CSV to ISO XML metadata transformation tool",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/usgin/usgincsv/blob/master/License.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usgin/usgincsv",
      "status": "Production",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Not Specified",
      "laborHours": 0,
      "languages": [],
      "name": "CASTRO",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/AMReX-Astro/Castro/blob/master/license.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/AMReX-Astro/Castro",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "KINSOL is part of a software family called SUNDIALS: SUite of Nonlinear and Differential/Algebraic equation Solvers [1]. KINSOL is a general-purpose nonlinear system solver based on Newton-Krylov and fixed-point solver technologies [2].",
      "laborHours": 0,
      "languages": [],
      "name": "General purpose nonlinear system solver based on Newton-Krylov method.",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/sundials/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/sundials",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Avalaunch implements a tree-based process launcher. It first bootstraps itself on to a set of compute nodes by launching children processes, which immediately connect back to the parent process to acquire info needed t launch their own children. Once the tree is established, user processes are started by broadcasting commands and application binaries through the tree. All communication flows over high-performance network protocols via spawnnet. The goal is to start MPI jobs having hundreds of thousands of processes within seconds.",
      "laborHours": 0,
      "languages": [],
      "name": "Avalaunch",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/LLNL/avalaunch/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/avalaunch",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The av_sys_image_mgr utility provides an interface for the creation, manipulation, and analysis of system boot images for computer systems. It is primarily intended to provide a convenient method for managing the introduction of changes to boot images for long-lived production HPC systems.",
      "laborHours": 0,
      "languages": [],
      "name": "Auto-Versioning Systems Image Manager",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NERSC/avs_image_mgr/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NERSC/avs_image_mgr",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Enables UNIX and Mac OS X command line users to put (individually or batch mode) local ascii files into Google Documents, where the ascii is converted to Google Document format using formatting the user can specify.",
      "laborHours": 0,
      "languages": [],
      "name": "ascii2gdocs",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/stefanlasiewski/ascii2gdocs/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/stefanlasiewski/ascii2gdocs",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "The Atmospheric Radiation Measurement (ARM) Data Integrator (ADI) streamlines the development of scientific algorithms and analysis of time-series NetCDF data, and improves the content and consistency of the output data products produced by these algorithms. The framework automates the process of retrieving and preparing data for analysis, and allows users to design output data products through a graphical interface. It also provides a modular, flexible software development architecture that scientists can use to generate C, Python, and IDL source code templates that embed the pre and post processing logic allowing the scientist to focus on only their science. The input data, preprocessing, and output data specifications of algorithms are defined through a graphical interface and stored in a database. ADI implements workflow for data integration and supports user access to data through a library of software modules. Data preprocess capabilities supported include automated retrieval of data from input files, merging the retrieved data into appropriately sized chunks, and transformation of the data onto a common coordinate system grid. Through the graphical interface, users can view the details of both their data products and those in the ARM catalog and allows developers to use existing data product to build new data products. Views of the output data products include an overlay of how the design meets ARM archive's data standards providing the user with a visual cue indicating where their output violates an archive standard. The ADI libraries access the information provided through the GUI via a Postgres database. The ADI framework and its supporting components can significantly decrease the time and cost of implementing scientific algorithms while improving the ability of scientists to disseminate their results.",
      "laborHours": 0,
      "languages": [],
      "name": "ARM Data Integrator",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ARM-DOE/ADI/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ARM-DOE/ADI",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "aespiritu@lbl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Physical device safety is typically implemented locally using embedded controllers, while operations safety is primarily performed in control centers. Safe operations can be enhanced by correct design of device-level control algorithms, and protocols, procedures and operator training at the control-room level, but all can fail. Moreover, these elements exchange data and issue commands via vulnerable communication layers. In order to secure these gaps and enhance operational safety, we believe monitoring of command sequences must be combined with an awareness of physical device limitations and automata models that capture safety mechanisms. One way of doing this is by leveraging specification-based intrusion detection to monitor for physical constraint violations. The method can also verify that physical infrastructure state is consistent with monitoring information and control commands exchanged between field devices and control centers. This additional security layer enhances protection from both outsider attacks and insider mistakes. We implemented specification-based SCADA command analyzers using physical constraint algorithms directly in the Bro framework and Broccoli APIs for three separate scenarios: a water heater, an automated distribution system, and an over-current protection scheme. To accomplish this, we added low-level analyzers capable of examining control system-specific protocol packets for both Modbus TCP and DNP3, and also higher-level analyzers able to interpret device command and data streams within the context of each device's physical capabilities and present operational state. Thus the software that we are making available includes the Bro/Broccoli scripts for these three scenarios, as well as simulators, written in C, of those scenarios that generate sample traffic that is monitored by the Bro/Broccoli scripts. In addition, we have also implemented systems to directly pull cyber-physical information from the OSIsoft PI historian system. We have included the Python scripts used to perform that monitoring.",
      "laborHours": 0,
      "languages": [],
      "name": "HC-NIDS: signatures and simulations for detecting cyber-attacks aiming to cause damage against cyber-physical energy systems",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/lbnl-cybersecurity/LBNL_Physics_Based_IDS/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lbnl-cybersecurity/LBNL_Physics_Based_IDS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "holdensanchez2@llnl.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "IceNine is a MPI-parallel orientation reconstruction and microstructure analysis code. It's primary purpose is to reconstruct a spatially resolved orientation map given a set of diffraction images from a high energy x-ray diffraction microscopy (HEDM) experiment (1). In particular, IceNine implements the adaptive version of the forward modeling method (2, 3). Part of IceNine is a library used to for conbined analysis of the microstructure with the experimentally measured diffraction signal. The libraries is also designed for tapid prototyping of new reconstruction and analysis algorithms. IceNine is also built with a simulator of diffraction images with an input microstructure.",
      "laborHours": 0,
      "languages": [],
      "name": "Adaptive Forward Modeling Method for Analysis and Reconstructions of Orientation Image Map",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/FrankieLi/IceNine/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/FrankieLi/IceNine",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "Coopr integrates Python packages for defining optimizers, modeling optimization applications, and managing computational experiments. A major driver for Coopr development is the Pyomo package that can be used to define abstract problems, create concrete problem instances, and solve these instances with standard solvers. Other Coopr packages include EXACT, a framework for managing computational experiments, SUCASA, a tool for customizing integer programming solvers, and OPT, a generic optimization interface.",
      "laborHours": 0,
      "languages": [],
      "name": "COOPR: A COmmon Optimization Python Repository v. 1.0",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Pyomo/pyomo",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jcrouch@sandia.gov"
      },
      "date": {
        "created": "2017-10-25",
        "metadataLastUpdated": "2017-10-25"
      },
      "description": "BECCA is a learning and control method based on the function of the human brain. The goal behind its creation is to learn to control robots in unfamiliar environments in a way that is very robust, similar to the way that an infant learns to interact with her environment by trial and error. As of this release, this software contains an application for controlling robot hardware through a socket. The code was created so as to make it extensible to new applications. It is modular, object-oriented code in which the portions of the code that are specific to one robot are easily separable from those portions that are the constant between implementations. BECCA makes very few assumptions about the robot and environment it is learning, and so is applicable to a wide range of learning and control problems.",
      "laborHours": 0,
      "languages": [],
      "name": "Brain-Emulating Cognition and Control Architecture (BECCA) v. 0.2 beta",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/microgold/Becca35",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "westm@osti.gov"
      },
      "date": {
        "created": "2017-10-31",
        "metadataLastUpdated": "2018-05-16"
      },
      "description": "Main repo for managing the new DOE CODE site from the DOE Office of Scientific and Technical Information (OSTI).",
      "laborHours": 0,
      "languages": [],
      "name": "DOE CODE",
      "organization": "Office of Scientific and Technical Information (OSTI)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/doecode/doecode/",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Office of Scientific and Technical Information (OSTI)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "greenwoodms@ornl.gov"
      },
      "date": {
        "created": "2017-11-09",
        "metadataLastUpdated": "2018-05-03"
      },
      "description": "A Modelica based library for modeling thermal hydraulic energy systems and other multi-physics systems. \n\nExisting development tools for early stage design and scoping of energy systems are often time consuming to use, proprietary, and do not contain the necessary function to model complete systems (i.e., controls, primary, and secondary systems) in a common platform. The Modelica programming language based TRANSFORM tool (1) provides a standardized, common simulation environment for early design of energy systems (i.e., power plants), (2) provides a library of baseline component modules to be assembled into full plant models using available geometry, design, and thermal-hydraulic data, (3) defines modeling conventions for interconnecting component models, and (4) establishes user interfaces and support tools to facilitate simulation development (i.e., configuration and parameterization), execution, and results display and capture.",
      "laborHours": 0,
      "languages": [],
      "name": "TRANSFORM - TRANsient Simulation Framework of Reconfigurable Models",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL-Modelica/TRANSFORM-Library/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-Modelica/TRANSFORM-Library",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "billingsjj@ornl.gov"
      },
      "date": {
        "created": "2017-11-15",
        "metadataLastUpdated": "2017-11-15"
      },
      "description": "Ice Project Main repo",
      "laborHours": 0,
      "languages": [],
      "name": "eclipse/ice",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/epl-1.0",
            "name": "EPL-1.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/eclipse/ice",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "billingsjj@ornl.gov"
      },
      "date": {
        "created": "2017-11-15",
        "metadataLastUpdated": "2017-12-19"
      },
      "description": "Eclipse advanced visualization project",
      "laborHours": 0,
      "languages": [],
      "name": "eclipse/eavp",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/epl-1.0",
            "name": "EPL-1.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/eclipse/eavp",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "watsongr@ornl.gov"
      },
      "date": {
        "created": "2017-11-15",
        "metadataLastUpdated": "2018-01-09"
      },
      "description": "The PTP project provides an integrated development environment to support the development of parallel applications written in C, C++, and Fortran. This include support for the MPI, OpenMP and UPC programming models, as well as OpenSHMEM and OpenACC, support for a wide range of batch systems and runtime systems, including PBS/Torque, LoadLeveler, GridEngine, Parallel Environment, Open MPI, and MPICH2. A scalable parallel debugger and support for the integration of a wide range of parallel tools is also included.",
      "laborHours": 0,
      "languages": [],
      "name": "Eclipse Parallel Tools Platform",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/epl-1.0",
            "name": "EPL-1.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://git.eclipse.org/gitroot/ptp/org.eclipse.ptp.git",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ]
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-11-21",
        "metadataLastUpdated": "2017-11-22"
      },
      "description": "This software is a plugin/installer for existing software. Composer (https://getcomposer.org) is a dependency manager for\nPHP. Installer plugins can be created through Composer's plugin API (https://getcomposer.org/doc/articles/custominstallers.\nmd) allowing certain types of packages to be automatically installed to specific paths. Plugins like this exist for\nseveral different frameworks: https://packagist.org/search/?q=installer&type=composer-plugin\nThis software is a plugin to install Drupal modules (https://www.drupal.org/). Drupal has begun supporting Composer as a means of installing and maintaining modules, but requires specific paths for it's various components. These paths can be\nmanually specified in the \"composer.json\" file, or can be automatically determined with a plugin. Currently an installer\nplugin does not exist for Drupal.",
      "laborHours": 0,
      "languages": [],
      "name": "Drupal Installer",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/drupal-installer",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-11-29",
        "metadataLastUpdated": "2017-11-29"
      },
      "description": "A collection of R packages for statistical computing and analysis",
      "laborHours": 0,
      "languages": [],
      "name": "lhsego/sUtils",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lhsego/sUtils",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-11-29",
        "metadataLastUpdated": "2017-11-29"
      },
      "description": "The Asset Score Preview API Test Harness is PHP code that will be made publicly accessible to software developers\nsupporting the DOE commercial energy scoring efforts. Asset Score is a DOE funded web-based application that enables cities to interactively describe commercial buildings, identify assets that would affect the energy footprint of the building, and use the Asset Score models (FEDS, Open Studio) to determine the approximate energy score.",
      "homepageURL": "https://buildingenergyscore.energy.gov/",
      "laborHours": 0,
      "languages": [],
      "name": "Asset Score API",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://buildingenergyscore.energy.gov/",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ]
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-11-29",
        "metadataLastUpdated": "2017-11-30"
      },
      "description": "The ISDDD software program simulates a mathematical model, named ISD3 (\"ISDDD\"), developed for describing the time-, concentration- and particle size- dependent dissolution of particles, their delivery to cells, and the delivery and uptake of ions to cells in in vitro liquid test systems. The model is based on a specific formulation of the Population Balance Equation, derived for soluble particles. ISD3 solves for the size and spatial distribution of particle numbers, represented together as a particle number density (that is a function of particle location and diameter). From the number density, all other quantities, such as mass, concentration, size distribution and surface areas are derived. The model can be applied for any initial particle size distribution data by representing the data in terms of the number density. As a result, time dependent solutions can be obtained for all size ranges in a single run of the ISD3 simulation for a given particle type and\nmedia conditions. In the current implementation, particles are treated as spherical in shape and can be modeled as primary particles, agglomerates, or as primary particles coated with proteins. Ions are modeled as a lumped system with a uniform concentration in the liquid media. Particle transport is assumed to occur down the liquid column via diffusion and sedimentation (no fluid convection), and no aggregation/agglomeration, coagulation and break-up of the particles occur during transport. Cellular uptake kinetics of ions and particle dissolution kinetics are currently implemented using empirical models that were developed and calibrated for silver nanoparticles and ions. The ISD3 code is modular, allowing use of the existing equations for the dissolution model and ion uptake, but can be modified to include alternate models developed by the user. Application of ISD3 to another particle system would involve inputting parameters appropriate for the particles and model system. For particle uptake by cells, users have the option to use a no-flux or a perfectly absorbing ‘sticky’ boundary condition. For reactive boundary conditions, the user needs to modify a few lines of the code to express the desired form of the boundary condition (e.g., Robin type of boundary condition).",
      "homepageURL": "http://nanodose.pnnl.gov/ModelDownload.aspx",
      "laborHours": 0,
      "languages": [],
      "name": "ISDDD",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://nanodose.pnnl.gov/ModelDownload.aspx",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ]
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2017-12-11",
        "metadataLastUpdated": "2018-01-10"
      },
      "description": "As supercomputing resources increase, cosmological scientists are able to run more detailed and larger simulations generating massive amounts of data. Analyzing these simulations with an available open-source toolkit is important for collaborative Department of Energy scientific discovery across labs, universities, and other partners. Developed software as a part of this collection include: comparing data with other existing simulations, verifying and validating results with observation databases, new halo finder algorithms, and using analytical tools to get insights into the physics of the\ncosmological universe. The goal of this software project is to provide a set of open-source libraries, tools, and packages for large-scale cosmology that allows scientists to visualize, analyze, and compare large-scale simulation and observational\ndata sets. Developed software will provide a variety of methods for processing, visualization, and analysis of astronomical observation and cosmological simulation data. These tools are intended for deployment on multiple scientific computing\nplatforms, including but not limited to personal computers, cloud computing, experimental sites (telescopes) and high performance supercomputers.",
      "laborHours": 0,
      "languages": [],
      "name": "Framework for Analysis and Visualization of Simulation Data (VizAly)",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/VizAly",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-12-12",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "VOLTTRON Application tree (moved from volttron/applications)\nAutomated Identification of Re-tuning Measures",
      "laborHours": 0,
      "languages": [],
      "name": "VOLTTRON/volttron-applications",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/VOLTTRON/volttron-applications/",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-12-12",
        "metadataLastUpdated": "2017-12-13"
      },
      "description": "Some of the most pressing machine learning applications such as cyber security and object recognition lack enough ground-truth training data to build a classifier. We solve this problem by using unsupervised deep learning techniques to determine when data were anomalous or deviated from the norm. Traditional methods require either specific context dependent expertise to construct models, or prior examples of events and large amounts of well-labeled data to perform machine learning. Some cutting-edge deep learning approaches have been used to characterize complex events, but these have not been applied to the streaming environment and require a great deal of data. We demonstrated the use of an autoencoder and relevant featurization techniques to both learn a feature space and then identify anomalous portions  without the aid of labeled data or domain knowledge. In this way, we demonstrated the detection of anomalous features without domain knowledge or tagged examples, and delivered these features to users.",
      "laborHours": 0,
      "languages": [],
      "name": "pnnl/safekit",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/safekit",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2017-12-13",
        "metadataLastUpdated": "2017-12-14"
      },
      "description": "ModME is a generalization and benchmark framework for the notion of semantic importance.  It is primarily used in a stream reasoning context, where hidden information can be extracted out of the data streams.",
      "laborHours": 0,
      "languages": [],
      "name": "ModME",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/modme",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2017-12-13",
        "metadataLastUpdated": "2018-05-02"
      },
      "description": "CodeVision (formerly MassAV) is a malware analysis workflow system and repository. It began as a simple tool for analyzing a large malware corpus using multiple COTS antivirus engines in parallel. It has since evolved into a unified interface for collecting, storing and analyzing malicious executable code using a variety of COTS and GOTS backends.  Not only can CodeVision receive samples from users via its command-line and web interfaces, but it can also operate on continuous network data feeds (e.g., perimeter e-mail attachments, HTTP downloads). The modular analysis  framework and simple API give developers the ability to integrate custom and off-the-shelf analysis tools with ease. The system manages scheduling and dependencies, allowing modules to be chained together into analysis-driven workflows. The system is designed as a distributed, load-balanced web service, an architecture that allows it to scale horizontally by adding additional nodes.",
      "homepageURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
      "laborHours": 0,
      "languages": [],
      "name": "Codevision 0.x",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
            "name": "Other"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ]
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-12-19",
        "metadataLastUpdated": "2018-01-19"
      },
      "description": "ScaLAPACK is a library of high-performance linear algebra routines for parallel distributed memory machines. ScaLAPACK solves dense and banded linear systems, least squares problems, eigenvalue problems, and singular value problems.",
      "homepageURL": "http://www.netlib.org/scalapack/",
      "laborHours": 0,
      "languages": [],
      "name": "ScaLAPACK - Scalable Linear Algebra PACKage",
      "organization": "Office of Scientific and Technical Information (OSTI)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.netlib.org/scalapack/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "http://www.netlib.org/scalapack/",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Office of Scientific and Technical Information (OSTI)"
      ]
    },
    {
      "contact": {
        "email": "vowelll@osti.gov"
      },
      "date": {
        "created": "2017-12-19",
        "metadataLastUpdated": "2017-12-19"
      },
      "description": "Chombo provides a set of tools for implementing finite difference and finite volume methods for the solution of partial differential equations on block-structured adaptively refined rectangular grids. Both elliptic and time-dependent modules are included. Chombo supports calculations in complex geometries with both embedded boundaries and mapped grids, and Chombo also supports particle methods. Most parallel platforms are supported, and cross-platform self-describing file formats are included.\n\nThe Chombo package is a product of the community of collaborators working with the Applied Numerical Algorithms Group part of the Computational Research Division at LBNL.\n\nChombo is a Swahili word meaning \"tool\" or \"container\".",
      "homepageURL": "https://commons.lbl.gov/display/chombo/Chombo+-+Software+for+Adaptive+Solutions+of+Partial+Differential+Equations",
      "laborHours": 0,
      "languages": [],
      "name": "Chombo",
      "organization": "Office of Scientific and Technical Information (OSTI)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://commons.lbl.gov/display/chombo/Chombo+copyright",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://commons.lbl.gov/display/chombo/Chombo+-+Software+for+Adaptive+Solutions+of+Partial+Differential+Equations",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Office of Scientific and Technical Information (OSTI)"
      ]
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-01-09",
        "metadataLastUpdated": "2018-01-10"
      },
      "description": "REDUCE is a software toolset enabling cyber security analysts to rapidly discover relationships between malware samples, to extract temporal threat intelligence, and to develop actionable signatures for known and emerging threats. REDUCE performs automated static code analysis and identifies similarities between malware samples in order to support knowledge sharing about related pieces of malware. By integrating with well-established reverse engineering tools, REDUCE speeds up both deep-dive reverse engineering efforts and custom signature generation.",
      "homepageURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
      "laborHours": 0,
      "languages": [],
      "name": "REDUCE: Statistically-Guided Reverse Engineering Toolkit",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
            "name": "Other"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ]
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-01-11",
        "metadataLastUpdated": "2018-01-12"
      },
      "description": "The HTEM DB is a public database and web application containing measurements of thin film materials collected using \"high throughput\" (combinatorial) synthesis and measurement processes. This software provides examples of utilizing the HTEM-DB API to access, plot and analyze the data contained therein.",
      "laborHours": 0,
      "languages": [],
      "name": "HTEM-DB API Examples",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/htem-api-examples",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-01-11",
        "metadataLastUpdated": "2018-01-12"
      },
      "description": "The WIND Toolkit HSDS API examples provide example python software notebooks (software) and a javascript visualization that demonstrate use of the HDF Group's HSDS API utilizing data for NREL's WIND Toolkit.",
      "laborHours": 0,
      "languages": [],
      "name": "Wind Toolkit HSDS API Examples",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/nrel/hsds-examples",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-01-15",
        "metadataLastUpdated": "2018-01-16"
      },
      "description": "The converter extracts all the required feeder data information from “Opendss format” files also known as “.dss” files to construct the feeder data spreadsheets to be interfaced with the “ePHASORSIM” simulator.",
      "laborHours": 0,
      "languages": [],
      "name": "DSS2ePHASOR (\"OpenDSS\" files to \"ePHASORSIM\" interface files converter)",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/DSS2ePHASOR/blob/master/README.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/DSS2ePHASOR",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jbbrown@lbl.gov"
      },
      "date": {
        "created": "2018-01-23",
        "metadataLastUpdated": "2018-01-24"
      },
      "description": "pbdR-enabled HPC-compatible implementation of iRF. Tested on Titan.",
      "laborHours": 0,
      "languages": [],
      "name": "Jromero1208/PBDRiRF",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Jromero1208/PBDRiRF",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-01-25",
        "metadataLastUpdated": "2018-01-26"
      },
      "description": "Swiftbat is a set of Python library routines and command-line utilities that have been developed for the purpose of retrieving, analyzing, and displaying data from NASA's Swift spacecraft, especially the data from the Swift Burst Alert Telescope (BAT).",
      "laborHours": 0,
      "languages": [],
      "name": "Swiftbat Python Library",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/swiftbat_python",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-01-26",
        "metadataLastUpdated": "2018-01-26"
      },
      "description": "We developed a grid reference system-based Unique Building Identifier (UBID). The method converts a building footprint on a map to a unique code. Unlike geographic coordinates (latitude and longitude), which require high precision and can only locate points on the earth, the UBID code records two-dimensional information about a building footprint in a concise and practical manner. The UBID itself is neither a database nor a data schema. Rather, it acts as an external common key between databases to facilitate data mapping. The developed ruleset ensures that individual implementers can reach the same conclusion utilizing publicly available digital maps. It can also automatically resolve discrepancies, caused by physical space or structure changes over time, during data exchange. The method is also flexible and scalable to identify a portion of a building or a group of buildings.",
      "laborHours": 0,
      "languages": [],
      "name": "Unique Building Identifier Generator",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/buildingid",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-01-29",
        "metadataLastUpdated": "2018-01-29"
      },
      "description": "The Fast Equilibration of Ocean Tracers Software (FEOTS) is a set of Fortran modules and programs for post-processing output from LANL's Parallel Ocean Program (POP). However, it is written so that it can be extended for use with other General Circulation Models. Tools are provided for aiding in the diagnosis of sparse matrices that capture advection and diffusion operators that are consistent with General Circulation Model discretizations. FEOTS additionally offers tools to make use of the diagnosed operators to run offline tracer models in forward or equilibration modes.",
      "laborHours": 0,
      "languages": [],
      "name": "Fast Equilibration of Ocean Tracers Software",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/FEOTS",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-01-29",
        "metadataLastUpdated": "2018-01-29"
      },
      "description": "Software programs Red Pitaya to sweep frequency and records the in phase and quadrature response.",
      "laborHours": 0,
      "languages": [],
      "name": "Resonant Ultrasound Spectroscopy Software",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ffb-LANL/resonant-ultrasound",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-01-29",
        "metadataLastUpdated": "2018-01-29"
      },
      "description": "RuleBuilder is a tool for drawing graphs represented by the BioNetGen rule-based modeling language (BNGL), a domain-specific language used to formulate mathematical models of biochemical interaction networks.  This framework provides an intuitive plain-text representation of such networks using a graph-based formalism. The interactions between the model's components are graph-rewriting rules that denote the minimum context needed for the interaction to occur.  In some cases the context required for reactions to occur can grow quite large, and the lengthy textual description of the interaction can be difficult to interpret or debug. RuleBuilder is designed to make this process simpler through visualization of individual rule or pattern strings.  The software assists in the reading of existing models by converting the BNGL strings of interest into a graph-based representation composed of nodes and edges. RuleBuilder also enables the user to build the visual representation directly from its interface, composing the BNGL string as components and operators are added to the graphical object.",
      "laborHours": 0,
      "languages": [],
      "name": "RuleBuilder",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/RuleWorld/RuleBuilder",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "darve@stanford.edu"
      },
      "date": {
        "created": "2018-01-31",
        "metadataLastUpdated": "2018-01-31"
      },
      "description": "The regular weighted ensemble method simulation Python code was originally developed by H. Lee, Stanford. The bash \nscript for multiple simultaneous simulations was originally developed by S. Ahn, Stanford. The resampling method \nimplemented in the code is from E. Darve and J. Izaguirre (Chapter 7 in Schlick's \"Innovations in Biomolecular Modeling \nand Simulations.\"). The Concurrent Adaptive Sampling (CAS) algorithm Python code was developed on top of the regular \nweighted ensemble method code by S. Ahn, Stanford. Improvements on the parameter input file had been made by J. \nBirgmeier, Stanford.\n\nThere are two folders provided in this Github repository: **2D_Toy_Model_Code** and **MD_Code**. Each folder provides \nall of the needed code with input files for a particular example, e.g., toymodel1, toymodel2, and penta-alanine. In the \n2D_Toy_Model_Code, **Code_With_Proper_Files** will make a separate folder with many output files for each walker and\n**Code_Without_Proper_Files** will only output minimum number of files like flux.txt, total_weight_on_each_ball.txt, \ntotal_weight.txt, time_record.txt, etc.",
      "laborHours": 0,
      "languages": [],
      "name": "CAS_Code",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/shirleyahn/CAS_Code",
      "status": "Development",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "radercd@ornl.gov"
      },
      "date": {
        "created": "2018-02-01",
        "metadataLastUpdated": "2018-02-12"
      },
      "description": "Thermochimica is a software library that determines a unique combination of phases and their compositions at thermochemical equilibrium. Thermochimica can be used for stand-alone calculations or it can be directly coupled to other codes. This release of the software does not have a graphical user interface (GUI) and it can be executed from the command line or from an Application Programming Interface (API). Also, it is not intended for thermodynamic model development or for constructing phase diagrams. The main purpose of the software is to be directly coupled with a multi-physics code to provide material properties and boundary conditions for various physical phenomena. Significant research efforts have been dedicated to enhance computational performance through advanced algorithm development, such as improved estimation techniques and non-linear solvers. Various useful parameters can be provided as output from Thermochimica, such as: determination of which phases are stable at equilibrium, the mass of solution species and phases at equilibrium, mole fractions of solution phase constituents, thermochemical activities (which are related to partial pressures for gaseous species), chemical potentials of solution species and phases, and integral Gibbs energy (referenced relative to standard state). The overall goal is to provide an open source computational tool to enhance the predictive capability of multi-physics codes without significantly impeding computational performance.",
      "laborHours": 0,
      "languages": [],
      "name": "Thermochimica",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-CEES/thermochimica",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-07",
        "metadataLastUpdated": "2018-02-20"
      },
      "description": "The Capacity Expansion Regional Feasibility (CERF) model",
      "laborHours": 0,
      "languages": [],
      "name": "IMMM-SFA/cerf",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/immm-sfa/cerf",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "junghans@lanl.gov"
      },
      "date": {
        "created": "2018-02-08",
        "metadataLastUpdated": "2018-02-08"
      },
      "description": "set of computational science infrastructure tools designed to aid in the implementation of multi-physics application development",
      "laborHours": 0,
      "languages": [],
      "name": "flecsi",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/laristra/flecsi",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "wehart@sandia.gov"
      },
      "date": {
        "created": "2018-02-08",
        "metadataLastUpdated": "2018-02-08"
      },
      "description": "The main repository for the Pyomo optimization modeling software.",
      "laborHours": 0,
      "languages": [],
      "name": "Pyomo/pyomo",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Pyomo/pyomo",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "edwards@jlab.org"
      },
      "date": {
        "created": "2018-02-08",
        "metadataLastUpdated": "2018-02-11"
      },
      "description": "The Chroma package supports data-parallel programming constructs for lattice field theory and in particular lattice QCD. It uses the SciDAC QDP++ data-parallel programming (in C++) that presents a single high-level code image to the user, but can generate highly optimized code for many architectural systems including single node workstations, multi and many-core nodes, clusters of nodes via QMP, and classic vector computers.",
      "laborHours": 0,
      "languages": [],
      "name": "Chroma",
      "organization": "Thomas Jefferson National Accelerator Facility (TJNAF)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/JeffersonLab/chroma",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Thomas Jefferson National Accelerator Facility (TJNAF)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Controls automation module for the hard x-ray split and delay instrument.",
      "laborHours": 0,
      "languages": [],
      "name": "Hard X-Ray Split and Delay Automated Controls System",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/HXRSnD/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/HXRSnD",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Common repository for streaming kernel drivers (PGP, AxiStream, ExoTem).",
      "laborHours": 0,
      "languages": [],
      "name": "aes-stream-drivers",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/aes-stream-drivers/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/aes-stream-drivers",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "This is the LCLS-II online analysis monitoring package, a.k.a. the LCLS-II version of AMI.",
      "laborHours": 0,
      "languages": [],
      "name": "ami2",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/ami2/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/ami2",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Manage the conda based analysis release environments that include psana at LCLS.",
      "laborHours": 0,
      "languages": [],
      "name": "anarel-manage",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/anarel-manage/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/anarel-manage",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Repository to test conda based LCLS ana release system.",
      "laborHours": 0,
      "languages": [],
      "name": "anarel-test",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/anarel-test/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/anarel-test",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Ansible role to deploy a spark cluster.",
      "laborHours": 0,
      "languages": [],
      "name": "ansible-spark",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/ansible-role-spark/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/ansible-role-spark",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Project for ATLAS CHESS2 ASIC Development.",
      "laborHours": 0,
      "languages": [],
      "name": "atlas-chess2",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/atlas-chess2/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/atlas-chess2",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Datacat is a system for the tracking and organization of files, their replicas, and user-defined metadata across heterogeneous storage systems.",
      "laborHours": 0,
      "languages": [],
      "name": "Datacat",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/datacat/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/datacat",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Development Board Firmware/Software Examples",
      "laborHours": 0,
      "languages": [],
      "name": "dev-board-examples",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/dev-board-examples/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/dev-board-examples",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "A set of python scripts that can be used to automate maintenance of an EPICS Archiver Appliance.",
      "laborHours": 0,
      "languages": [],
      "name": "epicsarchiver_automation",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/epicsarchiver_automation",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Package to prepare minibatches from h5 input for a machine learning framework.",
      "laborHours": 0,
      "languages": [],
      "name": "h5-batch-reader",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/h5-batch-reader/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/h5-batch-reader",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Happi is a database to hold generic information for devices along the LCLS photon beamline. LCLS endstations deal with dynamic sets of instrumentation. Information like ports, triggers and aliases are all important for operation, but hard to manage when spread across a multitude of applications. Happi solves this problem by creating a single access point for all the metadata required to interface with LCLS instrumentation. Using a flexible container based system Happi allows the enforcement of specific conventions while still permitting flexible data entry where required.",
      "laborHours": 0,
      "languages": [],
      "name": "Heuristic Access to Positions of Photon Instruments (HAPPI)",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/happi/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/happi",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "SQL Parser derived from Presto, written in Python with the PLY framework",
      "laborHours": 0,
      "languages": [],
      "name": "lacquer",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/lacquer",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Algorithms for LCLS data analysis.",
      "laborHours": 0,
      "languages": [],
      "name": "lclslib",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/lclslib/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/lclslib",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "paws stands for the Platform for Automated Workflows by SSRL. It was conceived to serve as a lean and modular workflow manager for image-like data. While there are many Python packages providing for a wide variety of processing tasks, we are often faced with a need to bring several packages together, and then to add some home-built scripts as well, to complete a data processing workflow. paws was designed to make this process easy, by providing interfaces to an ever-growing number of existing packages and providing easy ways for users to add their own operations. Occasionally, we have need of an operation that is not provided by a Python package that we know of. In these rare cases, we have developed original operations within PAWS, but such operations intend to live in a lower-level package as soon as they are mature.",
      "laborHours": 0,
      "languages": [],
      "name": "Platform for Automated Workflows by SSRL (paws)",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/paws/blob/dev/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/paws",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Collection of Ophyd device subclasses for IOCs unique to LCLS PCDS.",
      "laborHours": 0,
      "languages": [],
      "name": "PCDS Devices",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/pcds-devices/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pcds-devices",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "QT inspired Python Interface for EDM Screen Creation",
      "laborHours": 0,
      "languages": [],
      "name": "PEDL",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/pedl/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pedl",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Image Processing Pipelines for Photon Controls and Data Systems",
      "laborHours": 0,
      "languages": [],
      "name": "PSBeam",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/psbeam/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/psbeam",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Python code for detector geometries, supporting translation between different programs, easy manipulation of the geometry, and access to the real-space coordinates of pixels. Currently we support interfaces to: psana, CrystFEL, and cheetah. An interface to cctbx.xfel is planned.",
      "laborHours": 0,
      "languages": [],
      "name": "psgeom",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/psgeom/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/psgeom",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Package to support photon science machine learning projects at SLAC/LCLS/AD",
      "laborHours": 0,
      "languages": [],
      "name": "psmlearn",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/psmlearn/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/psmlearn",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Remote data visualization tool used at LCLS for online analysis/monitoring. psmon is a remote and local data visualization tool used at LCLS for online analysis/monitoring developed originally to work with LCLS psana analysis framework. ZeroMQ is used as the data trasport layer and it provides two different rendering clients based on matplotlib and pyqtgraph.",
      "laborHours": 0,
      "languages": [],
      "name": "psmon",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/psmon/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/psmon",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Wrapper around pyca for simpler usage. Used in various LCLS apps to do handle access.",
      "laborHours": 0,
      "languages": [],
      "name": "PSP Interface for EPICS Channel Access",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/psp/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/psp",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Beam Alignment module for Photon Controls and Data Systems",
      "laborHours": 0,
      "languages": [],
      "name": "PSWALKER",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/pswalker/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pswalker",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Python IOC that mimics an areaDetector plugin for rapid prototyping.",
      "laborHours": 0,
      "languages": [],
      "name": "pyadplugin",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/pyadplugin/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pyadplugin",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "PyCA (Python Channel Access) is a module that offers lightweight bindings for Python applications to access EPICS PVs. It acts as a channel access client, much like pyepics. The intention of the module is to provide better performance for embedded applications, rather than to provide an interactive interface. The most significant gains will be found when monitoring large waveforms that need to be processed before exposing them the Python layer.",
      "laborHours": 0,
      "languages": [],
      "name": "pyca",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/pyca/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pyca",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Python-based Channel Access Websockets Server. This is a tiny web server for getting channel access data via a WebSockets connection. Useful if you want to make a website that displays a real-time updating value of some PVs. Built with Bottle, PyEpics, and Geventwebsockets.",
      "laborHours": 0,
      "languages": [],
      "name": "pycaserver",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pycaserver",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "pydm is a PyQt-based framework for building user interfaces for control systems. The goal is to provide a no-code, drag-and-drop system to make simple screens, as well as a straightforward python framework to build complex applications.",
      "laborHours": 0,
      "languages": [],
      "name": "Python Display Manager",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/pydm/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pydm",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "This is a Python port of Zyre 1.0, implementing the same ZRE protocol. Pyre does local area discovery and clustering. A Pyre node broadcasts UDP beacons, and connects to peers that it finds. This class wraps a Pyre node with a message-based API.",
      "laborHours": 0,
      "languages": [],
      "name": "Pyre",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pyre",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "This packages generates a general purpose control server interface to an FPGA using PyRogue.",
      "laborHours": 0,
      "languages": [],
      "name": "PyROGUE General Purpose Control Server",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/pyrogue-control-server/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pyrogue-control-server",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Firmware Libraries for RCE Platform Development",
      "laborHours": 0,
      "languages": [],
      "name": "rce-gen3-fw-lib",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/rce-gen3-fw-lib/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/rce-gen3-fw-lib",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "SLAC Python Based Hardware Abstraction & Data Acquisition System",
      "laborHours": 0,
      "languages": [],
      "name": "rogue",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/rogue/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/rogue",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Example project for rogue",
      "laborHours": 0,
      "languages": [],
      "name": "rogue-example",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/rogue-example/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/rogue-example",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "Vivado build system",
      "laborHours": 0,
      "languages": [],
      "name": "ruckus",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/ruckus/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/ruckus",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "The Skywalker software suite is a set of of Python tools designed to automatically deliver the photon beam to a number of experimental hutches at LCLS.",
      "laborHours": 0,
      "languages": [],
      "name": "skywalker",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/skywalker/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/skywalker",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "SLAC Ultimate RTL Framework",
      "laborHours": 0,
      "languages": [],
      "name": "surf",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/surf/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/surf",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-02-14",
        "metadataLastUpdated": "2018-03-14"
      },
      "description": "ZeroRM SQL Composition library",
      "laborHours": 0,
      "languages": [],
      "name": "ZeroRM",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/zerorm/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/zerorm",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-02-16",
        "metadataLastUpdated": "2018-02-16"
      },
      "description": "KIVA-hpFE is a computer software for solving the physics of multi-species turbulent reactive flow in complex geometries having immersed moving parts. The code is written in Fortran 90/95 and can be used on any computer platform with any popular complier. The code is in 2 versions, a serial version and a parallel version utilizing MPICH2 type Message Passing Interface (MPI or Intel MPI) for solving distributed domains.",
      "homepageURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/portfolio-software.php",
      "laborHours": 0,
      "languages": [],
      "name": "KIVA-hpFE version 1.0.1",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/portfolio-software.php",
            "name": "Other"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/portfolio-software.php",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ]
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "SDK for controlling the Adaptable Multiple Power Supplies (AMPS boxes)",
      "laborHours": 0,
      "languages": [],
      "name": "AmpsSDK",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/AmpsSDK",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Ion mobility mass spectrometry data viewer and extractor, targeted toward PNNL's UIMF files",
      "laborHours": 0,
      "languages": [],
      "name": "Atreyu",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Atreyu",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Here, we present the implementation of a Bayesian model (BP-Quant) that uses statistically derived peptides signatures to identify peptides that are outside the dominant pattern, or the existence of multiple over-expressed patterns to improve relative protein abundance estimates. It is a research-driven approach that utilizes the objectives of the experiment, defined in the context of a standard statistical hypothesis, to identify a set of peptides exhibiting similar statistical behavior relating to a protein. This approach infers that changes in relative protein abundance can be used as a surrogate for changes in function, without necessarily taking into account the effect of differential post-translational modifications, processing, or splicing in altering protein function. BP-Quant is available as MatLab ® and R packages here.",
      "laborHours": 0,
      "languages": [],
      "name": "BP-Quant",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/BP-Quant",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "All the data and materials for the publication about the Blazing Signature Filter",
      "laborHours": 0,
      "languages": [],
      "name": "BSF_publication",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/BSF_publication",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "BioPython scripts for conversion of GBK files or DNA-based FASTA files to protein FASTA files",
      "laborHours": 0,
      "languages": [],
      "name": "BioPython Scripts",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/BioPython_Scripts",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Library for reading data files acquired on Bruker mass spectrometers.",
      "laborHours": 0,
      "languages": [],
      "name": "Bruker Data Reader",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/BrukerDataReader",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Utility for manually and automatically adding datasets to DMS",
      "laborHours": 0,
      "languages": [],
      "name": "Buzzard",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Buzzard",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Allows for reading Agilent Chemstation .D folders using Dot.NET. The ChemstationMSFileReader provides C# or VB.NET access to reading Agilent Chemstation .D dataset folders, for example, from an Agilent single quadrupole GC-MS instrument.",
      "laborHours": 0,
      "languages": [],
      "name": "ChemstationMSFileReader",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/ChemstationMSFileReader",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Given a list of proteins, finds all cross-linked peptides in the given Ion Mobility MS dataset. This application attempts to find all cross-linked peptides in the given Ion Mobility MS dataset. First, the FASTA file is read in and possible peptides are generated by digesting the protein(s) and assuming 1 max missed cleavage. The possible peptides are searched for in the given features by matching up the monoisotopic mass of the feature to the mass of the peptides. The mass ppm tolerance is an input parameter of the application. All possible cross-links of the unmodified peptides are then calculated and searched for in the Isotopic Peak data. A detailed csv results file is created at the end.",
      "laborHours": 0,
      "languages": [],
      "name": "Crosslinking IMS",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/CrossLinkingIMS",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-20",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Exports Sql Server database objects as schema files. Exported objects include tables, views, stored procedures, and functions,plus also database properties including database roles and logins. The program can also export table data to create SQL files with an Insert Into statement for each row.",
      "laborHours": 0,
      "languages": [],
      "name": "DB Schema Export Tool",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DB-Schema-Export-Tool",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "PRISM Data Management System database schema. This is a collection of DDL files that define the database schema used by the Data Management System (DMS) component of the Pan-Omics Research  Information Storage and Management system (PRISM) at the Pacific Northwest  National Laboratory (PNNL).  PRISM incorporates a diverse set of analysis  tools and allows a wide range of operations to be incorporated, leveraing  a state machine that is accessible to independent, distributed computational  nodes. The system has scaled well as data volume has increased since 2002,  while allowing adaptability for incorporating new and improved data analysis  tools for more effective proteomics research.",
      "laborHours": 0,
      "languages": [],
      "name": "DBSchema_DMS",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DBSchema_DMS",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This is a collection of DDL files that define the database schema used by the Mass and Time Tag System (MTS) component of the Pan-Omics Research Information Storage and Management system (PRISM) at the Pacific Northwest National Laboratory (PNNL).  MTS is used to track and quantify peptides and proteins identified in proteomics and related samples.",
      "laborHours": 0,
      "languages": [],
      "name": "DBSchema_MTS",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DBSchema_MTS",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The DMS Analysis Tool Manager is a part of PRISM, the Proteomics Research Information and Management System. The analysis manager performs automated processing of available job steps, tracked by the in the DMS_Pipeline database. Plugin DLLs implement the processing details for each analysis tool.",
      "laborHours": 0,
      "languages": [],
      "name": "DMS Analysis Tool Manager",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DMS-Analysis-Manager",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The DMS Capture Task Manager is a part of PRISM, the Proteomics Research Information and Management System. The capture manager processes instrument data files, copying them from the instrument to storage servers, validating the data, creating QC graphics, and pushing the data into MyEMSL. Plugin DLLs implement the processing details for each tool.",
      "laborHours": 0,
      "languages": [],
      "name": "DMS Capture Task Manager",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DMS-Capture-Task-Manager",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The DMS Email Manager obtains data from a SQL Server database using queries defined in a settings file, e-mailing the results of the queries to one or more people. Reports can be e-mailed daily or only on certain days. It also supports calling a stored procedure or querying WMI.",
      "laborHours": 0,
      "languages": [],
      "name": "DMS EMail Manager",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DMS-EMail-Manager",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This program examines the source folder on instrument computers to find files and folders. It creates a tab-delimited text file for each instrument, listing the names of the files and folders found. The text files for the instruments are stored in a central location, and are made made visible via the DMS website to allow instrument operators to see the instrument data files on the instrument computer.",
      "laborHours": 0,
      "languages": [],
      "name": "DMS Instrument Directory Scanner",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DMS-Instrument-Directory-Scanner",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Organism Database (FASTA file) programs, including PRISMSeq Uploader and the FastaFileMaker console application. This repository includes several software utilities for working with Protein Collections stored in PRISM, the Proteomics Research Information and Management System.",
      "laborHours": 0,
      "languages": [],
      "name": "DMS Organism Database Handler",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DMS-Organism-Database-Handler",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The DMS Program Runner (MultiProgRunner) is a Windows Service that can be configured to start specific programs on a regular interval. In the Proteomics Research Information and Management System (PRISM) the DMS Program runner Service is used to run manager programs at regular intervals.",
      "laborHours": 0,
      "languages": [],
      "name": "DMS Program Runner Service",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DMS-Program-Runner-Service",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The DMS Space Manager is a part of PRISM, the Proteomics Research Information and Management System. The space manager monitors the free space on Proto-x storage servers, purging old dataset files to free up space if the available space drops below a threshold.",
      "laborHours": 0,
      "languages": [],
      "name": "DMS Space Manager",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DMS-Space-Manager",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The DMS Update Manager is used to keep automated processing manager software up-to-date. Although it is part of PRISM (the Proteomics Research Information and Management System), it is a standalone program and does not contact any databases. The program compares the files on a central distribution share to files on the local computer, updating any files that are out of date. It supports rolling back local files to an older version and auto-deleting extra files.",
      "laborHours": 0,
      "languages": [],
      "name": "DMS Update Manager",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DMS-Update-Manager",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The PNNL Data Management System (DMS) is composed of a SQL Server backend and website front end to allow PNNL staff to track biomaterial, samples, instrument data, and result files from automated software analyses. This repository tracks the files behind the DMS website.",
      "laborHours": 0,
      "languages": [],
      "name": "DMS Website",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DMS-Website",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Data Import Manager is a part of PRISM, the Proteomics Research Information and Management System. The Data Import Manager monitors a central folder for new dataset trigger files, which are XML files that specify metadata for new datasets to import into the Data Management System (DMS). The Data Import Manager validates the metadata in the XML trigger file, notifying the instrument operator by e-mail if invalid metadata is encountered. After processing each XML trigger file, the file is moved into either a success or failure folder.",
      "laborHours": 0,
      "languages": [],
      "name": "Data Import Manager",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Data-Import-Manager",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Data Package Archive Manager is a part of PRISM, the Proteomics Research Information and Management System. The software scans data package folders and files, pushing new or changed files into MyEMSL.",
      "laborHours": 0,
      "languages": [],
      "name": "Data Package Archive Manager",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DataPackage-Archive-Manager",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The DeconEngine includes routines for deconvoluting (deisotoping) observed isotopic signatures in mass spectrometry data to detect features.",
      "laborHours": 0,
      "languages": [],
      "name": "DeconEngineV2",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DeconEngineV2",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "DeconMSn converts mass spectrometry instrument data to text files, including determining the charge state for each parent ion.",
      "laborHours": 0,
      "languages": [],
      "name": "DeconMSn",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DeconMSn",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "DeconTools is a software package used for detecting features in MS data by using the isotopic signatures of expected components. The tool uses different algorithms for different parts of the deconvolution process: noise reduction, peak detection, prediction of theoretical isotopic envelope and scoring functions that quantitate the quality of signature observed in the data.",
      "laborHours": 0,
      "languages": [],
      "name": "DeconTools",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/DeconTools",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The FASTA File Splitter program can be used to split apart a protein FASTA file into a number of sections. Although the splitting is random, each section will have a nearly identical number of residues.",
      "laborHours": 0,
      "languages": [],
      "name": "Fasta File Splitter",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Fasta-File-Splitter",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Reads a protein FASTA file and filters the proteins by either organism name or protein name to create a new, filtered file.",
      "laborHours": 0,
      "languages": [],
      "name": "Fasta Organism Filter",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Fasta-Organism-Filter",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The file Comparison Sampler console application compares two or more files (typically in separate folders) to check whether the start of the files match, the end of the files match, and selected sections inside the files also match. It is useful for comparing large files without reading the entire file. Alternatively, you can provide two folder paths and the program will compare all of the files in the first folder to the identically named files in the second folder.",
      "laborHours": 0,
      "languages": [],
      "name": "File Comparison Sampler",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/File-Comparison-Sampler",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This program sorts a text file alphabetically (forward or reverse). It supports both in-memory sorts for smaller files and use of temporary swap files for large files. It can alternatively sort on a column in a tab-delimited or comma-separated file. The column sort mode also supports numeric sorting.",
      "laborHours": 0,
      "languages": [],
      "name": "Flexible File Sort Utility",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/FlexibleFileSortUtility",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "GlyQ-IQ is a program that performs a targeted, chromatographic centric search of mass spectral data for glycans.  It is designed for high resolution LC-MS datasets.  The software uses a list of glycan targets to search for expected features in MS1 spectra. Features are characterized by monoisotopic mass, elution time, and isotopic fit score. Features are annotated by glycan family relationships and optionally by in-source fragmentation patterns.",
      "laborHours": 0,
      "languages": [],
      "name": "GlyQ-IQ",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/GlyQ-IQ",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This program processes IMS data in a UIMF file to align all frames to a base frame, adjusting the observed drift times of each frame to align with the base frame.",
      "laborHours": 0,
      "languages": [],
      "name": "IMS Drift Time Aligner",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/IMS-Drift-Time-Aligner",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "ImsInformed is a .NET class library that provides target identification workflows for peptides and metabolites alike in IMS experiment runs.",
      "laborHours": 0,
      "languages": [],
      "name": "ImsInformed Library",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/PNNL-Comp-Mass-Spec/IMS-Informed-Library",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/IMS-Informed-Library",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "InfernoRDN can perform various downstream analyses on large scale datasets from proteomics and microarrays.",
      "laborHours": 0,
      "languages": [],
      "name": "InfernoRDN",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/InfernoRDN",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Informed Proteomics project includes algorithms for proteomic mass spectrometry data analysis. Although the back-end data access and some of the scoring routines are general purpose, this repository is currently maintained for top down MS/MS datasets.",
      "laborHours": 0,
      "languages": [],
      "name": "Informed Proteomics",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Informed-Proteomics",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The LC-IMS-MS Feature Finder finds LC-IMS-MS features and conformers using deisotoped features from DeconTools. ",
      "laborHours": 0,
      "languages": [],
      "name": "LC-IMS-MS Feature Finder",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/LC-IMS-MS-Feature-Finder",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "LCMS raw data and MSGF+ results viewer. LcmsSpectator is a standalone Windows graphical user interface tool for viewing LC-MS data and identifications.",
      "laborHours": 0,
      "languages": [],
      "name": "LCMS-Spectator",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/PNNL-Comp-Mass-Spec/LCMS-Spectator/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/LCMS-Spectator",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "LIQUID is a software tool for identifying lipids in LC-MS/MS-based lipidomics data. It is described in publication LIQUID: an-open source software for identifying lipids in LC-MS/MS-based lipidomics data (doi: 10.1093/bioinformatics/btx046). LIQUID provides users with the capability to process high throughput data and contains a customizable target library and scoring model per project needs. The graphical user interface provides visualization of multiple lines of spectral evidence for each lipid identification, allowing rapid examination of data for making confident identifications of lipid molecular species.",
      "laborHours": 0,
      "languages": [],
      "name": "LIQUID",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/LIQUID",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Python scripts of SVM model training and testing used in a publication entitled 'A generalizable method for false-discovery rate estimation in mass spectrometry-based lipidomics'.",
      "laborHours": 0,
      "languages": [],
      "name": "LipidFDR",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/LipidFDR",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Utility to show the shared folders on the local computer, or on a remote computer",
      "laborHours": 0,
      "languages": [],
      "name": "ListWindowsShares",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/List-Windows-Shares",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "A VB.NET DLL that can read mass spectrometry data from four file formats: mzXML, mzData, concatenated .dta files (_dta.txt), and Mascot Generic Format files (.mgf)",
      "laborHours": 0,
      "languages": [],
      "name": "MsDataFileReader",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/MS-Data-File-Reader",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The MS File Info Scanner can be used to scan a series of MS data files (or data folders) and extract the acquisition start and end times, number of spectra, and the total size of the data. In addition, it can create 2D-plot graphics of the m/z values vs. time for QA purposes.",
      "laborHours": 0,
      "languages": [],
      "name": "MS File Info Scanner",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/MS-File-Info-Scanner",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "DataProcessing toolbox for running MSGF+ and MASIC, then merging the results. Uses Windows batch files to automate the process for a folder of Thermo .Raw files",
      "laborHours": 0,
      "languages": [],
      "name": "MSGFPlus_MASIC_Toolbox",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/MSGFPlus_MASIC_Toolbox",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Used to generate an Accurate Mass and Time tag database from local MS/MS search engine results (from SEQUEST, X!Tandem, or MSGF+)",
      "laborHours": 0,
      "languages": [],
      "name": "MTDB-Creator",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/MTDB-Creator",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Mage suite of tools provide access to DMS files and metadata.",
      "laborHours": 0,
      "languages": [],
      "name": "Mage",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Mage",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This is a the code and data for a website created to display collision cross section data for metabolites and small molecules. This repository hosts two things. First is the source code (js) for a website created to display collision cross section data for metabolites and other small molecules. The second is the underlying CCS dataset. The growing interest in metabolomic and exposomic studies is also inciting a need for new techniques to analyze these diverse molecules. Mass spectrometry-based studies are often preferred for the confident identification of small molecules. Ion mobility spectrometry (IMS) is capable of separating molecules that have the same m/z but different conformational arrangements, which is very useful in metabolomic and exposomic analyses. As the desire for IMS measurements of metabolites continues to grow, so does the need for high quality collision cross section (CCS) values.",
      "laborHours": 0,
      "languages": [],
      "name": "Metabolomics Collision Cross Section Database and Server",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/MetabolomicsCCS",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This program can calculate the molecular weight and percent composition of chemical formulas and amino acids, providing a graphical user interface to edit the formulas and parsing options.  It recognizes user-definable abbreviations, custom elemental isotopes, and can display up to 20 compounds simultaneously.  It also includes a Mole/Mass Converter, Formula Finder, Capillary Flow Modeller, Amino Acid Notation Converter, Peptide Sequence Fragmentation Modeler, Isotopic Distribution Calculator, and built-in calculator.  Full program documentation is available by pressing F1 during program operation.",
      "laborHours": 0,
      "languages": [],
      "name": "Molecular Weight Calculator",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Molecular-Weight-Calculator",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "MwtWinDLL contains utility functions for calculating the molecular weight and percent composition of chemical formulas and amino acids. It recognizes user-definable abbreviations and custom elemental isotopes. It also includes a Mole/Mass Converter, Formula Finder, Capillary Flow Modeller, Amino Acid Notation Converter, Isotopic Distribution Calculator, and Peptide Sequence Fragmentation Modeller. To use, simply include the DLL in a .NET project.",
      "laborHours": 0,
      "languages": [],
      "name": "Molecular Weight Calculator Library",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Molecular-Weight-Calculator-DLL",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Aligns multiple LC-MS datasets to one another after which LC-MS features can be matched to a database of peptides (typically an AMT tag database)",
      "laborHours": 0,
      "languages": [],
      "name": "MultiAlign",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/MultiAlign",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Finds 3D XIC features across LC, m/z, and drift time dimensions",
      "laborHours": 0,
      "languages": [],
      "name": "Multidimensional Peak Finding",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Multidimensional-Peak-Finding",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "MTS manager for retrieving files from MyEMSL; The MyEMSL MTS File Cache Manager is a part of PRISM, the Proteomics Research Information and Management System. The software processes the MyEMSL Download Queue in the Mass and Time Tag System (MTS) to download files required for processing.",
      "laborHours": 0,
      "languages": [],
      "name": "MyEMSL MTS File Cache Manager",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/MyEMSL-MTS-File-Cache-Manager",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The MyEMSL Reader is a library used by manager programs in PRISM, the Proteomics Research Information and Management System. The library allows the managers to push files into MyEMSL and later search for and retrieve the files.",
      "laborHours": 0,
      "languages": [],
      "name": "MyEMSL Reader",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/MyEMSL-Reader",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Converts an mzIdentML created by MS-GF+ to a tab-delimited text file.",
      "laborHours": 0,
      "languages": [],
      "name": "MzidToTsvConverter",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Mzid-To-Tsv-Converter",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The OBO Data Converter reads an Ontology file in the OBO format and converts the data to a tab-delimited text file.",
      "laborHours": 0,
      "languages": [],
      "name": "OBO-Data-Converter",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/OBO-Data-Converter",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The OxyDataPlotter library includes a WinForms control with a customizable instance of OxyPlot.",
      "laborHours": 0,
      "languages": [],
      "name": "OxyDataPlotter",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/OxyDataPlotter",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Peptide Hit Results Processor (PHRP) can be used to convert an X!Tandem results file (XML format), MSGF+ .tsv search result file, Sequest Synopsis/First Hits file, or Inspect search result into a series of tab-delimited text files summarizing the results. It will insert modification symbols into the peptide sequences for modified peptides. Parallel files are created containing sequence information, modification details, and protein information. The user can optionally provide a modification definition file that specifies the symbol to use for each modification mass.",
      "laborHours": 0,
      "languages": [],
      "name": "Peptide Hit Results Processor",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/PHRP",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The PNNL Biodiversity Plugin is a software tool for Skyline and is designed to allow pathway-centric browsing of peptides previously identified by LC-MS/MS. The plugin is designed to assist in SRM assay design or DIA data analysis. Users select an organism and biological pathway of interest, then the plugin shows information about the associated peptides.",
      "laborHours": 0,
      "languages": [],
      "name": "PNNL Biodiversity Library Plugin",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/PNNL-Biodiversity-Library-Plugin",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The PNNL Omics Library (PNNLOmics.dll) is a collection of data analysis, file I/O, and visualization routines used by several of the omics-related software developed at PNNL.",
      "laborHours": 0,
      "languages": [],
      "name": "PNNL OMICS",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/PNNL-Omics",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The PRISM Class Library (PRISM.dll) is a collection of routines used by many of the software tools that support the Proteomics Research Information and Management System (PRISM) at PNNL. Although written for use by PRISM tools, the methods in the PRISM class library are general utility methods, and are not dependent on any PNNL resources.",
      "laborHours": 0,
      "languages": [],
      "name": "PRISM Class Library",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/PRISM-Class-Library",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "C# reader/writer for mzIdentML files (.mzID). Also supports reading mzML files.",
      "laborHours": 0,
      "languages": [],
      "name": "PSI_Interface",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/PSI-Interface",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The PepAligner program can read a file containing peptides and align them to a file of protein sequences (.Fasta or delimited text) using Smith-Waterman alignment.",
      "laborHours": 0,
      "languages": [],
      "name": "PepAligner",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/PepAligner",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Peptide Fragmentation Modeller is a command-line utility reads that reads in a text file of peptide sequences and generates the theoretical fragmentation pattern for each, outputting the results in a single concatenated DTA file, or in separate .Dta files. The ion intensity values are not predicted values; instead, b, c, y, and z ions are assigned an intensity of 100; while a ions and neutral loss ions receive an intensity of 20.",
      "laborHours": 0,
      "languages": [],
      "name": "Peptide Fragmentation Modeller",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Peptide-Fragmentation-Modeller",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The PeptideListToXML application reads a tab-delimited text file created by the Peptide Hit Results Processor (PHRP) and creates a PepXML with the appropriate information. The various _SeqInfo files created by PHRP must be present in the same folder as the text file. If the MASIC Scan Stats file is also present, then elution time information will be extracted and included in the PepXML file.  You should ideally also include the name of the parameter file used for the MS/MS search engine.",
      "laborHours": 0,
      "languages": [],
      "name": "PeptideListToXML",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/PeptideListToXML",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "A Population Variation plug-in for the Skyline software program that can assist researchers in determining whether their target peptides have known mutations in the general human population.",
      "laborHours": 0,
      "languages": [],
      "name": "Population Variation Plug-In",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/PopulationVariationPlugin",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Protein Digestion Simulator is a utility for processing FASTA files including converting to/from tab delimited text. It also supports FASTA file validation.",
      "laborHours": 0,
      "languages": [],
      "name": "Protein Digestion Simulator",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Protein-Digestion-Simulator",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The ProteowizardWrapper is a series of C# classes that can be used to interface with the ProteoWizard libraries.",
      "laborHours": 0,
      "languages": [],
      "name": "ProteowizardWrapper",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Proteowizard-Wrapper",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "SMAQC computes quality metrics for a LC-MS/MS dataset. The quality metrics are based on the metrics proposed by Rudnick and Stein, as described in \"Performance metrics for liquid chromatography-tandem mass spectrometry systems in proteomics analyses.\", Mol Cell Proteomics. 2010 Feb;9(2):225-41. SMAQC requires that the dataset first be processed with MASIC, then processed with MSGF+ or X!Tandem. The MSGF+ or X!Tandem results must be post-processed with the PeptideHitResultsProcessor (PHRP).",
      "laborHours": 0,
      "languages": [],
      "name": "SMAQC",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/SMAQC",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "CodeIgniter based website for browsing QC Metrics stored in DMS",
      "laborHours": 0,
      "languages": [],
      "name": "SMAQC_Website",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/SMAQC_Website",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "SIPPER can be used to automatically detect and quantify partially labeled C13 peptides in a single dataset.  It includes a GUI for manual visualization and annotation of detected LC-MS features. It also includes a Simple MS Viewer for exploring mass spectral data. Supports Thermo .Raw files, plus also mzXML, mzML, and mz5.",
      "laborHours": 0,
      "languages": [],
      "name": "Sipper",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Sipper",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "SpectrumLook can be used to visually inspect the peptide sequence matches (PSMs) against fragmentation spectra in an LC-MS/MS dataset.",
      "laborHours": 0,
      "languages": [],
      "name": "SpectrumLook",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/SpectrumLook",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Thermo Raw File Reader is a .NET DLL wrapper for Thermo's MS File Reader, which is accessible by creating an account at https://thermo.flexnetoperations.com/control/thmo/login then logging in and choosing \"Utility Software\". The Thermo Raw File Reader DLL provides several methods for parsing the information returned by MSFileReader, including: Determining the parent ion m/z and fragmentation mode in a given scan filter, determining the Ionization mode from a given scan filter, extracting MRM masses listed in a given scan filter, reporting the number of spectra in the .Raw file, returning details on a specific spectrum, and Obtaining the raw m/z and intensity values for a given spectrum.",
      "laborHours": 0,
      "languages": [],
      "name": "Thermo Raw File Reader",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Thermo-Raw-File-Reader",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This software package includes a library of C# functions to create, modify and extract data from UIMF files. UIMF files are SQLite databases of mass spectrometry data acquired at Pacific Northwest National Laboratory (PNNL).",
      "laborHours": 0,
      "languages": [],
      "name": "UIMF Library",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/PNNL-Comp-Mass-Spec/UIMF-Library/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/UIMF-Library",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This program can read a Uniprot .Dat file and parse out the information for each entry, creating a tab delimited text file or a FASTA file.",
      "laborHours": 0,
      "languages": [],
      "name": "Uniprot-DAT-File-Parser",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Uniprot-DAT-File-Parser",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This program reads in a delimited text file that is in crosstab (aka PivotTable) format and writes out a new file where the data has been unpivotted.",
      "laborHours": 0,
      "languages": [],
      "name": "Unpivot Tool",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Unpivot-Tool",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "VIPER (Visual Inspection of Peak/Elution Relationships) can be used to visualize and characterize the features detected during LC-MS analyses.",
      "laborHours": 0,
      "languages": [],
      "name": "Visual Inspection of Peak/Elution Relationships (VIPER)",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/VIPER",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "VSProj NuGet Version Updater searches for Visual Studio project files (.csproj and.vsproj) that reference a specific NuGet package and updates the referenced version to a newer version if necessary.",
      "laborHours": 0,
      "languages": [],
      "name": "VSProj NuGet Version Updater ",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/VSProj-NuGet-Version-Updater",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "ValidateFastaFile.exe reads a Fasta File and displays statistics on the number of proteins and number of residues.  It also verifies that the protein names, descriptions, and sequences are in the correct format.",
      "laborHours": 0,
      "languages": [],
      "name": "ValidateFastaFile",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Validate-Fasta-File",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Venn Diagram Plotter draws correctly proportioned and positioned two and three circle Venn diagrams (aka Euler diagrams) whose colors can be customized and the diagrams copied to the clipboard or saved to disk.",
      "laborHours": 0,
      "languages": [],
      "name": "Venn Diagram Plotter",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/Venn-Diagram-Plotter",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Python wrapper for Blazing Signature Filter; The Blazing Signature Filter (BSF) is a highly efficient pairwise similarity algorithm which enables extensive data mining within a reasonable amount of time.",
      "laborHours": 0,
      "languages": [],
      "name": "bsf-py",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/bsf-py",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "An example of reproducible proteomics data analysis.",
      "laborHours": 0,
      "languages": [],
      "name": "celegans.aging",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://opensource.org/licenses/Artistic-2.0",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/celegans.aging",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The primary goal was to build a classifier that accurately predicts a binary response. We utilized a Lasso logistic regression classifier (LLRC) which simultaneously restricts the size of model coefficients and the number of quality metrics included the model. Importantly the model does not treat false-negatives and false-positives as equally deleterious events.",
      "laborHours": 0,
      "languages": [],
      "name": "glmnetGLR",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/PNNL-Comp-Mass-Spec/glmnetGLR/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/glmnetGLR",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This is a simple C# console program to validate and update the data from MetabolomicsCCS",
      "laborHours": 0,
      "languages": [],
      "name": "MetaboliteValidation",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/metaboliteValidation",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The Protein Coverage Summarizer can be used to determine the percent of the residues in each protein sequence that have been identified, based on a list of identified peptides. A graphical user interface (GUI) is provided to allow the user to select the input files, set the options, and browse the coverage results.",
      "laborHours": 0,
      "languages": [],
      "name": "Protein Coverage Summarizer",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/protein-coverage-summarizer",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The RMD_RUNS function will log10 transform peptide peak intensity, that is, peptide abundance data and determine if any LC-MS analyses (ie,runs) in a N x P peptide data set are statistical outliers. The statistical analysis is based on summarizing each LC-MS run as a vector of q=5 summary statistics which describe the peptide abundance distribution for a specific run; a N x q matrix is then analyzed using robust PCA to compute a robust estimate of the covariance matrix used in a the calculation of a robut Mahalanobis distance.",
      "laborHours": 0,
      "languages": [],
      "name": "rmd-runs",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-Comp-Mass-Spec/rmd-runs",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "GAP codes for computing (pre)modular data from finite groups.",
      "laborHours": 0,
      "languages": [],
      "name": "GroupTheoretical",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/GroupTheoretical",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Fortran 90 source code, example problems, and output conversion scripts for the STOMP-W simulator. STOMP-W is a numerical simulator written in Fortran 90 for solving problems involving fluid flow and solute/species transport in variably saturated geologic media. The zipped file contains five directories: 1) src (the source code), 2) scripts (output conversion scripts written in perl, 3) prb-w-1 (example problem 1), 4) prb-w-2 (example problem 2), and 5) prb-w-3 (example problem 3). After downloading and unzipping the file, the user must create an executable from the files stored in the src directory. Generic instructions for compiling the source code is shown below as a UNIX/Linux command line, with f90 representing the user's Fortran 90 compiler.",
      "laborHours": 0,
      "languages": [],
      "name": "STOMP-W",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/STOMP-W",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "ThermalTracker tracks birds and bats in thermal video. It will process video in any standard format that was recorded with a thermal video camera. The output is images of the flight tracks of birds and bats in PNG format, and a comma-separated value (CSV) file listing the details of the extracted flight tracks.",
      "laborHours": 0,
      "languages": [],
      "name": "ThermalTracker",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/ThermalTracker/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/ThermalTracker",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Arion is a library and tool set that enables researchers to holistically define test system models. To define a complex system for testing an algorithm or control requires expertise across multiple domains. Simulating a complex system requires the integration of multiple simulators and test hardware, each with their own specification languages and concepts. This requires extensive set of knowledge and capabilities. Arion was developed to alleviate this challenge. Arion is a library of Java libraries that abstracts the concepts from supported simulators into a cohesive model language that allows someone to build models to their needed level of fidelity and expertise. Arion is also a software tool that translates the users model back into the specification languages of the simulators and test hardware needed for execution.",
      "laborHours": 0,
      "languages": [],
      "name": "Arion",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/arion/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/arion",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This repository contains sample code written in PHP that allows you to access the Asset Score API. The Department of Energy Building Energy Asset Score (Asset Score) is a national standardized tool for evaluating the physical and structural energy efficiency of commercial and multifamily residential buildings. The scoring tool will store user-provided data and generate an asset score and system evaluation for your building envelope and mechanical and electrical systems. The tool will also identify cost-effective upgrade opportunities and help you gain insight into the energy efficiency potential of your building.",
      "laborHours": 0,
      "languages": [],
      "name": "asset-score-api-test-harness",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/asset-score-api-test-harness/blob/master/Readme.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/asset-score-api-test-harness",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Trade-offs between microbiome diversity and productivity in a stratified microbial mat",
      "laborHours": 0,
      "languages": [],
      "name": "bernstein-2016-productivity-and-diversity",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/bernstein-2016-productivity-and-diversity/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/bernstein-2016-productivity-and-diversity",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Primary and heterotrophic productivity relate to multi-kingdom diversity in a hypersaline mat",
      "laborHours": 0,
      "languages": [],
      "name": "bernstein-2017-productivity-and-diversity-2",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/bernstein-2017-productivity-and-diversity-2",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "BuildingSync® is a common schema for energy audit data that can be utilized by different software and databases involved in the energy audit process. It allows data to be more easily aggregated, compared and exchanged between different databases and software tools. This streamlines the energy audit process, improving the value of the data and facilitating achievement of greater energy efficiency.",
      "laborHours": 0,
      "languages": [],
      "name": "BuildingSync",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/bsxml-schema/blob/develop/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/bsxml-schema",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This repository contains the tutorial and package reference for the Smisc package.",
      "laborHours": 0,
      "languages": [],
      "name": "docs-Smisc",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/docs-Smisc",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This repository contains the tutorial and package reference for the rsed package.",
      "laborHours": 0,
      "languages": [],
      "name": "docs-rsed",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/docs-rsed",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-21",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "eSTOMP-WR (exascale Subsurface Transport Over Multiple Phases) is a highly scalable (parallel), general-purpose tool for simulating subsurface flow and reactive transport in variably saturated geologic media. It's written in Fortran 90.",
      "laborHours": 0,
      "languages": [],
      "name": "eSTOMP-WR",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/eSTOMP-WR",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-22",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "ESTEEM is an interactive web-based prototype visualization tool to allow you to explore dynamic word embeddings across regions using siple keyword queries.",
      "laborHours": 0,
      "languages": [],
      "name": "ESTEEM",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/esteem",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-22",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Extensible quality control dashboard built around FASTQ assessment. FQC is designed to better group FastQC result data across groups where each group is comprised of FASTQs related to an experiment or sequencing batch. Individual samples are grouped into paired-end sets when available and the dashboard's extensibility allows a user to add plots or tables as desired.",
      "laborHours": 0,
      "languages": [],
      "name": "FQC",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/fqc",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-22",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Snakemake-based amplicon processing protocol for 16S and ITS sequences. ",
      "laborHours": 0,
      "languages": [],
      "name": "hundo",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/hundo",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-22",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Faster clustering algorithms written in Java for multicore CPUs.",
      "laborHours": 0,
      "languages": [],
      "name": "Java Analytic Components Lite (JAC)",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/jac-lite-clustering/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/jac-lite-clustering",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-22",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This is supplemental material for a scientific paper. This project 'bernstein-2017-founders-species', explores community succession using a lake biofilm as a model. The code here was used to process and analyze environmental metadata and genetic sequencing data. Statistical tests and data visualization are included.\nThis code makes use of commodity software that is freely available and commonly used in this field. No new methods or techniques are introduced in this code.",
      "laborHours": 0,
      "languages": [],
      "name": "jansson_snijders_collaborative_cross",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/jansson_snijders_collaborative_cross/blob/master/README.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/jansson_snijders_collaborative_cross",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-22",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "The JAT (Just Add Tests) Box is a preconfigured Behat Vagrant virtual machine.",
      "laborHours": 0,
      "languages": [],
      "name": "JAT-Box",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/jatbox",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-22",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This code can be used to generate a damage map based on the presence of rubble. Rubble is often detectable in images with submeter resolution, and can indicate damage to structures from high winds or earthquakes. The process_images.py script outputs a mask indicating the pixels in the original image where rubble was detected. The mask can be used in a geospatial software application like ArcMap to generate a damage map based on the rubble density. The rubble detection mask will contain some false positives which are usually more isolated than true rubble, so a density map will provide a more accurate indication of affected areas than the indivdidual rubble detections will.",
      "laborHours": 0,
      "languages": [],
      "name": "rubblepy",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/rubblepy/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/rubblepy",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-22",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "This provides several Fortran for consistent handling of time series data. These are used by PNNL's MASS1 and MASS2 codes.",
      "laborHours": 0,
      "languages": [],
      "name": "Time Series Fortran 90 Modules",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pnnl/time_series/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/time_series",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-22",
        "metadataLastUpdated": "2018-03-19"
      },
      "description": "Uncertainty quantification code from PNNL",
      "laborHours": 0,
      "languages": [],
      "name": "uq",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/uq",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "nijhuis2@llnl.gov"
      },
      "date": {
        "created": "2018-02-23",
        "metadataLastUpdated": "2018-02-23"
      },
      "description": "A sequence-based annotation pipeline for phage",
      "laborHours": 0,
      "languages": [],
      "name": "PhATE (Phage Annotation Tool and Evaluator)",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/carolzhou/phage",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-26",
        "metadataLastUpdated": "2018-02-26"
      },
      "description": "An API library that allows communication with oVirt using the Go language.",
      "laborHours": 0,
      "languages": [],
      "name": "Go oVirt API",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/EMSL-MSC/ovirtapi",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-02-26",
        "metadataLastUpdated": "2018-02-26"
      },
      "description": "This code creates a new \"provider\" plugin to the terraform utility that allows it control virtual machines running in oVirt.",
      "laborHours": 0,
      "languages": [],
      "name": "Terraform oVirt Provider",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/EMSL-MSC/terraform-provider-ovirt",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "ndbrook@sandia.gov"
      },
      "date": {
        "created": "2018-03-01",
        "metadataLastUpdated": "2018-03-01"
      },
      "description": "BioCompoundML is a software tool for rapidly screening chemicals by chemical properties, using machine learning.",
      "laborHours": 0,
      "languages": [],
      "name": "sandialabs/BioCompoundML",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/BioCompoundDB",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "daibane@sandia.gov"
      },
      "date": {
        "created": "2018-03-01",
        "metadataLastUpdated": "2018-03-26"
      },
      "description": "Omega_h is a C++11 library that implements tetrahedron and triangle mesh adaptativity, with a focus on scalable HPC performance using (optionally) MPI, OpenMP, or CUDA. It is intended to provided adaptive functionality to existing simulation codes. Mesh adaptivity allows one to minimize both discretization error and number of degrees of freedom live during the simulation, as well as enabling moving object and evolving geometry simulations. Omega_h will do this for you in a way that is fast, memory-efficient, and portable across many different architectures, including NVIDIA GPUs.",
      "laborHours": 0,
      "languages": [],
      "name": "Omega_h",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ibaned/omega_h",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "barno1@llnl.gov"
      },
      "date": {
        "created": "2018-03-06",
        "metadataLastUpdated": "2018-03-06"
      },
      "description": "Tool for calibrating 1D coda seismic models",
      "laborHours": 0,
      "languages": [],
      "name": "LLNL/coda-calibration-tool",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/coda-calibration-tool",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-03-06",
        "metadataLastUpdated": "2018-03-07"
      },
      "description": "Executables for working with EnergyPlus Input Files (IDF) This project aims to provide a suite of executables for working with EnergyPlus Input Files (IDF). The project is developed using the Haskell programming language (c.f., https://www.haskell.org/).\nThe current release (version 0.1.0.0) includes a utility that \"pretty prints\" the input file (i.e., that decodes and then, immediately, re-encodes and displays the input file, viz., that sanitizes the input) and a utility that converts the input file into\na labeled graph in the DOT language (c.f., https://www.graphviz.org/doc/info/lang.html) for subsequent rendering using\nGraphviz Visualization Software (c.f., https://www.graphviz.org/).\n\nAn example workflow is to pipe the input file into the pretty printer, to pipe the result into the labeled graph converter, and then to pipe the result into Graphviz, yielding an image file that depicts the hierarchical and referential relationships between EnergyPlus Data Dictionary (IDD) classes that are detected within the input file.",
      "laborHours": 0,
      "languages": [],
      "name": "pnnl/Haskell-IDF-Executable",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/Haskell-IDF-Executable",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-03-06",
        "metadataLastUpdated": "2018-03-15"
      },
      "description": "Resonance Inspection encompasses a suite of techniques for the purpose of materials characterization and nondestructive evaluation. These techniques utilize the mechanical resonances of the sample(s) to determine and monitor material properties (e.g., elastic moduli, phase changes), sort mechanically defective parts, determine the presence/level of mechanical damage (micro-cracking, delaminations, disbonding, etc.) and monitor mass/density fluctuations to name a few applications. The Resonance Inspection Techniques & Analyses (RITA) system has been developed to facilitate these and other applications in a user friendly and cost effective package.",
      "homepageURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
      "laborHours": 0,
      "languages": [],
      "name": "Resonance Inspection Techniques & Analysis (RITA)",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
            "name": "Other"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ]
    },
    {
      "contact": {
        "email": "bledsoe2@llnl.gov"
      },
      "date": {
        "created": "2018-03-07",
        "metadataLastUpdated": "2018-03-20"
      },
      "description": "ConveyorLC is a high throughput virtual screening pipeline for in-silico screening of virtual compound databases using high performance computing. The pipeline mainly includes four modules: receptor/target preparation, ligand preparation, VinaLC docking calculation, and molecular mechanics/generalized Born surface area rescoring.",
      "laborHours": 0,
      "languages": [],
      "name": "Conveyor LC",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/XiaohuaZhangLLNL/conveyorlc",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-03-15",
        "metadataLastUpdated": "2018-03-15"
      },
      "description": "XMOF2D is a library implementing the X-MOF (eXtended Moments of Fluid) interface reconstruction method on unstructured polygonal meshes with convex cells. Given a computational mesh with multi-material cells, for which volume fractions and centroids of contained materials are provided, piecewise linear material interfaces are constructed inside such cells using the Moment-of-Fluid (MOF) method. Additionally, a hierarchical mesh is created, where every multi-material cell of the computational mesh contains a local mesh with fully established local topology, as well as the parentage information to relate mesh entities from the local and the computational \nmeshes.",
      "laborHours": 0,
      "languages": [],
      "name": "XMOF2D",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/laristra/XMOF2D",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-03-15",
        "metadataLastUpdated": "2018-03-15"
      },
      "description": "PetaVision is an open source, object oriented neural simulation toolbox optimized for high-performance multi-core, multi-node computer architectures. PetaVision is intended for computational neuroscientists who seek to apply neuromorphic models to hard signal processing problems; both to improve on the performance of existing algorithms and/or to gain insight into the computational mechanisms underlying biological neural processing. \n\nPlease note that this assertion and ESTSC deposit are only for the portions of PetaVision which have been funded and written by LANL developers.",
      "laborHours": 0,
      "languages": [],
      "name": "PetaVision version 2.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/epl-1.0",
            "name": "EPL-1.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PetaVision/OpenPV/",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-03-16",
        "metadataLastUpdated": "2018-03-16"
      },
      "description": "Plugin API for the LANL Mama (Morphological Analysis of Materials) application.",
      "laborHours": 0,
      "languages": [],
      "name": "MAMA Plugin API",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/mama-plugin-api",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "bledsoe2@llnl.gov"
      },
      "date": {
        "created": "2018-03-20",
        "metadataLastUpdated": "2018-03-21"
      },
      "description": "AMPE is a phase-field code. It evolves in time the Allen-Cahn equations associated with a phase­field model, coupled with the time-evolution of a composition field (in an alloy) and a temperature field which are described by diffusion equations. It can also solve the elasticity equations assuming mechanical equilibrium at every time-step. Grain orientations are described by normalized quaternions which also evolve in time according to Allen-Cahn type equations. ",
      "laborHours": 0,
      "languages": [],
      "name": "AMPE",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/AMPE",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "bledsoe2@llnl.gov"
      },
      "date": {
        "created": "2018-03-20",
        "metadataLastUpdated": "2018-03-20"
      },
      "description": "VinaLC is based on a very popular PC-based molecular docking program, AutoDock Vina. The original Vina docking program was modified and parallelized, using an MPI and multithreading hybrid scheme, and potentially can be used in the future on exascale machines, without sacrificing accuracy.",
      "laborHours": 0,
      "languages": [],
      "name": "VinaLC: Parallel Molecular Docking Program",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/XiaohuaZhangLLNL/VinaLC",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "pgarvey@bnl.gov"
      },
      "date": {
        "created": "2018-03-21",
        "metadataLastUpdated": "2018-03-21"
      },
      "description": "Image processing tools for computed tomography. This is an non-functioning, incomplete, and abandoned project.",
      "laborHours": 0,
      "languages": [],
      "name": "pyRafters",
      "organization": "Brookhaven National Laboratory (BNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/BrookhavenNationalLaboratory/pyRafters",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Brookhaven National Laboratory (BNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-03-28",
        "metadataLastUpdated": "2018-03-28"
      },
      "description": "The goal of Computational Simulation of Online Social Behavior (SocialSim) is to develop innovative technologies for highfidelity computational simulation of online social behavior. SocialSim will focus specifically on information spread and evolution. Current computational approaches to social and behavioral simulation are limited in this regard. Top-down simulation approaches focus on the dynamics of a population as a whole, and model behavioral phenomena by assuming uniform or mostly-uniform behavior across that population. Such methods can easily scale to simulate massive populations, but can be inaccurate if there are specific, distinct variations in the characteristics of the population. In contrast, bottom-up simulation approaches treat population dynamics as an emergent property of the activities and interactions taking place within a diverse population. While such approaches can enable more accurate simulation of information spread, they do not readily scale to represent large populations. SocialSim aims to develop novel approaches to address these challenges.",
      "laborHours": 0,
      "languages": [],
      "name": "pnnl/socialsim",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/socialsim",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "bledsoe2@llnl.gov"
      },
      "date": {
        "created": "2018-03-28",
        "metadataLastUpdated": "2018-03-28"
      },
      "description": "The program is a set of python scripts which extends the open source\nprogram Caffc lo allow it to learn to train a neuml network using self -supervised training. ",
      "laborHours": 0,
      "languages": [],
      "name": "Caffe Standardized Self-Supervised Scripts (CSSSS)",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/selfsupervised",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "koziol@lbl.gov"
      },
      "date": {
        "created": "2018-03-30",
        "metadataLastUpdated": "2018-04-02"
      },
      "description": "HDF5 is a data model, library, and file format for storing and managing data. It supports an unlimited variety of datatypes, and is designed for flexible and efficient I/O and for high volume and complex data. HDF5 is portable and is extensible, allowing applications to evolve in their use of HDF5. The HDF5 Technology suite includes tools and applications for managing, manipulating, viewing, and analyzing data in the HDF5 format.",
      "laborHours": 0,
      "languages": [],
      "name": "HDF5",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://bitbucket.hdfgroup.org/scm/hdffv/hdf5.git",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ]
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-03-30",
        "metadataLastUpdated": "2018-04-06"
      },
      "description": "The numerical background of the FEHM computer code can be traced to the early 1970s when it was used to simulate geothermal and hot dry rock reservoirs. The primary use over a number of years was to assist in the understanding of flow fields and mass transport in the saturated and unsaturated zones below the potential Yucca Mountain repository. Today FEHM is used to simulate groundwater and contaminant flow and transport in deep and shallow, fractured and un-fractured porous media throughout the US DOE complex. FEHM has proved to be a valuable asset on a variety of projects of national interest including Environmental Remediation of the Nevada Test Site, the LANL Groundwater Protection Program, geologic CO2 sequestration, Enhanced Geothermal Energy (EGS) programs, Oil and Gas production, Nuclear Waste Isolation, and Arctic Permafrost. Subsurface physics has ranged from single fluid/single phase fluid flow when simulating basin scale groundwater aquifers to complex multifluid/ multi-phase fluid flow that includes phase change with boiling and condensing in applications such as unsaturated zone surrounding nuclear waste storage facility or leakage of CO2/brine through faults or wellbores. The numerical method used in FEHM is the control volume method (CV) for fluid flow and heat transfer equations which allows FEHM to exactly enforce energy/mass conservation; while an option is available to use the finite element (FE) method for displacement equations to obtain more accurate stress calculations. In addition to these standard methods, an option to use FE for flow is available, as well as a simple Finite Difference scheme.",
      "laborHours": 0,
      "languages": [],
      "name": "FEHM V3.0 - V3.X",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/FEHM",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jodi@ecolibrium3.org"
      },
      "date": {
        "created": "2018-03-30",
        "metadataLastUpdated": "2018-05-15"
      },
      "description": "The Duluth Shines! application is an online solar map developed in partnership with the University of Minnesota-Duluth to allow the public to compute solar resources available on the rooftops of properties within the Duluth City Limits. The map links to a Minnesota DNR solar cost calculator.",
      "homepageURL": "http://umd-cla-gis04.d.umn.edu/duluthshines/",
      "laborHours": 0,
      "languages": [],
      "name": "Duluth Shines! Solar Map Application",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "http://solar.maps.umn.edu/products.php",
            "name": "Other"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "http://umd-cla-gis04.d.umn.edu/duluthshines/",
      "status": "Development",
      "tags": [
        "DOE CODE"
      ]
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-04-02",
        "metadataLastUpdated": "2018-04-02"
      },
      "description": "Scalable High-performance Algorithms and Data-structures.\nScalable High-performance Algorithms and Data-structures (SHAD) is an application programming interface based on a generic software library. It has a modular design that enables reuse of modules. The core of this software tool set is built on an Abstract Runtime interface and it's library includes the common data structures such as array, vector, map and set. It is designed to accommodate significant amount of data which can be accessed in massively parallel environments, and used as building blocks for SHAD extensions, i.e. higher level software libraries.",
      "laborHours": 0,
      "languages": [],
      "name": "pnnl/SHAD",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/SHAD",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-04-05",
        "metadataLastUpdated": "2018-04-05"
      },
      "description": "PNNL Cost-Performance Tool (DOE-OE sponsored) for Estimation of Capital Costs for Redox Flow Batteries. Battelle IPID 30401. Copyright © 2013, Battelle Memorial Institute.",
      "laborHours": 0,
      "languages": [],
      "name": "PNNL-OE-Redox-Flow-Battery-Cost-Tool/PNNL-OE-Redox-Flow-Battery-Cost-Tool",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-OE-Redox-Flow-Battery-Cost-Tool/PNNL-OE-Redox-Flow-Battery-Cost-Tool",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "bledsoe2@llnl.gov"
      },
      "date": {
        "created": "2018-04-09",
        "metadataLastUpdated": "2018-04-09"
      },
      "description": "LH2TS enables to calculate the wasted H2 due to transfer and boil-off while using LH2 as a fuel for transportation. The supply chain from the liquefaction plant to the station can be modeled using real gas equations of state from REFPROP and heat transfer models. ",
      "laborHours": 0,
      "languages": [],
      "name": "LH2 Transfer Simulation ",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://opensource.org/licenses/NASA-1.3",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/LH2Transfer",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-04-10",
        "metadataLastUpdated": "2018-04-11"
      },
      "description": "PyFEHM is an open-source Python library that provides classes and methods to support a scripting environment for the subsurface heat and mass transfer, and geomechanics code FEHM. It is inspired by a similar library, PyTOUGH, available for use with the TOUGH2 family of codes. ",
      "laborHours": 0,
      "languages": [],
      "name": "pyFEHM",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/PyFEHM",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-04-10",
        "metadataLastUpdated": "2018-04-10"
      },
      "description": "This piece of software aims at providing an implementation of methods to perform efficient optimization, probabilistic inference and model selection and learning for various type of networked systems. The software contains a suite of methods and functions that: 1) perform probabilistic inference and random sampling on networked models 2) select or learn networked models from data 3) solve optimization tasks with a networked structure Network models that are supported by these features include, but are not limited to, factor graphs and Markov random fields such as Ising models, Potts models, p-spins models, Gaussian random fields and restricted Boltzmann machine.",
      "laborHours": 0,
      "languages": [],
      "name": "Optimization, Inference and Learning for Advanced Networks",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl-ansi/GraphicalModelLearning.jl",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-04-11",
        "metadataLastUpdated": "2018-04-11"
      },
      "description": "This code package solves the multi-species 1D-3V BGK kinetic model of Haack, Hauck, and Murillo [J. Stat. Phys., 168, 2017, Phys. Rev. E, submitted, 2017]. This model conserves mass, momentum, and energy and satisfies Boltzmann's H Theorem, i.e. entropy dissipation. Additionally, the collision model matches either the momentum or temperature relaxation rate of the Boltzmann equation. It can be run in 0D-3V and 1D-3V modes.",
      "laborHours": 0,
      "languages": [],
      "name": "Multi-BGK",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/Multi-BGK",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "ndbrook@sandia.gov"
      },
      "date": {
        "created": "2018-04-12",
        "metadataLastUpdated": "2018-04-12"
      },
      "description": "ExaMiniMD is a proxy application for Molecular Dynamics (MD) codes such as LAMMPS. Its intend is to facilitate research and development on MD algorithms in particular in the context of CoDesign efforts with hardware vendors. Currently, ExaMiniMD implements a basic Lennard Jones two body potential as well as the SNAP many body potential, both of which are available in LAMMPS. It also includes basic neighbor list builds as well as constant energy integration as found in LAMMPS and other MD codes. A feature not generally available in other MD codes is a set of statistical correctness checks which will help other developers judge whether changes to the code still give correct answers. ExaMiniMD is using the Kokkos programming model to achieve performance portability and is able to run across all major HPC platforms (GPUs, ManyCore, CPUs).",
      "laborHours": 0,
      "languages": [],
      "name": "ECP-copa/ExaMiniMD",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ecp-copa/examinimd",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "ndbrook@sandia.gov"
      },
      "date": {
        "created": "2018-04-12",
        "metadataLastUpdated": "2018-04-12"
      },
      "description": "FAODEL is a collection of libraries for implementing data management services on high-performance computing (HPC) platforms. It is composed of several components: (1) an RDMA portability library called NNTI for transporting data, (2) an in-application, restful API service, (3) a memory management library for network memory named Lunasa, (4) an asynchronous communication engine, and (5) a distributed key/blob service names Kelpie. Application developers may use these libraries to move data between the distributed nodes of one job to another, as well as to distributed storage resources. FAODEL is different than other communication libraries in that it supports both intra- and inter-job communication, features event-driven mechanisms, and provides high-level primitives for developers to reason about a platform’s distributed resources.",
      "laborHours": 0,
      "languages": [],
      "name": "faodel/faodel",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/faodel/faodel",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "ndbrook@sandia.gov"
      },
      "date": {
        "created": "2018-04-12",
        "metadataLastUpdated": "2018-04-12"
      },
      "description": "The MCMD 1.0 model is used to quantify mass and heat transfer for both direct contact and air gap membrane distillation technologies.  The code is designed to be able to be extended to include many different membrane distillation configurations of which air-gap and direct contact are two examples that have already been implemented. ",
      "laborHours": 0,
      "languages": [],
      "name": "Multi-Configuration Membrane Distillation Model 1.0 ",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dlvilla/mcmd1",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "ostrouchovg@ornl.gov"
      },
      "date": {
        "created": "2018-04-13",
        "metadataLastUpdated": "2018-06-28"
      },
      "description": "pbdR: This release script for pbdR 1.0 combines several repositories on GitHub and on CRAN with an installer script. We list authors of the subject repositories who are active maintainers.\n\nPackages are released under a variety of licenses noted in the release script.",
      "laborHours": 0,
      "languages": [
        "R"
      ],
      "name": "RBigData/release",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          },
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          },
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          },
          {
            "URL": "https://api.github.com/licenses/lgpl-3.0",
            "name": "LGPL-3.0"
          },
          {
            "URL": "https://api.github.com/licenses/mpl-2.0",
            "name": "MPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/RBigData/release",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git",
      "version": "1.0"
    },
    {
      "contact": {
        "email": "jacob@anl.gov"
      },
      "date": {
        "created": "2018-04-13",
        "metadataLastUpdated": "2018-04-16"
      },
      "description": "MCT is a set of open-source software tools for creating coupled models. MCT is fully parallel and can be used to couple message-passing parallel models to create a parallel coupled model. MCT is available as a small library and a set of Fortran90 modules.\nInteroperability is through a simple API. Two models that declare and use MCT datatypes can be coupled with a minimum of effort.",
      "laborHours": 0,
      "languages": [],
      "name": "Model Coupling Toolkit",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/MCSclimate/MCT",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "dkrakowski@anl.gov"
      },
      "date": {
        "created": "2018-04-17",
        "metadataLastUpdated": "2018-04-17"
      },
      "description": "PETSc is a suite of data structures and routines for the scalable (parallel) solution of scientific applications modeled by partial differential equations. It supports MPI, and GPUs through CUDA or OpenCL, as well as hybrid MPI-GPU parallelism. PETSc (sometimes called PETSc/Tao) also contains the Tao optimization software library.",
      "laborHours": 0,
      "languages": [],
      "name": "PETSc",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/petsc/petsc/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/petsc/petsc",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "EnergyPlus™ is a whole building energy simulation program that engineers, architects, and researchers use to model both energy consumption and water use in buildings.",
      "laborHours": 0,
      "languages": [],
      "name": "EnergyPlus",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL-BTRIC/EnergyPlus/blob/develop/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-BTRIC/EnergyPlus",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Modbus XML Schema Definition and utility software\n",
      "laborHours": 0,
      "languages": [],
      "name": "ModbusXMLSchema",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-BTRIC/ModbusXMLSchema",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "OpenStudio is a cross-platform collection of software tools to support whole building energy modeling using EnergyPlus and advanced daylight analysis using Radiance. http://openstudio.nrel.gov/\n",
      "laborHours": 0,
      "languages": [],
      "name": "OpenStudio",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL-BTRIC/OpenStudio/blob/develop/license.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-BTRIC/OpenStudio",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "A library for modeling energy storage devices. http://cap.readthedocs.org\n",
      "laborHours": 0,
      "languages": [],
      "name": "Cap",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-CEES/Cap",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "DTKData contains large files for DataTransferKit testing and examples.\n",
      "laborHours": 0,
      "languages": [],
      "name": "DTKData",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-CEES/DTKData",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "A library for multiphysics solution transfer.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Data Transfer Kit (DTK)",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-CEES/DataTransferKit",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "MCREX Monte Carlo linear solvers project repository. http://ornl-cees.github.io/MCREX/\n",
      "laborHours": 0,
      "languages": [],
      "name": "MCREX",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-CEES/MCREX",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "A set of radiation transport mini-applications used for performance optimization on HPC systems. http://ornl-cees.github.io/Profugus\n",
      "laborHours": 0,
      "languages": [],
      "name": "Profugus",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-CEES/Profugus",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Compilation, analysis and optimization framework for the Scaffold quantum programming language.\n",
      "laborHours": 0,
      "languages": [],
      "name": "ScaffCC",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL-QCI/ScaffCC/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/ScaffCC",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Adiabatic Quantum Computing -- embedding your problems into quantum computers\n",
      "laborHours": 0,
      "languages": [],
      "name": "Virtual Hardware Embedding Suite for Adiabatic Quantum Computing",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/aqc-virtual-embedding",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Armish-fireplace is a middleware container. It allows asynchronous rx and tx for the client implemented with a multithreaded buffer. It contains modules which organizes module-specific processing units. These processing units are the heart of the processing armish-fireplace does. A processing unit may be a hardware device driver or a hardware simulation driver. Processing units can be loaded/unloaded at runtime changing functionality.\n",
      "laborHours": 0,
      "languages": [],
      "name": "armish-fireplace",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/armish-fireplace",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Repository for hosting QCI-relevant Dockerfiles\n",
      "laborHours": 0,
      "languages": [],
      "name": "dockerfiles",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/dockerfiles",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "eldispacho (Dispatcher) is a singleton that simulates the quantum network itself. Each quantum client connects to the dispatcher, which then simulates channels for communication. Eldispacho has a sense of time and space and thus is where the noise model is located.\n",
      "laborHours": 0,
      "languages": [],
      "name": "eldispacho",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/eldispacho",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Open vSwitch is a multilayer software switch licensed under the open source Apache 2 license. Our goal is to implement a production quality switch platform that supports standard management interfaces and opens the forwarding functions to programmatic extension and control. Open vSwitch is well suited to function as a virtual switch in VM environments. In addition to exposing standard control and visibility interfaces to the virtual networking layer, it was designed to support distribution across multiple physical servers. Open vSwitch supports multiple Linux-based virtualization technologies including Xen/XenServer, KVM, and VirtualBox.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Open vSwitch",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/ovs",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Sabot is a quantum state simulator with a client-server architecture. This makes possible distributed simulations with many clients accessing a single instance of the simulator. This design is useful when more than one client wishes to access one quantum state. This occurs during quantum communication, for example. It is also possible to have users running on personal machines with the simulator running on a much more powerful machine.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Sabot",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL-QCI/sabot",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Clone of Open MPI",
      "laborHours": 0,
      "languages": [],
      "name": "ompi",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/ORNL/ompi/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL/ompi",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "SystemBurn is a software package designed to allow users to methodically create maximal loads on systems ranging from desktops to supercomputers.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Systemburn",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL/systemburn",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "This repository shows how to use various linear algebra libraries (MAGMA, CULA, and LAPACK) on Titan with Fortran and C. MAGMA and CULA are accelerated libraries that take advantage of Titan's GPUs.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Using Linear Algebra Libaries",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/olcf/AccelLinAlgebraLibraries",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "This tutorial will show how to parallelize a simple Monte Carlo operation using a GPU accelerator.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Accelerating Serial Code for GPUs",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/olcf/Accelerating-Serial-Code",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Module file to be used with Fortran (90) to gain access to MAGMA's C routines\n",
      "laborHours": 0,
      "languages": [],
      "name": "MAGMAFortranModule",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/olcf/MAGMAFortranModule",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "This project creates an image of a Mandelbrot fractal. This repository contains three separate codes: a serial version, an OpenMP version, and a hybrid OpenMP and MPI version.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Parallel Mandelbrot",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/olcf/Mandelbrot",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "This tutorial covers how to write a parallel program to calculate π using the Monte Carlo method with MPI and OpenMP\n",
      "laborHours": 0,
      "languages": [],
      "name": "Serial to Parallel: A Monte Carlo Operation",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/olcf/Serial-to-Parallel--Monte-Carlo-Pi",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Simple Molecular Dynamics Simulation and Analysis using iPython\n",
      "laborHours": 0,
      "languages": [],
      "name": "iPython Molecular Dynamics",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/olcf/iPython-Molecular-Dynamics",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "A suite of parallel file system tools designed for performance and scalability\n",
      "laborHours": 0,
      "languages": [],
      "name": "PCircle",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/olcf/pcircle",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Smithy provides sane software installation and modulefile management\n",
      "laborHours": 0,
      "languages": [],
      "name": "Smithy",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/olcf/smithy/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/olcf/smithy",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "CMS geographic variation map visualization http://ornl-sava.github.io/cms-geovar/\n",
      "laborHours": 0,
      "languages": [],
      "name": "cms-geovar",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/cms-geovar",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "gopcap is a pure Go implementation of the pcap file format. Pcap is the standard open-source packet capture format, and is defined by the libpcap C library.\n",
      "laborHours": 0,
      "languages": [],
      "name": "gopcap",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/JoelWesleyReed/gopcap/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/gopcap",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Log-tool is a framework for connecting and processing streams of data. It has a simple modular architecture, consisting of input streams, output streams, and \"parsers\". The \"parsers\" are both input and output streams, and they (generally) perform some operation on that data that passes through them. Many of these parsers can be combined in series to perform more complex operations.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Log-tool",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/log-tool",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Node.js module to send a stream of items to a Redis pubsub channel\n",
      "laborHours": 0,
      "languages": [],
      "name": "redis-pubsub-stream",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/redis-pubsub-stream",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Node.js module to persist a stream of items to Redis\n",
      "laborHours": 0,
      "languages": [],
      "name": "redis-row-stream",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/redis-row-stream",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Manage your node.js app configuration based on NODE_ENV, all configuration defined in yaml\n",
      "laborHours": 0,
      "languages": [],
      "name": "yaml-config-node",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/yaml-config-node",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Yet Another Yaml configuration module for loading multiple environment settings from a single settings file\n",
      "laborHours": 0,
      "languages": [],
      "name": "yayaml-config",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornl-sava/yayaml-config",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "The Adaptable IO System (ADIOS) provides a simple, flexible way for scientists to describe the data in their code that may need to be written, read, or processed outside of the running simulation. By providing an external to the code XML file describing the various elements, their types, and how you wish to process them this run, the routines in the host code (either Fortran or C) can transparently change how they process the data.\n",
      "laborHours": 0,
      "languages": [],
      "name": "ADIOS",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornladios/ADIOS",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "Next generation of ADIOS developed in the Exascale Computing Program\n",
      "laborHours": 0,
      "languages": [],
      "name": "ADIOS2",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ornladios/ADIOS2",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "laymancelk@ornl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-18"
      },
      "description": "A mini-app to represent the multipole resonance representation lookup cross section algorithm.\n",
      "laborHours": 0,
      "languages": [],
      "name": "RSBench",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/ORNL/RSBench",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "jacob@anl.gov"
      },
      "date": {
        "created": "2018-04-18",
        "metadataLastUpdated": "2018-04-21"
      },
      "description": "\nE3SM is a state-of-the-art fully coupled model of the Earth's climate including important biogeochemical and cryospheric processes. It is intended to address the most challenging and demanding climate-change research problems and DOE mission needs while efficiently using DOE Leadership Computing Facilities. ",
      "laborHours": 0,
      "languages": [],
      "name": "Energy Exascale Earth System Model",
      "organization": "Argonne National Laboratory (ANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/E3SM-Project/E3SM.git",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Argonne National Laboratory (ANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-04-19",
        "metadataLastUpdated": "2018-04-19"
      },
      "description": "This software automates the production of standalone emulators for complex computer models. The end result of running the software is a piece of code called an emulator, a statistical approximation which predicts the output of complex computer simulation, but at a much faster speed. The emulator is built using a training set of inputs and outputs from the simulations. The input-output pairs are used in a Bayesian scheme to estimate the parameters of a Gaussian process based regression model that learns the input-output relationship. The estimated parameters are combined with a generic C skeleton to produce a compile-able instantiation of the emulator.",
      "laborHours": 0,
      "languages": [],
      "name": "Emulator Generation Gadget",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/EGG",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-04-19",
        "metadataLastUpdated": "2018-04-19"
      },
      "description": "bifacialvf is a self-contained view factor (or configuration factor) model which replicates a 5-row PV system of infinite extent perpendicular to the module rows. \nSingle-axis tracking is supported, and hourly output files based on TMY inputs are saved.  Spatial nonuniformity is reported, with multiple rear-facing irradiances collected on the back of each module row.\nBased on the publication: \"A Practical Irradiance Model for Bifacial PV Modules\" B. Marion, S. MacAlpine, C. Deline, A. Asgharzadeh, F. Toor, D. Riley, J. Stein, C. Hansen 2017 IEEE Photovoltaic Specialists Conference, Washington DC, 2017 URL: https://www.nrel.gov/docs/fy17osti/67847.pdf\n",
      "laborHours": 0,
      "languages": [],
      "name": "bifacialvf - Bifacial PV view factor performance simulation",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/bifacialvf/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/bifacialvf",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-04-19",
        "metadataLastUpdated": "2018-04-19"
      },
      "description": "The HTEM DB is a public database and web application containing measurements of thin film materials collected using \"high throughput\" (combinatorial) synthesis and measurement processes. This software provides examples of utilizing the HTEM-DB API to access, plot and analyze the data contained therein.",
      "laborHours": 0,
      "languages": [],
      "name": "HTEM-DB API Examples",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/htem-api-examples",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-04-19",
        "metadataLastUpdated": "2018-04-20"
      },
      "description": "The WIND Toolkit HSDS API examples provide example python software notebooks (software) and a javascript visualization that demonstrate use of the HDF Group's HSDS API utilizing data for NREL's WIND Toolkit.",
      "laborHours": 0,
      "languages": [],
      "name": "WIND Toolkit HSDS API Examples",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/nrel/hsds-examples",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "fattebertj@ornl.gov"
      },
      "date": {
        "created": "2018-04-20",
        "metadataLastUpdated": "2018-04-20"
      },
      "description": "MGmol is a scalable O(N) First-Principles Molecular Dynamics code that is capable of performing large-scale electronics structure calculations and molecular dynamics simulations of atomistic systems.",
      "laborHours": 0,
      "languages": [],
      "name": "LLNL/mgmol",
      "organization": "Oak Ridge National Laboratory (ORNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.1",
            "name": "GPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/mgmol",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Oak Ridge National Laboratory (ORNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-04-20",
        "metadataLastUpdated": "2018-04-20"
      },
      "description": "MOSART-WM - a large scale water management model",
      "laborHours": 0,
      "languages": [],
      "name": "IMMM-SFA/wm",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/IMMM-SFA/wm",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-04-23",
        "metadataLastUpdated": "2018-04-23"
      },
      "description": "BRICR is software for translating BuildingSync XML (BSXML) to OpenStudio Workflow (OSW) files for simulation.  Each BSXML contains information about a building as well as multiple possible energy efficiency upgrade options.  An OSW file is created and run for each possible efficiency upgrade, the results of all simulations are stored in BSXML format.\n\nBRICR was jointly developed by NREL and LBNL for the San Francisco BayREN: Integrated Commercial Retrofits (BRICR) project funded under the DOE solicitation \"Solutions to Improve the Energy Efficiency of U.S. Small and Medium Commercial Buildings (DE-FOA-0001385)\":\n\nhttps://www.energy.gov/eere/buildings/downloads/san-francisco-bayren-integrated-commercial-retrofits",
      "laborHours": 0,
      "languages": [],
      "name": "NREL/bricr",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/NREL/bricr/blob/develop/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/nrel/bricr",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-04-23",
        "metadataLastUpdated": "2018-04-23"
      },
      "description": "A python library used to estimate soiling losses from PV energy production data.",
      "laborHours": 0,
      "languages": [],
      "name": "PV Soiling Detection",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/pv_soiling ",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-04-24",
        "metadataLastUpdated": "2018-04-24"
      },
      "description": "The ns-3 topology generator provides a quick and easy way to create a network topology, and generate C++ simulation code for ns-3.",
      "laborHours": 0,
      "languages": [],
      "name": "idaholab/Topology_Generator",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/Topology_Generator",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-04-24",
        "metadataLastUpdated": "2018-04-24"
      },
      "description": "The ns-3 code generator provides a way to automatically generate C++ simulation code for ns-3 from a high level network topology description.",
      "laborHours": 0,
      "languages": [],
      "name": "idaholab/Code_Generator",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/Code_Generator",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-04-24",
        "metadataLastUpdated": "2018-04-24"
      },
      "description": "HPC job tracker is a wrapper script which will allow some of the resources a HPC application consumes to be tracked for the duration of the job.",
      "laborHours": 0,
      "languages": [],
      "name": "idaholab/HPC_Job_Tracker",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mpl-2.0",
            "name": "MPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/HPC_Job_Tracker",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-04-24",
        "metadataLastUpdated": "2018-04-25"
      },
      "description": "Mesoscale Atomistic Glue Program for Integrated Execution",
      "laborHours": 0,
      "languages": [],
      "name": "idaholab/magpie",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/magpie",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-04-25",
        "metadataLastUpdated": "2018-04-25"
      },
      "description": "Interactive machine learning interface\nOur invention allows the user to interact with individual instances, see recommendations for similar items, and make\nadjustments. The scalable nature of our solution allows it to perform instantaneously from the user's perspective, even for\n100K+ data items.",
      "laborHours": 0,
      "languages": [],
      "name": "pnnl/chissl",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/chissl",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-04-26",
        "metadataLastUpdated": "2018-04-26"
      },
      "description": "Simulation software for biochemical systems that use mass action kinetics based on maximum entropy production. ",
      "laborHours": 0,
      "languages": [],
      "name": "Simulations of State for Biology",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PNNL-CompBio/Boltzmann",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-05-01",
        "metadataLastUpdated": "2018-05-01"
      },
      "description": "Phase Field Dislocation Dynamics (PFDD) is a phase field approach for tracking the motion and interactions of individual dislocations in materials, mostly face-centered cubic (fcc) metals. The phase field approach relies on scalar order parameters or phase field variables to track a quantity of interest. In PFDD, these phase field variables represent the passage of perfect dislocations across each active slip system, with one order parameter defined in each slip system. Partial dislocations are represented with linear combinations of the order parameters. The system is evolved through minimization of the total system energy, which is directly dependent on the phase field variables. All of the physics is described by the total energy functional that is derived from a thermodynamic basis, and the system kinetics are evolved using a Ginzburg-Landau (GL) equation.",
      "laborHours": 0,
      "languages": [],
      "name": "Phase Field Dislocation Dynamics (PFDD)",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/Phase-Field-Dislocation-Dynamics-PFDD",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "ndbrook@sandia.gov"
      },
      "date": {
        "created": "2018-05-02",
        "metadataLastUpdated": "2018-05-02"
      },
      "description": "The software is an analyzer for automated sandbox analysis of malware on the OS X operating system. It runs inside an OS X virtual machine to collect data about what happens when a given file opened or run. As of August 2014, there was no sandbox software for Mac OS X malware, as it requires different methods from those used on the Windows OS (which most sandboxes are written for). This software adds OS X analysis capabilities to an existing open-source sandbox, Cuckoo Sandbox (https://cuckoosandbox.org/), which previously only worked for Windows. \n\nThe analyzer itself can take many different types of files as input: the traditional Mach-O and FAT executables, .app files, zip files, Python scripts, Java archives, and web pages, as well as PDFs and other documents. While the file is running, the analyzer also simulates rudimentary human interaction with clicks and mouse movements in order to bypass the tests some malware use to see if they are being analyzed. The analyzer outputs several different kinds of data: functions call traces, network captures, screenshots, and all created and modified files. This work also includes a static analysis Cuckoo module for Mach-O binary files. It extracts file structures, code library imports and exports, and signatures. This data can be used along with the analyzer results to create signatures for malware.  ",
      "laborHours": 0,
      "languages": [],
      "name": "sandialabs/mac-sandbox",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/mac-sandbox",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "ndbrook@sandia.gov"
      },
      "date": {
        "created": "2018-05-02",
        "metadataLastUpdated": "2018-05-02"
      },
      "description": "LAPART is an artificial neural network algorithm written in the Python programming language.  The algorithm can learn patterns using multi-dimensional hyper boxes.  It can also perfrom regression and classification calculations based on learned associations.",
      "laborHours": 0,
      "languages": [],
      "name": "sandialabs/lapart-python",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/unlicense",
            "name": "The Unlicense"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/sandialabs/lapart-python",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-05-02",
        "metadataLastUpdated": "2018-05-02"
      },
      "description": "The standard scenarios match (sssmatch) tool accepts limited information about an existing transmission system model and computes a new generation mix based on a.) matching a particular NREL Standard Scenario generation mix and b.) minimizing the distance between the system’s original mix and the final one. The distance metric is computed on a nodal basis.",
      "laborHours": 0,
      "languages": [],
      "name": "sssmatch (Standard ScenarioS Match)",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Smart-DS/sssmatch",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "bjoo@jlab.org"
      },
      "date": {
        "created": "2018-05-08",
        "metadataLastUpdated": "2018-05-08"
      },
      "description": "QMP Message Passing Library. A simple wrapper for MPI to implement the QMP Interface.",
      "laborHours": 0,
      "languages": [],
      "name": "QMP",
      "organization": "Thomas Jefferson National Accelerator Facility (TJNAF)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://raw.githubusercontent.com/usqcd-software/qmp/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usqcd-software/qmp",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Thomas Jefferson National Accelerator Facility (TJNAF)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "bjoo@jlab.org"
      },
      "date": {
        "created": "2018-05-08",
        "metadataLastUpdated": "2018-05-08"
      },
      "description": "A library to read LIME files. LIME is a record oriented file format allowing binary and textual records to be kept in the same file. It is based on a proposed Internet standard by Microsoft called DIME which is now part of the .NET framework.",
      "laborHours": 0,
      "languages": [],
      "name": "c-lime",
      "organization": "Thomas Jefferson National Accelerator Facility (TJNAF)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://raw.githubusercontent.com/usqcd-software/c-lime/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/usqcd-software/c-lime",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Thomas Jefferson National Accelerator Facility (TJNAF)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-05-09",
        "metadataLastUpdated": "2018-05-09"
      },
      "description": "The RMA-MT benchmarks are a suite of performance tests for multi-threaded Message Passing Interface (MPI) Remote Memory Access (RMA) implementations. The suite includes tests for bandwidth and latency with any number of threads. This suite was originally developed and release by Sandia National Laboratory. LANL modifications to the suite include a complete re-write of much of the source code, bi-directional bandwidth, and message rate tests.",
      "laborHours": 0,
      "languages": [],
      "name": "RMA-MT Benchmarks ",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/hpc/rma-mt",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-05-09",
        "metadataLastUpdated": "2018-05-09"
      },
      "description": "The forms and workflow developed were designed to collect additional statistical information not normally available in out of- the-box implementations of the Remedy Action Request System designed by BMC Software. This workflow is used to  collect additional information about users accessing the Remedy application, such as operating system and browser type. This information along with frequency of user logins, number of emails sent and received, and overall license usage help provide Remedy Administrators a better overview of the application they support. These custom forms and workflow work heavily with existing out-of-the-box forms in Remedy, and display the collected data to users through the product BMC’s companion product Smart Reporting. ",
      "laborHours": 0,
      "languages": [],
      "name": "Remedy Application Statistics",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/Remedy-Application-Statistics",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "bledsoe2@llnl.gov"
      },
      "date": {
        "created": "2018-05-10",
        "metadataLastUpdated": "2018-05-22"
      },
      "description": "Pyranda Is fortran 90 code which solves compact finite difference equations on a three dimensional fortran arrays, domain decomposed using the Message Passing Interface (MPI). The fortran source solves the linear system of equations which forms a pentadtagona1 matrix. Derivatives are used to construct hyperbolic partlal differential equation (PDE) operators, namely gradient, divergence, Laplacian, and curl operators. \n5. Solution Method:\nThe library provides a python Interface which facilitates problem setup and description. However, the core solver Is written in the fortran 90 language. The solver couples MPI communication and linear solves together so that a direct (non-iterative) solution to the linear system of equations can be computed with minimal communication. Domain decomposition is limited to a uniform data size but provides perfect load balancing. \n6. Computer for which the code Is written:",
      "laborHours": 0,
      "languages": [],
      "name": "PYRANDA",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/pyranda",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "bledsoe2@llnl.gov"
      },
      "date": {
        "created": "2018-05-10",
        "metadataLastUpdated": "2018-05-10"
      },
      "description": "STAT is a light weight debugging tool that gathers and merges stack traces from all of the processes in a parallel application. STAT uses the MRNet tree based overlay network to broadcast commands from the tool front-end to the STAT daemons and for the front-end to gather the traces from the STAT daemons. As the traces propagate through the MRNet network tree, they are merged across all tasks to fonn a single call prefix tree. The call prefix tree can be examined to identify tuks with similar function call patterns and to delineate a small set of equivalence classes. A representative task from each of these classes can then be fed into a full feature debugger like TotalView for root cause analysis. ",
      "laborHours": 0,
      "languages": [],
      "name": "Stack Trace Analysis Tool (STAT)",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/STAT",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "svince@lbl.gov"
      },
      "date": {
        "created": "2018-05-15",
        "metadataLastUpdated": "2018-05-15"
      },
      "description": "Mota is a library that provides several heuristics for mapping tasks to compute ranks (processes) on a networked computer cluster or supercomputer. It was originally designed for task placement of adaptive mesh refinement codes (AMR). It is multi-objective in the sense that it simultaneously balances (potentially multiple types of) computational load on each rank as well as the communication traffic between the boxes. The heuristics used for mapping include algorithms such as greedy list assignment and space-filling curves, as well as algorithms from graph analysis such as adjacency matrix bandwidth reduction, recursive bisection, and greedy graph placement.",
      "laborHours": 0,
      "languages": [],
      "name": "Mota Mapper: A Multi-Objective Topology-Aware Mapper Library",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LBL-CoDEx/mota",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-05-15",
        "metadataLastUpdated": "2018-05-15"
      },
      "description": "Global Memory and Threading runtime system",
      "laborHours": 0,
      "languages": [],
      "name": "pnnl/gmt",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/gmt",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "svince@lbl.gov"
      },
      "date": {
        "created": "2018-05-18",
        "metadataLastUpdated": "2018-05-18"
      },
      "description": "OpenStudio is a cross-platform collection of software tools to support whole building energy modeling using EnergyPlus and advanced daylight analysis using Radiance.\n\nThis disclosure includes two OpenStudio measures: (1) data center prototype models, and (2) occupant schedule generator. The data center models cover two sizes (small computer server rooms, stand-alone large data centers) and two IT load densities (average and high).",
      "laborHours": 0,
      "languages": [],
      "name": "NREL/OpenStudio",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/OpenStudio",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "svince@lbl.gov"
      },
      "date": {
        "created": "2018-05-18",
        "metadataLastUpdated": "2018-05-21"
      },
      "description": "MaDaTS provides an integrated data management and workflow execution framework on multi-tiered storage systems. Users of MaDaTS can execute a workflow by either specifying the workflow stages in a YAML description file, or use the API to manage the workflow through a Virtual Data Space (VDS) abstraction.",
      "laborHours": 0,
      "languages": [],
      "name": "\tManaging Data on Tiered Storage for Scientific Workflows (MaDaTS) v1.1.2",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dghoshal-lbl/madats ",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-05-22",
        "metadataLastUpdated": "2018-05-22"
      },
      "description": "The software was developed for the purpose of Microgrid Controller Procurement where multiple Microgrid Controller vendors were competing to prove the best performance. Each microgrid controller was connected to Real-Time Simulator (Opal-RT) where the Real-Time model of microgrid was simulated. Microgrid controllers were able to control most of the assets in the model. To be able to fairly compare controller's performance each controller was evaluated using exactly the same model, with the same initial conditions and exactly the same test sequence.\n\nThe microgrid evaluation test sequence lasted 100 minutes and consist of various grid disturbances to which a microgrid controller must respond. The microgrid and power system will experience multiple types of disturbances while performing dispatch functions.  Many functions are tested in grid-connected and islanded modes such as unexpended failures of generators, energy storage trip events, and large load fluctuations. The test sequence focuses on fault scenarios that cause the highest short-circuit fault current contribution; force a swing bus or generator capable of being a swing bus offline; cause the most reconfigurations; and cause conflicting objectives for the microgrid controller. \n\nDuring the test sequence execution multiple datapoints are being recorded and stored. During data postprocessing key performance parameters are extracted allowing quantitative comparison of performance on multiple aspects including: resiliency, fuel utilization, grid interconnection, ancillary services and power quality and eventually after summing all key performance parameters by comparing the overall result.\n\nTo be able to perform such testing multiple tools had to be developed included in this repository including:\n- Real time model of microgrid (Urban-Banshee, Remote-smaller model)\n- Test sequence configuration tools\n- Test execution real-time scripts\n- Post processing scripts\n- Human Machine Interface software",
      "laborHours": 0,
      "languages": [],
      "name": "GHOST (Grid Hardware Open Source Testbed)",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/PowerSystemsHIL/EPHCC/tree/NREL_merge ",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-05-22",
        "metadataLastUpdated": "2018-05-22"
      },
      "description": "SolarPILOT™advances the analytical flux image Hermite series approximation used in DELSOL3 by applying it to individual heliostat images rather than \"zones\", allowing characterization of a wide variety of heliostat field layouts. SolarPILOT also integrates the SolTrace Monte-Carlo ray tracing engine, providing improved receiver optical modeling capability, a user-friendly front end for geometry definition, and side-by-side validation of the analytical algorithms. The tool and source code are publicly available and are designed for third-party modification and extendability. The software is intended as a replacement for the more antiquated DELSOL3 algorithm originally developed at Sandia National Laboratory. The software will be used at NREL for power tower component design analysis and may be used at other laboratories, in academia, or as a third-party validation tool by some industry groups.",
      "laborHours": 0,
      "languages": [],
      "name": "SolarPILOT™",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/SolarPILOT",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "bledsoe2@llnl.gov"
      },
      "date": {
        "created": "2018-05-23",
        "metadataLastUpdated": "2018-05-23"
      },
      "description": "ParELAGMC is a parallel distributed memory C++ library for multilevel Monte Carlo (MLMC) simulations with algebraically constructed coarse spaces for estimating statistical moments of a quantity of interest involving solutions of partial differential equations with uncertain coefficients. A primary focus of the library is the scalable generation of Gaussian random fields using a novel stochastic PDE (SPDE) sampling technique for large-scale simulations. A key feature in the SPDE sampling technique is a novel non-matching mesh embedding technique to mitigate artificial boundary artifacts that are inherent in the method. Example applications to uncertainty quantification of subsurface flow simulations in the mixed finite element setting are provided as well.",
      "laborHours": 0,
      "languages": [],
      "name": "Parallel Element Agglomeration Multilevel Monte Carlo Library (ParELAGMC)",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/parelagmc",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-05-23",
        "metadataLastUpdated": "2018-05-23"
      },
      "description": "Lightweight Python package for assembling, sharing, and running workflows, especially those associated with modifying, running, and analyzing simulation models.",
      "laborHours": 0,
      "languages": [],
      "name": "layerstack",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/Smart-DS/layerstack",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "A python client that talks to the PCDS logbook using the logbook webservice.\n",
      "laborHours": 0,
      "languages": [],
      "name": "LogBookClient",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/LogBookClient",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "Python interface to archiver appliance that most closely matches the legacy xpppython api.\n",
      "laborHours": 0,
      "languages": [],
      "name": "archapp",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/archapp/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/archapp",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "LCLS-II MPS central node software.\n",
      "laborHours": 0,
      "languages": [],
      "name": "central_node_engine",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/central_node_engine/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/central_node_engine",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "LCLS-II MPS central node IOC.\n",
      "laborHours": 0,
      "languages": [],
      "name": "central_node_ioc",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/central_node_ioc/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/central_node_ioc",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "This package contains SQLAlchemy python classes that provide access to the MPS sqlite3 database.\n",
      "laborHours": 0,
      "languages": [],
      "name": "LCLS-II MPS Database",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/mps_database/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/mps_database",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "Collection of conda recipes for PCDS software at LCLS.\n",
      "laborHours": 0,
      "languages": [],
      "name": "pcds-recipes",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/pcds-recipes/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pcds-recipes",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "Maps URLs into experiment results folders after authz.\n",
      "laborHours": 0,
      "languages": [],
      "name": "pcds_expresults",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pcds_expresults",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "Geometry Description Markup Language (GDML) version 3.1.2 (deprecated but used by SLIC).\n",
      "laborHours": 0,
      "languages": [],
      "name": "Geometry Description Markup Language (GDML)",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/gdml/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/gdml",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "Investigate hdf5 1.10 features like SWMR and virtual dataset for LCLS II\n",
      "laborHours": 0,
      "languages": [],
      "name": "lc2-hdf5-110",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/lc2-hdf5-110",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "Linear Collider Detector Description (LCDD) project.\n",
      "laborHours": 0,
      "languages": [],
      "name": "lcdd",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/lcdd/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/lcdd",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "LCSim Java Library\n",
      "laborHours": 0,
      "languages": [],
      "name": "lcsim",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/lcsim/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/lcsim",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "Simulation for the Linear Collider (SLIC) Geant4 simulation application.\n",
      "laborHours": 0,
      "languages": [],
      "name": "SLIC",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/slic/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/slic",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "Work to cross validate on mutli GPU host.\n",
      "laborHours": 0,
      "languages": [],
      "name": "xvalid",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/xvalid",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-24",
        "metadataLastUpdated": "2018-05-24"
      },
      "description": "EPICS IOC code for LCLS-II superconducting low level RF system, talking to FPGAs using LBNL's protocol.\n",
      "laborHours": 0,
      "languages": [],
      "name": "scllrf",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/scllrf/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/scllrf",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "Parameter Manager for PCDS IMS Motors.\n",
      "laborHours": 0,
      "languages": [],
      "name": "pmgr",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/pmgr/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/pmgr",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "Timescan control for cxi.\n",
      "laborHours": 0,
      "languages": [],
      "name": "timescans",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/timescans",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "This repository contains instructions on the setup and building the DTM firmware for Proto-DUNE.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Proto-DUNE",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/proto-dune/blob/master/LICENSE.txt",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/proto-dune",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "Easiest Alert System Ever (EPICS alert and reaction system)\n",
      "laborHours": 0,
      "languages": [],
      "name": "EASE",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/ease/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/ease",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "Python module for control of LCLS beamlines-By abstracting individual devices into larger collections of paths, operators can quickly guide beam to experimental end stations. Instead of dealing with the individual interfaces for each device, devices are summarized in states. This allows operators to quickly view and manipulate large sections of the beamline when the goal is to simply handle beam delivery.\n",
      "laborHours": 0,
      "languages": [],
      "name": "LCLS Lightpath",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pcdshub/lightpath/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/lightpath",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "Automated calculation of beryllium lens focusing optics for MFX Transfocator.\n",
      "laborHours": 0,
      "languages": [],
      "name": "transfocate",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/pcdshub/transfocate/blob/master/LICENSE.md",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/transfocate",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "SPPARKS is a kinetic Monte Carlo (KMC) code designed to run efficiently on parallel computers using both KMC and Metropolis Monte Carlo algorithms. \n",
      "laborHours": 0,
      "languages": [],
      "name": "SPPARKS",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-2.0",
            "name": "GPL-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/SPPARKS",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "A script package for an advanced cubit interface. Provides a lot of functionality, that is not included in the official python interface.\n",
      "laborHours": 0,
      "languages": [],
      "name": "advcubit",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/advcubit",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "Example recipes and scripts for use with CIVET (Continuous Integration, Verification, Enhancement, and Testing). \n",
      "laborHours": 0,
      "languages": [],
      "name": "Example CIVET recipes",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/civet_example_recipes",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "Test repository used for CIVET demonstration purposes.",
      "laborHours": 0,
      "languages": [],
      "name": "labrat",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/labrat",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "Three dimensional binary collision Monte Carlo library for sampling ion collision cascades in materials.\n",
      "laborHours": 0,
      "languages": [],
      "name": "MyTRIM",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/lgpl-2.1",
            "name": "LGPL-2.1"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/mytrim",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "RAVEN (Risk Analysis Virtual Environment) is a flexible and multi-purpose probabilistic risk analysis, uncertainty quantification, parameter optimization and data knowledge-discovering framework. https://raven.inl.gov/\n",
      "laborHours": 0,
      "languages": [],
      "name": "Raven",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/apache-2.0",
            "name": "Apache-2.0"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/raven",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "christopher.kowalczyk@inl.gov"
      },
      "date": {
        "created": "2018-05-30",
        "metadataLastUpdated": "2018-05-30"
      },
      "description": "Create schematics of thermal-hydraulic systems.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Schematics",
      "organization": "Idaho National Laboratory (INL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/idaholab/schematics",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Idaho National Laboratory (INL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-06-05",
        "metadataLastUpdated": "2018-06-05"
      },
      "description": "This module performs abstractions for the CXI detector stands in order to manipulate them as rigid bodies. By first manipulating pairs of motors as joints, and then the stand as a collection of three unieque joints, higher level functions such as translate and rotate are created to help the operator quickly adjust the stand.\n",
      "laborHours": 0,
      "languages": [],
      "name": "detrot",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/detrot/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/detrot",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-06-05",
        "metadataLastUpdated": "2018-06-05"
      },
      "description": "This is the repository for hxdhome developed at SLAC National Accelerator Laboratory.",
      "laborHours": 0,
      "languages": [],
      "name": "hxdhome",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/hxdhome/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/hxdhome",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-06-05",
        "metadataLastUpdated": "2018-06-05"
      },
      "description": "A general repository of useful information for programming across the lab. This repository is oriented around tools, education, best practices, and general knowledge around programming and software development across the lab. We hope it will empower anyone who writes softare at the lab, whether it's analysis scripts in python, firmware for daq systems, web apps for communications, or just simple bash scripts.\n",
      "laborHours": 0,
      "languages": [],
      "name": "Programming at SLAC",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://github.com/slaclab/programming/blob/master/LICENSE",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/programming",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-06-08",
        "metadataLastUpdated": "2018-06-14"
      },
      "description": "TaskAMR is a Cartesian Block Adaptive Mesh Refinement (AMR) code, written using the Regent/Legion parallel programming system, that solves Finite Volume calculations. We provide implementations for linear advection and gas dynamics.",
      "laborHours": 0,
      "languages": [],
      "name": "TaskAMR",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/TaskAMR",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "spotluri@nvidia.com"
      },
      "date": {
        "created": "2018-06-12",
        "metadataLastUpdated": "2018-06-12"
      },
      "description": "Prototype of OpenSHMEM for NVIDIA GPUs, developed as part of DoE Design Forward project.",
      "laborHours": 0,
      "languages": [
        "C"
      ],
      "name": "NVIDIA/df-nvshmem-prototype",
      "organization": "CONTR",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NVIDIA/df-nvshmem-prototype",
      "status": "Development",
      "tags": [
        "DOE CODE"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "phuck@lbl.gov"
      },
      "date": {
        "created": "2018-06-14",
        "metadataLastUpdated": "2018-06-14"
      },
      "description": "Python Materials Genomics (pymatgen) is a robust materials analysis code that defines core object representations for structures and molecules with support for many electronic structure codes. It is currently the core analysis code powering the Materials Project.",
      "laborHours": 0,
      "languages": [
        "Python"
      ],
      "name": "pymatgen",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/materialsproject/pymatgen",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "phuck@lbl.gov"
      },
      "date": {
        "created": "2018-06-14",
        "metadataLastUpdated": "2018-06-14"
      },
      "description": "FireWorks is a free, open-source code for defining, managing, and executing workflows. Complex workflows can be defined using Python, JSON, or YAML, are stored using MongoDB, and can be monitored through a built-in web interface. Workflow execution can be automated over arbitrary computing resources, including those that have a queueing system. FireWorks has been used to run millions of workflows encompassing tens of millions of CPU-hours across diverse application areas and in long-term production projects over the span of multiple years.",
      "laborHours": 0,
      "languages": [
        "Python"
      ],
      "name": "fireworks",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/materialsproject/fireworks",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "phuck@lbl.gov"
      },
      "date": {
        "created": "2018-06-14",
        "metadataLastUpdated": "2018-06-14"
      },
      "description": "Since its start in 2011, Materials Project (MP, https://materialsproject.org/) has grown into a world-wide resource for a materials sciences community of more than 27,000 users who rely on the portal as a trusted source to accelerate their research. As a result, they wish to help with MP's efforts by contributing back, but also ask for support in sharing their experimental and computational datasets alongside MP's curated results. This provides the opportunity for researchers in both domains to validate calculations or measurements almost instantaneously and use the disseminated data for integrated materials studies.\n\nWith the public announcement of our general contribution framework, MPContribs, we present a sustainable solution for well-curated data management, organization and dissemination in the context of MP. The framework serves the purpose of collectively maintaining contributions to local and MP community databases as annotations to existing MP materials. It subsequently disseminates them through a generic interactive gateway powered by Jupyter notebooks or through custom project web apps enabled by the webtzite app kit.",
      "laborHours": 0,
      "languages": [
        "Python",
        "JavaScript"
      ],
      "name": "MPContribs",
      "organization": "Lawrence Berkeley National Laboratory (LBNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/mit",
            "name": "MIT"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/materialsproject/MPContribs",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Lawrence Berkeley National Laboratory (LBNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-06-15",
        "metadataLastUpdated": "2018-06-15"
      },
      "description": "Python Remote Sensing",
      "laborHours": 0,
      "languages": [],
      "name": "pnnl/pysensing",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-2-clause",
            "name": "BSD-2-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/pnnl/pysensing ",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-06-15",
        "metadataLastUpdated": "2018-06-18"
      },
      "description": "GeoMatTool support the estimation of parameter values for certain models of use in geomechanics modeling and simulation. The tool itself is a Java language script that functions principally as a database manager for data from certain geomechanical tests. The tool as a database manager allows the user to access, review and modify in limited ways the data. The tool then serves as an interface to plotting and statistical software packages to facilitate the evaluation of the data and parameter estimation.",
      "homepageURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
      "laborHours": 0,
      "languages": [],
      "name": "GeoMatTool, Version 1.0",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
            "name": "Other"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "http://www.lanl.gov/projects/feynman-center/deploying-innovation/intellectual-property/software-tools/index.php",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ]
    },
    {
      "contact": {
        "email": "bledsoe2@llnl.gov"
      },
      "date": {
        "created": "2018-06-19",
        "metadataLastUpdated": "2018-06-19"
      },
      "description": "ROVER Is an application for distributed-memory volume rendering and simulated radiography focused on many-core architectures (e.g., GPU, CPU, and MIC). Volume rendering, also known as volume visualization, is a commonly used scientific visualization algorithm that enables users to visualize an entire scalar field at once by mapping scalar values to colors and transparency. Simulated radiography Is a generalization of the volume rendering algorithm from four color channels (I.e., red, green, blue, and transparency) to an arbitrary number of channels representing material opacities in discrete energy groups, measured In electron volts.",
      "laborHours": 0,
      "languages": [
        "C++"
      ],
      "name": "ROVER",
      "organization": "Lawrence Livermore National Laboratory (LLNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/LLNL/rover",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Lawrence Livermore National Laboratory (LLNL)"
      ],
      "vcs": "git",
      "version": "0.1.0"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-06-19",
        "metadataLastUpdated": "2018-06-19"
      },
      "description": "Kappa and BioNetGen (BNGL) are prominent rule-based modeling languages for representing complex biochemical reaction networks. Each language is distributed with a distinct software suite and modelers may wish to take advantage of both toolsets. This application, TRuML, translates models written in either Kappa or BNGL into the other language. While similar in many respects, key differences between the two languages makes translation sufficiently complex that automation becomes a useful tool. TRuML accommodates the languages' complexities and produces a semantically equivalent model in the alternate language of the input model when possible, and an approximate model in certain other cases.",
      "laborHours": 0,
      "languages": [],
      "name": "TRuML",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/lanl/TRuML",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "kbadura@lanl.gov"
      },
      "date": {
        "created": "2018-06-19",
        "metadataLastUpdated": "2018-06-19"
      },
      "description": "PyDislocDyn is a suite of python programs designed to perform various calculations for basic research in dislocation dynamics in metals with simple crystal symmetries in the continuum limit. In particular, one of its main purposes is to calculate dislocation drag from phonon wind (i.e. the friction coefficient of a moving crystal defect called a “dislocation” due to its interaction with crystal lattice vibrations or phonons). Additional features include the averaging of elastic constants for polycrystals, the calculation of the dislocation field and the calculation of dislocation self-energy and line tension. ",
      "laborHours": 0,
      "languages": [],
      "name": "PyDislocDyn",
      "organization": "Los Alamos National Laboratory (LANL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/dblaschke-LANL/PyDislocDyn",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "Los Alamos National Laboratory (LANL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "ndbrook@sandia.gov"
      },
      "date": {
        "created": "2018-06-20",
        "metadataLastUpdated": "2018-06-20"
      },
      "description": "NimbleSM is a Lagrangian finite-element code for solid mechanics.  Its primary application is the solution of mechanics problems on nonuniform, three-dimensional meshes using either explicit transient dynamic or implicit quasi-static time integration.  Additional features include multiscale modeling and the simulation of contact.  The NimbleSM code base is designed for performance portability across varying hardware architectures. ",
      "laborHours": 0,
      "languages": [],
      "name": "NimbleSM",
      "organization": "Sandia National Laboratories (SNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NimbleSM/NimbleSM",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Sandia National Laboratories (SNL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "maggiel@slac.stanford.edu"
      },
      "date": {
        "created": "2018-06-21",
        "metadataLastUpdated": "2018-06-21"
      },
      "description": "Securely and quickly copy data from source to target. bbcp is a point-to-point network file copy application. It is capable of transferring files at approaching line speeds in the WAN.\n",
      "laborHours": 0,
      "languages": [],
      "name": "bbcp",
      "organization": "SLAC National Accelerator Laboratory (SLAC)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "http://www.slac.stanford.edu/~abh/bbcp/#_Toc392015168",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/slaclab/bbcp",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "SLAC National Accelerator Laboratory (SLAC)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "suzanne.hoffman@nrel.gov"
      },
      "date": {
        "created": "2018-06-26",
        "metadataLastUpdated": "2018-06-26"
      },
      "description": "The Software is a toolbox for Dynamic Programming and Adaptive Dynamic Programming (ADP) that enables stochastic, multi-period decision optimization for arbitrary \"black box\" models. It’s modular framework is designed to serve as a wrapper for other simulation tools. This enables forward-looking optimization under uncertainty to aid decision making by a variety of stakeholders when facing an increasingly uncertain future. ",
      "laborHours": 0,
      "languages": [],
      "name": "dynamo",
      "organization": "National Renewable Energy Laboratory (NREL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/NREL/dynamo",
      "status": "Production",
      "tags": [
        "DOE CODE",
        "National Renewable Energy Laboratory (NREL)"
      ],
      "vcs": "git"
    },
    {
      "contact": {
        "email": "czhu@pppl.gov"
      },
      "date": {
        "created": "2018-06-27",
        "metadataLastUpdated": "2018-06-27"
      },
      "description": "FOCUS uses 3D curves to represent coils in fusion devices, mainly for toroidal devices including stellarators and tokamaks. For a given configuration, FOCUS can find optimal coils, which can produced the required magnetic field for confining the plasma meeting the user-specified physics and engineering constraints.",
      "homepageURL": "https://princetonuniversity.github.io/FOCUS/",
      "laborHours": 0,
      "languages": [
        "Fortran"
      ],
      "name": "Flexible Optimized Coils Using Space curves (FOCUS)",
      "organization": "Princeton Plasma Physics Laboratory (PPPL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "https://princetonuniversity.github.io/FOCUS/",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Princeton Plasma Physics Laboratory (PPPL)"
      ],
      "version": "0.3.1"
    },
    {
      "contact": {
        "email": "fpoli@pppl.gov"
      },
      "date": {
        "created": "2018-06-27",
        "metadataLastUpdated": "2018-06-27"
      },
      "description": "TRANSP is a 1.5D equilibrium and transport solver for interpretation and prediction of tokamak discharges",
      "homepageURL": "https://transpweb.pppl.gov",
      "laborHours": 0,
      "languages": [],
      "name": "TRANSP",
      "organization": "Princeton Plasma Physics Laboratory (PPPL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://transpweb.pppl.gov",
            "name": "Other"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://transpweb.pppl.gov",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Princeton Plasma Physics Laboratory (PPPL)"
      ]
    },
    {
      "contact": {
        "email": "czhu@pppl.gov"
      },
      "date": {
        "created": "2018-06-27",
        "metadataLastUpdated": "2018-06-27"
      },
      "description": "Building on the theoretical foundations of Bruno & Laurence, that three-dimensional, (3D) magnetohydrodynamic (MHD) equilibria with “stepped”-pressure profiles are well-defined and guaranteed to exist, whereas 3D equilibria with integrable magnetic-fields and smooth pressure (or with non-integrable fields and continuous-but-fractal pressure) are pathological. Dr. S.R. Hudson wrote the “Stepped Pressure Equilibrium Code”, (SPEC). SPEC finds minimal-plasma-energy states, subject to the constraints of conserved helicity and fluxes in a collection of nested sub-volumes by extremizing the multi-region, relaxed-MHD (MRxMHD), energy functional, introduced by Dr. M.J. Hole, Dr. S.R. Hudson & Prof. R.L. Dewar.",
      "homepageURL": "https://princetonuniversity.github.io/SPEC/",
      "laborHours": 0,
      "languages": [
        "Fortran"
      ],
      "name": "Stepped-Pressure Equilibrium Code (SPEC)",
      "organization": "Princeton Plasma Physics Laboratory (PPPL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "https://princetonuniversity.github.io/SPEC/",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Princeton Plasma Physics Laboratory (PPPL)"
      ]
    },
    {
      "contact": {
        "email": "czhu@pppl.gov"
      },
      "date": {
        "created": "2018-06-27",
        "metadataLastUpdated": "2018-06-27"
      },
      "description": "The STELLOPT code is design to optimize 3D MHD equilibria to a set of target physics parameters encompassing stellarator design and 3D equilibrium reconstruction. It is currently interfaced to the VMEC 3D equilibrium solver.",
      "homepageURL": "https://bitbucket.org/lazerson_princeton/stellopt/src/master/",
      "laborHours": 0,
      "languages": [
        "Fortran"
      ],
      "name": "STELLOPT",
      "organization": "Princeton Plasma Physics Laboratory (PPPL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/gpl-3.0",
            "name": "GPL-3.0"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "https://bitbucket.org/lazerson_princeton/stellopt/src/master/",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Princeton Plasma Physics Laboratory (PPPL)"
      ],
      "version": "2.6.0"
    },
    {
      "contact": {
        "email": "ethier@pppl.gov"
      },
      "date": {
        "created": "2018-06-27",
        "metadataLastUpdated": "2018-06-29"
      },
      "description": "Global, gyrokinetic PIC code in full general geometry used for studying core microturbulent transport in experimental tokamaks.",
      "homepageURL": "http://theorycodes.pppl.wikispaces.net/Theory+Department+Codes",
      "laborHours": 0,
      "languages": [
        "Fortran"
      ],
      "name": "Gyrokinetic Tokamak Simulation code (GTS)",
      "organization": "Princeton Plasma Physics Laboratory (PPPL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "http://theorycodes.pppl.wikispaces.net/file/detail/TheoryCodeLicenseReleaseForm.pdf",
            "name": "Other"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "http://theorycodes.pppl.wikispaces.net/Theory+Department+Codes",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Princeton Plasma Physics Laboratory (PPPL)"
      ]
    },
    {
      "contact": {
        "email": "sku@pppl.gov"
      },
      "date": {
        "created": "2018-06-27",
        "metadataLastUpdated": "2018-06-29"
      },
      "description": "XGC (X-point included gyrokinetic code), Version 3 Primary Author: Seunghoe Ku (PPPL, sku@pppl.gov), Robert Hager (PPPL, rhager@pppl.gov) 31 July 2017\nXGC is a gyrokinetic particle-in-cell code, which is sepeciallized in tokamak edge simulatin. The simulation domain can include the magnetic separatrix, magnetic axis and the biased material wall. XGC can run in full-f, total-delta-f, and conventional delta-f mode. The ion is kinetic always except ETG simulation. The electron can be adiabatic, fluid, drift kinetic, or gyrokinetic (for ETG).\nXGC is written in Fortran 90 and is designed for HPCs utilizing MPI, OpenMP, CUDA (GPU), OpenACC (GPU), and vectorization (Intel MIC-KNL). The weak scaling is roughly linear to the maximal nodes of leading HPCs in US.\nThere several versions of XGCs for different purpose: XGC0 is earlist version of XGC0 which is designed for neoclassical transport in the tokamak edge. It uses full-f method, and 00-mode electrostatic field is solved only. RMP and current response can be calculated with coupling with M3D.\nXGC1 is for turbulence simulation with low parallel wavenumber. Piecewise field following coordinates are used to handle low k-parallel perturbation with small (~64) number of toroidal resolution. In total-delta-f method, it utilizes phase space grid in addition to particles, to handel non-maxwellian distribution in the tokamak edge.\nXGCa is axisymmetric version of XGC1 to simulate neoclassical transport.\nReferences: [1] S. Ku et al., Nuclear Fusion 49, 115021 (2009)\n[2] S. Ku, R. Hager, C.S. Chang et al., J. Comp. Physics, 315, 467 (2016) https://doi.org/10.1016/j.jcp.2016.03.062 [2] R. Hager. E.S. Yoon. S.Ku et al., J. Comp. Physics, 315, 644 (2016) https://doi.org/10.1016/j.jcp.2016.03.064 [3] R. Hager, J. Lang et al., Phys. Plasmas 24,054508 (2017) http://dx.doi.org/10.1063/1.4983320",
      "homepageURL": "https://epsi.pppl.gov/xgc-users/how-to-become-an-xgc-user",
      "laborHours": 0,
      "languages": [
        "Fortran"
      ],
      "name": "XGC",
      "organization": "Princeton Plasma Physics Laboratory (PPPL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "http://theorycodes.pppl.wikispaces.net/file/view/TheoryCodeLicenseReleaseForm.pdf/249471929/TheoryCodeLicenseReleaseForm.pdf",
            "name": "Other"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "https://epsi.pppl.gov/xgc-users/how-to-become-an-xgc-user",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Princeton Plasma Physics Laboratory (PPPL)"
      ]
    },
    {
      "contact": {
        "email": "nferraro@pppl.gov"
      },
      "date": {
        "created": "2018-06-27",
        "metadataLastUpdated": "2018-07-02"
      },
      "description": "M3D-C1 is a code for simulating magnetized plasmas using an extended-MHD model",
      "homepageURL": "https://w3.pppl.gov/~nferraro/m3dc1.html",
      "laborHours": 0,
      "languages": [
        "C++",
        "IDL",
        "Fortran"
      ],
      "name": "M3D-C1",
      "organization": "Princeton Plasma Physics Laboratory (PPPL)",
      "permissions": {
        "exemptionText": "This source code is restricted by patent and / or intellectual property law.",
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "exemptByLaw"
      },
      "repositoryURL": "https://w3.pppl.gov/~nferraro/m3dc1.html",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Princeton Plasma Physics Laboratory (PPPL)"
      ]
    },
    {
      "contact": {
        "email": "david.long@pnnl.gov"
      },
      "date": {
        "created": "2018-07-02",
        "metadataLastUpdated": "2018-07-02"
      },
      "description": "GraphBLAS Template Library (GBTL): graph algorithms and primitives using semiring algebra as defined at graphblas.org",
      "laborHours": 0,
      "languages": [],
      "name": "cmu-sei/gbtl",
      "organization": "Pacific Northwest National Laboratory (PNNL)",
      "permissions": {
        "exemptionText": null,
        "licenses": [
          {
            "URL": "https://api.github.com/licenses/bsd-3-clause",
            "name": "BSD-3-Clause"
          }
        ],
        "usageType": "openSource"
      },
      "repositoryURL": "https://github.com/cmu-sei/gbtl",
      "status": "Development",
      "tags": [
        "DOE CODE",
        "Pacific Northwest National Laboratory (PNNL)"
      ],
      "vcs": "git"
    }
  ],
  "version": "2.0.0"
}
