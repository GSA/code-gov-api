version: 2
jobs:
  build:
    working_directory: ~/code-gov-api
    docker:
      - image: circleci/node:10.17.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: verify-npm-cache
          command: npm cache verify
      - run:
          name: install-node-modules
          command: npm install --all
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: run-linter
          command: npm run lint
      - run:
          name: run-security-check
          command: npm audit
  test:
    working_directory: ~/code-gov-api
    docker:
      - image: circleci/node:10.17.0
    environment:
      NODE_ENV: "testing"
    steps:
      - checkout
      - run:
          name: download-cc-test-reporter
          command: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - run:
          name: make-test-reporter-executable
          command: chmod +x ./cc-test-reporter
      - run:
          command: ./cc-test-reporter before-build
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: verify-npm-cache
          command: npm cache verify
      - run:
          name: install-node-modules
          command: npm install --all
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: run-test
          command: npm run unit-test
      - run:
          name: upload-test-report
          command: |
             ./cc-test-reporter after-build -t lcov --exit-code $?
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: coverage
          prefix: coverage
  integration:
    working_directory: ~/code-gov-api
    docker:
      - image: circleci/node:10.17.0
      - image: docker.elastic.co/elasticsearch/elasticsearch:5.6.12
    environment:
      NODE_ENV: "testing"
    steps:
      - checkout
      - run:
          name: download-cc-test-reporter
          command: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - run:
          name: make-test-reporter-executable
          command: chmod +x ./cc-test-reporter
      - run:
          command: ./cc-test-reporter before-build
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: verify-npm-cache
          command: npm cache verify
      - run:
          name: install-node-modules
          command: npm install --all
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: get-data
          command: |
            set -x
            sleep 45
            npm run index
      - run:
          name: run-test
          command: npm run integration-test
      - run:
          name: upload-test-report
          command: |
             ./cc-test-reporter after-build -t lcov --exit-code $?
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: coverage
          prefix: coverage
  deploy-staging:
    working_directory: ~/code-gov-api
    docker:
      - image: circleci/node:10.17.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-node-modules
          command: npm install --all
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      # Install Cloud Foundry cli (cf) before deploy step. cf is used to push project to Cloud.gov
      - run:
          name: install-cf-cli
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
      - run:
          name: install-cf-autopilot
          command: |
            curl -s https://api.github.com/repos/contraband/autopilot/releases/latest | grep "browser_download_url.*linux" | cut -d ":" -f 2,3 | tr -d \" | wget -qi -
            cf install-plugin autopilot-linux -f
      - run:
          name: deploy-to-staging
          command: |
            cf login -a ${CF_URL} -u ${CF_STAGING_DEPLOYER} -p ${CF_STAGING_DEPLOYER_PASS} -o ${CF_ORG} -s ${CF_STAGING_SPACE}
            cf zero-downtime-push code-api -f manifest-staging.yml
  deploy-production:
    working_directory: ~/code-gov-api
    docker:
      - image: circleci/node:10.17.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-node-modules
          command: npm install --all
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: install-cf-cli
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
      - run:
          name: install-cf-autopilot
          command: |
            curl -s https://api.github.com/repos/contraband/autopilot/releases/latest |  grep "browser_download_url.*linux" | cut -d ":" -f 2,3 | tr -d \" | wget -qi -
            cf install-plugin autopilot-linux -f
      - deploy:
          command: |
              cf login -a ${CF_URL} -u ${CF_PRODUCTION_DEPLOYER} -p ${CF_PRODUCTION_DEPLOYER_PASS} -o ${CF_ORG} -s ${CF_PRODUCTION_SPACE}
              cf zero-downtime-push code-api -f manifest.yml
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - integration:
          requires:
            - build
      - deploy-staging:
          requires:
            - test
            - integration
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - deploy-prod-hold:
          type: approval
          requires:
            - test
            - integration
          filters:
            tags:
              only: /^v.+/
              ignore: /.+-rc/
            branches:
              ignore: /.*/
      - deploy-production:
          requires:
            - deploy-prod-hold
          filters:
            tags:
              only: /^v.+/
              ignore: /.+-rc/
            branches:
              ignore: /.*/
